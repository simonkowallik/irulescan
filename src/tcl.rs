/* automatically generated by rust-bindgen 0.71.1 */

#![allow(unnecessary_transmutes)]
#![allow(unsafe_op_in_unsafe_fn)]

# [repr (C)] # [derive (Copy , Clone , Debug , Default , Eq , Hash , Ord , PartialEq , PartialOrd)] pub struct __BindgenBitfieldUnit < Storage > { storage : Storage , } impl < Storage > __BindgenBitfieldUnit < Storage > { # [inline] pub const fn new (storage : Storage) -> Self { Self { storage } } } impl < Storage > __BindgenBitfieldUnit < Storage > where Storage : AsRef < [u8] > + AsMut < [u8] >, { # [inline] fn extract_bit (byte : u8 , index : usize) -> bool { let bit_index = if cfg ! (target_endian = "big") { 7 - (index % 8) } else { index % 8 } ; let mask = 1 << bit_index ; byte & mask == mask } # [inline] pub fn get_bit (& self , index : usize) -> bool { debug_assert ! (index / 8 < self . storage . as_ref () . len ()) ; let byte_index = index / 8 ; let byte = self . storage . as_ref () [byte_index] ; Self :: extract_bit (byte , index) } # [inline] pub unsafe fn raw_get_bit (this : * const Self , index : usize) -> bool { debug_assert ! (index / 8 < core :: mem :: size_of ::< Storage > ()) ; let byte_index = index / 8 ; let byte = * (core :: ptr :: addr_of ! ((* this) . storage) as * const u8) . offset (byte_index as isize) ; Self :: extract_bit (byte , index) } # [inline] fn change_bit (byte : u8 , index : usize , val : bool) -> u8 { let bit_index = if cfg ! (target_endian = "big") { 7 - (index % 8) } else { index % 8 } ; let mask = 1 << bit_index ; if val { byte | mask } else { byte & ! mask } } # [inline] pub fn set_bit (& mut self , index : usize , val : bool) { debug_assert ! (index / 8 < self . storage . as_ref () . len ()) ; let byte_index = index / 8 ; let byte = & mut self . storage . as_mut () [byte_index] ; * byte = Self :: change_bit (* byte , index , val) ; } # [inline] pub unsafe fn raw_set_bit (this : * mut Self , index : usize , val : bool) { debug_assert ! (index / 8 < core :: mem :: size_of ::< Storage > ()) ; let byte_index = index / 8 ; let byte = (core :: ptr :: addr_of_mut ! ((* this) . storage) as * mut u8) . offset (byte_index as isize) ; * byte = Self :: change_bit (* byte , index , val) ; } # [inline] pub fn get (& self , bit_offset : usize , bit_width : u8) -> u64 { debug_assert ! (bit_width <= 64) ; debug_assert ! (bit_offset / 8 < self . storage . as_ref () . len ()) ; debug_assert ! ((bit_offset + (bit_width as usize)) / 8 <= self . storage . as_ref () . len ()) ; let mut val = 0 ; for i in 0 .. (bit_width as usize) { if self . get_bit (i + bit_offset) { let index = if cfg ! (target_endian = "big") { bit_width as usize - 1 - i } else { i } ; val |= 1 << index ; } } val } # [inline] pub unsafe fn raw_get (this : * const Self , bit_offset : usize , bit_width : u8 ,) -> u64 { debug_assert ! (bit_width <= 64) ; debug_assert ! (bit_offset / 8 < core :: mem :: size_of ::< Storage > ()) ; debug_assert ! ((bit_offset + (bit_width as usize)) / 8 <= core :: mem :: size_of ::< Storage > ()) ; let mut val = 0 ; for i in 0 .. (bit_width as usize) { if Self :: raw_get_bit (this , i + bit_offset) { let index = if cfg ! (target_endian = "big") { bit_width as usize - 1 - i } else { i } ; val |= 1 << index ; } } val } # [inline] pub fn set (& mut self , bit_offset : usize , bit_width : u8 , val : u64) { debug_assert ! (bit_width <= 64) ; debug_assert ! (bit_offset / 8 < self . storage . as_ref () . len ()) ; debug_assert ! ((bit_offset + (bit_width as usize)) / 8 <= self . storage . as_ref () . len ()) ; for i in 0 .. (bit_width as usize) { let mask = 1 << i ; let val_bit_is_set = val & mask == mask ; let index = if cfg ! (target_endian = "big") { bit_width as usize - 1 - i } else { i } ; self . set_bit (index + bit_offset , val_bit_is_set) ; } } # [inline] pub unsafe fn raw_set (this : * mut Self , bit_offset : usize , bit_width : u8 , val : u64 ,) { debug_assert ! (bit_width <= 64) ; debug_assert ! (bit_offset / 8 < core :: mem :: size_of ::< Storage > ()) ; debug_assert ! ((bit_offset + (bit_width as usize)) / 8 <= core :: mem :: size_of ::< Storage > ()) ; for i in 0 .. (bit_width as usize) { let mask = 1 << i ; let val_bit_is_set = val & mask == mask ; let index = if cfg ! (target_endian = "big") { bit_width as usize - 1 - i } else { i } ; Self :: raw_set_bit (this , index + bit_offset , val_bit_is_set) ; } } } # [doc = r" If Bindgen could only determine the size and alignment of a"] # [doc = r" type, it is represented like this."] # [derive (PartialEq , Copy , Clone , Debug , Hash)] # [repr (C)] pub struct __BindgenOpaqueArray < T : Copy , const N : usize > (pub [T ; N]) ; impl < T : Copy + Default , const N : usize > Default for __BindgenOpaqueArray < T , N > { fn default () -> Self { Self ([< T as Default > :: default () ; N]) } } pub const TCL_ALPHA_RELEASE : u32 = 0 ; pub const TCL_BETA_RELEASE : u32 = 1 ; pub const TCL_FINAL_RELEASE : u32 = 2 ; pub const TCL_MAJOR_VERSION : u32 = 8 ; pub const TCL_MINOR_VERSION : u32 = 4 ; pub const TCL_RELEASE_LEVEL : u32 = 2 ; pub const TCL_RELEASE_SERIAL : u32 = 20 ; pub const TCL_VERSION : & [u8 ; 4] = b"8.4\0" ; pub const TCL_PATCH_LEVEL : & [u8 ; 7] = b"8.4.20\0" ; pub const _STDIO_H : u32 = 1 ; pub const _FEATURES_H : u32 = 1 ; pub const _DEFAULT_SOURCE : u32 = 1 ; pub const __GLIBC_USE_ISOC2Y : u32 = 0 ; pub const __GLIBC_USE_ISOC23 : u32 = 0 ; pub const __USE_ISOC11 : u32 = 1 ; pub const __USE_ISOC99 : u32 = 1 ; pub const __USE_ISOC95 : u32 = 1 ; pub const __USE_POSIX_IMPLICITLY : u32 = 1 ; pub const _POSIX_SOURCE : u32 = 1 ; pub const _POSIX_C_SOURCE : u32 = 200809 ; pub const __USE_POSIX : u32 = 1 ; pub const __USE_POSIX2 : u32 = 1 ; pub const __USE_POSIX199309 : u32 = 1 ; pub const __USE_POSIX199506 : u32 = 1 ; pub const __USE_XOPEN2K : u32 = 1 ; pub const __USE_XOPEN2K8 : u32 = 1 ; pub const _ATFILE_SOURCE : u32 = 1 ; pub const __WORDSIZE : u32 = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : u32 = 0 ; pub const __TIMESIZE : u32 = 64 ; pub const __USE_TIME_BITS64 : u32 = 1 ; pub const __USE_MISC : u32 = 1 ; pub const __USE_ATFILE : u32 = 1 ; pub const __USE_FORTIFY_LEVEL : u32 = 0 ; pub const __GLIBC_USE_DEPRECATED_GETS : u32 = 0 ; pub const __GLIBC_USE_DEPRECATED_SCANF : u32 = 0 ; pub const __GLIBC_USE_C23_STRTOL : u32 = 0 ; pub const _STDC_PREDEF_H : u32 = 1 ; pub const __STDC_IEC_559__ : u32 = 1 ; pub const __STDC_IEC_60559_BFP__ : u32 = 201404 ; pub const __STDC_IEC_559_COMPLEX__ : u32 = 1 ; pub const __STDC_IEC_60559_COMPLEX__ : u32 = 201404 ; pub const __STDC_ISO_10646__ : u32 = 201706 ; pub const __GNU_LIBRARY__ : u32 = 6 ; pub const __GLIBC__ : u32 = 2 ; pub const __GLIBC_MINOR__ : u32 = 41 ; pub const _SYS_CDEFS_H : u32 = 1 ; pub const __glibc_c99_flexarr_available : u32 = 1 ; pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI : u32 = 0 ; pub const __HAVE_GENERIC_SELECTION : u32 = 1 ; pub const __GLIBC_USE_LIB_EXT2 : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_BFP_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23 : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_FUNCS_EXT : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 : u32 = 0 ; pub const __GLIBC_USE_IEC_60559_TYPES_EXT : u32 = 0 ; pub const __GNUC_VA_LIST : u32 = 1 ; pub const _BITS_TYPES_H : u32 = 1 ; pub const _BITS_TYPESIZES_H : u32 = 1 ; pub const __OFF_T_MATCHES_OFF64_T : u32 = 1 ; pub const __INO_T_MATCHES_INO64_T : u32 = 1 ; pub const __RLIM_T_MATCHES_RLIM64_T : u32 = 1 ; pub const __STATFS_MATCHES_STATFS64 : u32 = 1 ; pub const __FD_SETSIZE : u32 = 1024 ; pub const _BITS_TIME64_H : u32 = 1 ; pub const _____fpos_t_defined : u32 = 1 ; pub const ____mbstate_t_defined : u32 = 1 ; pub const _____fpos64_t_defined : u32 = 1 ; pub const ____FILE_defined : u32 = 1 ; pub const __FILE_defined : u32 = 1 ; pub const __struct_FILE_defined : u32 = 1 ; pub const _IO_EOF_SEEN : u32 = 16 ; pub const _IO_ERR_SEEN : u32 = 32 ; pub const _IO_USER_LOCK : u32 = 32768 ; pub const __cookie_io_functions_t_defined : u32 = 1 ; pub const _IOFBF : u32 = 0 ; pub const _IOLBF : u32 = 1 ; pub const _IONBF : u32 = 2 ; pub const BUFSIZ : u32 = 8192 ; pub const EOF : i32 = - 1 ; pub const SEEK_SET : u32 = 0 ; pub const SEEK_CUR : u32 = 1 ; pub const SEEK_END : u32 = 2 ; pub const P_tmpdir : & [u8 ; 5] = b"/tmp\0" ; pub const L_tmpnam : u32 = 20 ; pub const TMP_MAX : u32 = 238328 ; pub const _BITS_STDIO_LIM_H : u32 = 1 ; pub const FILENAME_MAX : u32 = 4096 ; pub const L_ctermid : u32 = 9 ; pub const FOPEN_MAX : u32 = 16 ; pub const __HAVE_FLOAT128 : u32 = 1 ; pub const __HAVE_DISTINCT_FLOAT128 : u32 = 0 ; pub const __HAVE_FLOAT64X : u32 = 1 ; pub const __HAVE_FLOAT64X_LONG_DOUBLE : u32 = 1 ; pub const __HAVE_FLOAT16 : u32 = 0 ; pub const __HAVE_FLOAT32 : u32 = 1 ; pub const __HAVE_FLOAT64 : u32 = 1 ; pub const __HAVE_FLOAT32X : u32 = 1 ; pub const __HAVE_FLOAT128X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT16 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT32 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT64 : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT32X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT64X : u32 = 0 ; pub const __HAVE_DISTINCT_FLOAT128X : u32 = 0 ; pub const __HAVE_FLOATN_NOT_TYPEDEF : u32 = 0 ; pub const TCL_LL_MODIFIER : & [u8 ; 3] = b"ll\0" ; pub const TCL_LL_MODIFIER_SIZE : u32 = 2 ; pub const TCL_PRESERVE_BINARY_COMPATABILITY : u32 = 1 ; pub const TCL_THREAD_STACK_DEFAULT : u32 = 0 ; pub const TCL_THREAD_NOFLAGS : u32 = 0 ; pub const TCL_THREAD_JOINABLE : u32 = 1 ; pub const TCL_REG_BASIC : u32 = 0 ; pub const TCL_REG_EXTENDED : u32 = 1 ; pub const TCL_REG_ADVF : u32 = 2 ; pub const TCL_REG_ADVANCED : u32 = 3 ; pub const TCL_REG_QUOTE : u32 = 4 ; pub const TCL_REG_NOCASE : u32 = 8 ; pub const TCL_REG_NOSUB : u32 = 16 ; pub const TCL_REG_EXPANDED : u32 = 32 ; pub const TCL_REG_NLSTOP : u32 = 64 ; pub const TCL_REG_NLANCH : u32 = 128 ; pub const TCL_REG_NEWLINE : u32 = 192 ; pub const TCL_REG_CANMATCH : u32 = 512 ; pub const TCL_REG_BOSONLY : u32 = 1024 ; pub const TCL_REG_NOTBOL : u32 = 1 ; pub const TCL_REG_NOTEOL : u32 = 2 ; pub const TCL_OK : u32 = 0 ; pub const TCL_ERROR : u32 = 1 ; pub const TCL_RETURN : u32 = 2 ; pub const TCL_BREAK : u32 = 3 ; pub const TCL_CONTINUE : u32 = 4 ; pub const TCL_RESULT_SIZE : u32 = 200 ; pub const TCL_SUBST_COMMANDS : u32 = 1 ; pub const TCL_SUBST_VARIABLES : u32 = 2 ; pub const TCL_SUBST_BACKSLASHES : u32 = 4 ; pub const TCL_SUBST_ALL : u32 = 7 ; pub const TCL_DSTRING_STATIC_SIZE : u32 = 200 ; pub const TCL_MAX_PREC : u32 = 17 ; pub const TCL_DOUBLE_SPACE : u32 = 27 ; pub const TCL_INTEGER_SPACE : u32 = 24 ; pub const TCL_DONT_USE_BRACES : u32 = 1 ; pub const TCL_EXACT : u32 = 1 ; pub const TCL_NO_EVAL : u32 = 65536 ; pub const TCL_EVAL_GLOBAL : u32 = 131072 ; pub const TCL_EVAL_DIRECT : u32 = 262144 ; pub const TCL_EVAL_INVOKE : u32 = 524288 ; pub const TCL_GLOBAL_ONLY : u32 = 1 ; pub const TCL_NAMESPACE_ONLY : u32 = 2 ; pub const TCL_APPEND_VALUE : u32 = 4 ; pub const TCL_LIST_ELEMENT : u32 = 8 ; pub const TCL_TRACE_READS : u32 = 16 ; pub const TCL_TRACE_WRITES : u32 = 32 ; pub const TCL_TRACE_UNSETS : u32 = 64 ; pub const TCL_TRACE_DESTROYED : u32 = 128 ; pub const TCL_INTERP_DESTROYED : u32 = 256 ; pub const TCL_LEAVE_ERR_MSG : u32 = 512 ; pub const TCL_TRACE_ARRAY : u32 = 2048 ; pub const TCL_TRACE_OLD_STYLE : u32 = 4096 ; pub const TCL_TRACE_RESULT_DYNAMIC : u32 = 32768 ; pub const TCL_TRACE_RESULT_OBJECT : u32 = 65536 ; pub const TCL_TRACE_RENAME : u32 = 8192 ; pub const TCL_TRACE_DELETE : u32 = 16384 ; pub const TCL_ALLOW_INLINE_COMPILATION : u32 = 131072 ; pub const TCL_TRACE_ENTER_EXEC : u32 = 1 ; pub const TCL_TRACE_LEAVE_EXEC : u32 = 2 ; pub const TCL_PARSE_PART1 : u32 = 1024 ; pub const TCL_LINK_INT : u32 = 1 ; pub const TCL_LINK_DOUBLE : u32 = 2 ; pub const TCL_LINK_BOOLEAN : u32 = 3 ; pub const TCL_LINK_STRING : u32 = 4 ; pub const TCL_LINK_WIDE_INT : u32 = 5 ; pub const TCL_LINK_READ_ONLY : u32 = 128 ; pub const TCL_HASH_KEY_STORE_HASH : u32 = 1 ; pub const TCL_HASH_KEY_RANDOMIZE_HASH : u32 = 1 ; pub const TCL_HASH_KEY_TYPE_VERSION : u32 = 1 ; pub const TCL_SMALL_HASH_TABLE : u32 = 4 ; pub const TCL_STRING_KEYS : u32 = 0 ; pub const TCL_ONE_WORD_KEYS : u32 = 1 ; pub const TCL_CUSTOM_TYPE_KEYS : i32 = - 2 ; pub const TCL_CUSTOM_PTR_KEYS : i32 = - 1 ; pub const TCL_DONT_WAIT : u32 = 2 ; pub const TCL_WINDOW_EVENTS : u32 = 4 ; pub const TCL_FILE_EVENTS : u32 = 8 ; pub const TCL_TIMER_EVENTS : u32 = 16 ; pub const TCL_IDLE_EVENTS : u32 = 32 ; pub const TCL_ALL_EVENTS : i32 = - 3 ; pub const TCL_SERVICE_NONE : u32 = 0 ; pub const TCL_SERVICE_ALL : u32 = 1 ; pub const TCL_READABLE : u32 = 2 ; pub const TCL_WRITABLE : u32 = 4 ; pub const TCL_EXCEPTION : u32 = 8 ; pub const TCL_STDIN : u32 = 2 ; pub const TCL_STDOUT : u32 = 4 ; pub const TCL_STDERR : u32 = 8 ; pub const TCL_ENFORCE_MODE : u32 = 16 ; pub const TCL_CLOSE_READ : u32 = 2 ; pub const TCL_CLOSE_WRITE : u32 = 4 ; pub const TCL_CHANNEL_THREAD_INSERT : u32 = 0 ; pub const TCL_CHANNEL_THREAD_REMOVE : u32 = 1 ; pub const TCL_MODE_BLOCKING : u32 = 0 ; pub const TCL_MODE_NONBLOCKING : u32 = 1 ; pub const TCL_GLOB_TYPE_BLOCK : u32 = 1 ; pub const TCL_GLOB_TYPE_CHAR : u32 = 2 ; pub const TCL_GLOB_TYPE_DIR : u32 = 4 ; pub const TCL_GLOB_TYPE_PIPE : u32 = 8 ; pub const TCL_GLOB_TYPE_FILE : u32 = 16 ; pub const TCL_GLOB_TYPE_LINK : u32 = 32 ; pub const TCL_GLOB_TYPE_SOCK : u32 = 64 ; pub const TCL_GLOB_TYPE_MOUNT : u32 = 128 ; pub const TCL_GLOB_PERM_RONLY : u32 = 1 ; pub const TCL_GLOB_PERM_HIDDEN : u32 = 2 ; pub const TCL_GLOB_PERM_R : u32 = 4 ; pub const TCL_GLOB_PERM_W : u32 = 8 ; pub const TCL_GLOB_PERM_X : u32 = 16 ; pub const TCL_CREATE_SYMBOLIC_LINK : u32 = 1 ; pub const TCL_CREATE_HARD_LINK : u32 = 2 ; pub const TCL_ENCODING_START : u32 = 1 ; pub const TCL_ENCODING_END : u32 = 2 ; pub const TCL_ENCODING_STOPONERROR : u32 = 4 ; pub const TCL_TOKEN_WORD : u32 = 1 ; pub const TCL_TOKEN_SIMPLE_WORD : u32 = 2 ; pub const TCL_TOKEN_TEXT : u32 = 4 ; pub const TCL_TOKEN_BS : u32 = 8 ; pub const TCL_TOKEN_COMMAND : u32 = 16 ; pub const TCL_TOKEN_VARIABLE : u32 = 32 ; pub const TCL_TOKEN_SUB_EXPR : u32 = 64 ; pub const TCL_TOKEN_OPERATOR : u32 = 128 ; pub const TCL_PARSE_SUCCESS : u32 = 0 ; pub const TCL_PARSE_QUOTE_EXTRA : u32 = 1 ; pub const TCL_PARSE_BRACE_EXTRA : u32 = 2 ; pub const TCL_PARSE_MISSING_BRACE : u32 = 3 ; pub const TCL_PARSE_MISSING_BRACKET : u32 = 4 ; pub const TCL_PARSE_MISSING_PAREN : u32 = 5 ; pub const TCL_PARSE_MISSING_QUOTE : u32 = 6 ; pub const TCL_PARSE_MISSING_VAR_BRACE : u32 = 7 ; pub const TCL_PARSE_SYNTAX : u32 = 8 ; pub const TCL_PARSE_BAD_NUMBER : u32 = 9 ; pub const NUM_STATIC_TOKENS : u32 = 20 ; pub const TCL_CONVERT_MULTIBYTE : i32 = - 1 ; pub const TCL_CONVERT_SYNTAX : i32 = - 2 ; pub const TCL_CONVERT_UNKNOWN : i32 = - 3 ; pub const TCL_CONVERT_NOSPACE : i32 = - 4 ; pub const TCL_UTF_MAX : u32 = 3 ; pub type va_list = __BindgenOpaqueArray < u64 , 4usize > ; pub type __gnuc_va_list = __BindgenOpaqueArray < u64 , 4usize > ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __int_least8_t = __int8_t ; pub type __uint_least8_t = __uint8_t ; pub type __int_least16_t = __int16_t ; pub type __uint_least16_t = __uint16_t ; pub type __int_least32_t = __int32_t ; pub type __uint_least32_t = __uint32_t ; pub type __int_least64_t = __int64_t ; pub type __uint_least64_t = __uint64_t ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __intmax_t = :: std :: os :: raw :: c_long ; pub type __uintmax_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_uint ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __fsid_t { pub __val : [:: std :: os :: raw :: c_int ; 2usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of __fsid_t"] [:: std :: mem :: size_of :: < __fsid_t > () - 8usize] ; ["Alignment of __fsid_t"] [:: std :: mem :: align_of :: < __fsid_t > () - 4usize] ; ["Offset of field: __fsid_t::__val"] [:: std :: mem :: offset_of ! (__fsid_t , __val) - 0usize] ; } ; pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __suseconds64_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_int ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; pub type __sig_atomic_t = :: std :: os :: raw :: c_int ; # [repr (C)] # [derive (Copy , Clone)] pub struct __mbstate_t { pub __count : :: std :: os :: raw :: c_int , pub __value : __mbstate_t__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union __mbstate_t__bindgen_ty_1 { pub __wch : :: std :: os :: raw :: c_uint , pub __wchb : [:: std :: os :: raw :: c_char ; 4usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of __mbstate_t__bindgen_ty_1"] [:: std :: mem :: size_of :: < __mbstate_t__bindgen_ty_1 > () - 4usize] ; ["Alignment of __mbstate_t__bindgen_ty_1"] [:: std :: mem :: align_of :: < __mbstate_t__bindgen_ty_1 > () - 4usize] ; ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"] [:: std :: mem :: offset_of ! (__mbstate_t__bindgen_ty_1 , __wch) - 0usize] ; ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"] [:: std :: mem :: offset_of ! (__mbstate_t__bindgen_ty_1 , __wchb) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of __mbstate_t"] [:: std :: mem :: size_of :: < __mbstate_t > () - 8usize] ; ["Alignment of __mbstate_t"] [:: std :: mem :: align_of :: < __mbstate_t > () - 4usize] ; ["Offset of field: __mbstate_t::__count"] [:: std :: mem :: offset_of ! (__mbstate_t , __count) - 0usize] ; ["Offset of field: __mbstate_t::__value"] [:: std :: mem :: offset_of ! (__mbstate_t , __value) - 4usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct _G_fpos_t { pub __pos : __off_t , pub __state : __mbstate_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of _G_fpos_t"] [:: std :: mem :: size_of :: < _G_fpos_t > () - 16usize] ; ["Alignment of _G_fpos_t"] [:: std :: mem :: align_of :: < _G_fpos_t > () - 8usize] ; ["Offset of field: _G_fpos_t::__pos"] [:: std :: mem :: offset_of ! (_G_fpos_t , __pos) - 0usize] ; ["Offset of field: _G_fpos_t::__state"] [:: std :: mem :: offset_of ! (_G_fpos_t , __state) - 8usize] ; } ; pub type __fpos_t = _G_fpos_t ; # [repr (C)] # [derive (Copy , Clone)] pub struct _G_fpos64_t { pub __pos : __off64_t , pub __state : __mbstate_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of _G_fpos64_t"] [:: std :: mem :: size_of :: < _G_fpos64_t > () - 16usize] ; ["Alignment of _G_fpos64_t"] [:: std :: mem :: align_of :: < _G_fpos64_t > () - 8usize] ; ["Offset of field: _G_fpos64_t::__pos"] [:: std :: mem :: offset_of ! (_G_fpos64_t , __pos) - 0usize] ; ["Offset of field: _G_fpos64_t::__state"] [:: std :: mem :: offset_of ! (_G_fpos64_t , __state) - 8usize] ; } ; pub type __fpos64_t = _G_fpos64_t ; pub type __FILE = _IO_FILE ; pub type FILE = _IO_FILE ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _IO_marker { _unused : [u8 ; 0] , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _IO_codecvt { _unused : [u8 ; 0] , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _IO_wide_data { _unused : [u8 ; 0] , } pub type _IO_lock_t = :: std :: os :: raw :: c_void ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _IO_FILE { pub _flags : :: std :: os :: raw :: c_int , pub _IO_read_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_read_end : * mut :: std :: os :: raw :: c_char , pub _IO_read_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_base : * mut :: std :: os :: raw :: c_char , pub _IO_write_ptr : * mut :: std :: os :: raw :: c_char , pub _IO_write_end : * mut :: std :: os :: raw :: c_char , pub _IO_buf_base : * mut :: std :: os :: raw :: c_char , pub _IO_buf_end : * mut :: std :: os :: raw :: c_char , pub _IO_save_base : * mut :: std :: os :: raw :: c_char , pub _IO_backup_base : * mut :: std :: os :: raw :: c_char , pub _IO_save_end : * mut :: std :: os :: raw :: c_char , pub _markers : * mut _IO_marker , pub _chain : * mut _IO_FILE , pub _fileno : :: std :: os :: raw :: c_int , pub _bitfield_align_1 : [u32 ; 0] , pub _bitfield_1 : __BindgenBitfieldUnit < [u8 ; 3usize] > , pub _short_backupbuf : [:: std :: os :: raw :: c_char ; 1usize] , pub _old_offset : __off_t , pub _cur_column : :: std :: os :: raw :: c_ushort , pub _vtable_offset : :: std :: os :: raw :: c_schar , pub _shortbuf : [:: std :: os :: raw :: c_char ; 1usize] , pub _lock : * mut _IO_lock_t , pub _offset : __off64_t , pub _codecvt : * mut _IO_codecvt , pub _wide_data : * mut _IO_wide_data , pub _freeres_list : * mut _IO_FILE , pub _freeres_buf : * mut :: std :: os :: raw :: c_void , pub _prevchain : * mut * mut _IO_FILE , pub _mode : :: std :: os :: raw :: c_int , pub _unused2 : [:: std :: os :: raw :: c_char ; 20usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of _IO_FILE"] [:: std :: mem :: size_of :: < _IO_FILE > () - 216usize] ; ["Alignment of _IO_FILE"] [:: std :: mem :: align_of :: < _IO_FILE > () - 8usize] ; ["Offset of field: _IO_FILE::_flags"] [:: std :: mem :: offset_of ! (_IO_FILE , _flags) - 0usize] ; ["Offset of field: _IO_FILE::_IO_read_ptr"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_read_ptr) - 8usize] ; ["Offset of field: _IO_FILE::_IO_read_end"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_read_end) - 16usize] ; ["Offset of field: _IO_FILE::_IO_read_base"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_read_base) - 24usize] ; ["Offset of field: _IO_FILE::_IO_write_base"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_write_base) - 32usize] ; ["Offset of field: _IO_FILE::_IO_write_ptr"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_write_ptr) - 40usize] ; ["Offset of field: _IO_FILE::_IO_write_end"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_write_end) - 48usize] ; ["Offset of field: _IO_FILE::_IO_buf_base"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_buf_base) - 56usize] ; ["Offset of field: _IO_FILE::_IO_buf_end"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_buf_end) - 64usize] ; ["Offset of field: _IO_FILE::_IO_save_base"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_save_base) - 72usize] ; ["Offset of field: _IO_FILE::_IO_backup_base"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_backup_base) - 80usize] ; ["Offset of field: _IO_FILE::_IO_save_end"] [:: std :: mem :: offset_of ! (_IO_FILE , _IO_save_end) - 88usize] ; ["Offset of field: _IO_FILE::_markers"] [:: std :: mem :: offset_of ! (_IO_FILE , _markers) - 96usize] ; ["Offset of field: _IO_FILE::_chain"] [:: std :: mem :: offset_of ! (_IO_FILE , _chain) - 104usize] ; ["Offset of field: _IO_FILE::_fileno"] [:: std :: mem :: offset_of ! (_IO_FILE , _fileno) - 112usize] ; ["Offset of field: _IO_FILE::_short_backupbuf"] [:: std :: mem :: offset_of ! (_IO_FILE , _short_backupbuf) - 119usize] ; ["Offset of field: _IO_FILE::_old_offset"] [:: std :: mem :: offset_of ! (_IO_FILE , _old_offset) - 120usize] ; ["Offset of field: _IO_FILE::_cur_column"] [:: std :: mem :: offset_of ! (_IO_FILE , _cur_column) - 128usize] ; ["Offset of field: _IO_FILE::_vtable_offset"] [:: std :: mem :: offset_of ! (_IO_FILE , _vtable_offset) - 130usize] ; ["Offset of field: _IO_FILE::_shortbuf"] [:: std :: mem :: offset_of ! (_IO_FILE , _shortbuf) - 131usize] ; ["Offset of field: _IO_FILE::_lock"] [:: std :: mem :: offset_of ! (_IO_FILE , _lock) - 136usize] ; ["Offset of field: _IO_FILE::_offset"] [:: std :: mem :: offset_of ! (_IO_FILE , _offset) - 144usize] ; ["Offset of field: _IO_FILE::_codecvt"] [:: std :: mem :: offset_of ! (_IO_FILE , _codecvt) - 152usize] ; ["Offset of field: _IO_FILE::_wide_data"] [:: std :: mem :: offset_of ! (_IO_FILE , _wide_data) - 160usize] ; ["Offset of field: _IO_FILE::_freeres_list"] [:: std :: mem :: offset_of ! (_IO_FILE , _freeres_list) - 168usize] ; ["Offset of field: _IO_FILE::_freeres_buf"] [:: std :: mem :: offset_of ! (_IO_FILE , _freeres_buf) - 176usize] ; ["Offset of field: _IO_FILE::_prevchain"] [:: std :: mem :: offset_of ! (_IO_FILE , _prevchain) - 184usize] ; ["Offset of field: _IO_FILE::_mode"] [:: std :: mem :: offset_of ! (_IO_FILE , _mode) - 192usize] ; ["Offset of field: _IO_FILE::_unused2"] [:: std :: mem :: offset_of ! (_IO_FILE , _unused2) - 196usize] ; } ; impl _IO_FILE { # [inline] pub fn _flags2 (& self) -> :: std :: os :: raw :: c_int { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (0usize , 24u8) as u32) } } # [inline] pub fn set__flags2 (& mut self , val : :: std :: os :: raw :: c_int) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (0usize , 24u8 , val as u64) } } # [inline] pub unsafe fn _flags2_raw (this : * const Self) -> :: std :: os :: raw :: c_int { unsafe { :: std :: mem :: transmute (< __BindgenBitfieldUnit < [u8 ; 3usize] > > :: raw_get (:: std :: ptr :: addr_of ! ((* this) . _bitfield_1) , 0usize , 24u8 ,) as u32) } } # [inline] pub unsafe fn set__flags2_raw (this : * mut Self , val : :: std :: os :: raw :: c_int) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; < __BindgenBitfieldUnit < [u8 ; 3usize] > > :: raw_set (:: std :: ptr :: addr_of_mut ! ((* this) . _bitfield_1) , 0usize , 24u8 , val as u64 ,) } } # [inline] pub fn new_bitfield_1 (_flags2 : :: std :: os :: raw :: c_int) -> __BindgenBitfieldUnit < [u8 ; 3usize] > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [u8 ; 3usize] > = Default :: default () ; __bindgen_bitfield_unit . set (0usize , 24u8 , { let _flags2 : u32 = unsafe { :: std :: mem :: transmute (_flags2) } ; _flags2 as u64 }) ; __bindgen_bitfield_unit } } pub type cookie_read_function_t = :: std :: option :: Option < unsafe extern "C" fn (__cookie : * mut :: std :: os :: raw :: c_void , __buf : * mut :: std :: os :: raw :: c_char , __nbytes : usize) -> __ssize_t > ; pub type cookie_write_function_t = :: std :: option :: Option < unsafe extern "C" fn (__cookie : * mut :: std :: os :: raw :: c_void , __buf : * const :: std :: os :: raw :: c_char , __nbytes : usize) -> __ssize_t > ; pub type cookie_seek_function_t = :: std :: option :: Option < unsafe extern "C" fn (__cookie : * mut :: std :: os :: raw :: c_void , __pos : * mut __off64_t , __w : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type cookie_close_function_t = :: std :: option :: Option < unsafe extern "C" fn (__cookie : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _IO_cookie_io_functions_t { pub read : cookie_read_function_t , pub write : cookie_write_function_t , pub seek : cookie_seek_function_t , pub close : cookie_close_function_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of _IO_cookie_io_functions_t"] [:: std :: mem :: size_of :: < _IO_cookie_io_functions_t > () - 32usize] ; ["Alignment of _IO_cookie_io_functions_t"] [:: std :: mem :: align_of :: < _IO_cookie_io_functions_t > () - 8usize] ; ["Offset of field: _IO_cookie_io_functions_t::read"] [:: std :: mem :: offset_of ! (_IO_cookie_io_functions_t , read) - 0usize] ; ["Offset of field: _IO_cookie_io_functions_t::write"] [:: std :: mem :: offset_of ! (_IO_cookie_io_functions_t , write) - 8usize] ; ["Offset of field: _IO_cookie_io_functions_t::seek"] [:: std :: mem :: offset_of ! (_IO_cookie_io_functions_t , seek) - 16usize] ; ["Offset of field: _IO_cookie_io_functions_t::close"] [:: std :: mem :: offset_of ! (_IO_cookie_io_functions_t , close) - 24usize] ; } ; pub type cookie_io_functions_t = _IO_cookie_io_functions_t ; pub type off_t = __off_t ; pub type fpos_t = __fpos_t ; unsafe extern "C" { pub static mut stdin : * mut FILE ; } unsafe extern "C" { pub static mut stdout : * mut FILE ; } unsafe extern "C" { pub static mut stderr : * mut FILE ; } unsafe extern "C" { pub fn remove (__filename : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn rename (__old : * const :: std :: os :: raw :: c_char , __new : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn renameat (__oldfd : :: std :: os :: raw :: c_int , __old : * const :: std :: os :: raw :: c_char , __newfd : :: std :: os :: raw :: c_int , __new : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fclose (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn tmpfile () -> * mut FILE ; } unsafe extern "C" { pub fn tmpnam (arg1 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn tmpnam_r (__s : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn tempnam (__dir : * const :: std :: os :: raw :: c_char , __pfx : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn fflush (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fflush_unlocked (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fopen (__filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char) -> * mut FILE ; } unsafe extern "C" { pub fn freopen (__filename : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char , __stream : * mut FILE) -> * mut FILE ; } unsafe extern "C" { pub fn fdopen (__fd : :: std :: os :: raw :: c_int , __modes : * const :: std :: os :: raw :: c_char) -> * mut FILE ; } unsafe extern "C" { pub fn fopencookie (__magic_cookie : * mut :: std :: os :: raw :: c_void , __modes : * const :: std :: os :: raw :: c_char , __io_funcs : cookie_io_functions_t) -> * mut FILE ; } unsafe extern "C" { pub fn fmemopen (__s : * mut :: std :: os :: raw :: c_void , __len : usize , __modes : * const :: std :: os :: raw :: c_char) -> * mut FILE ; } unsafe extern "C" { pub fn open_memstream (__bufloc : * mut * mut :: std :: os :: raw :: c_char , __sizeloc : * mut usize) -> * mut FILE ; } unsafe extern "C" { pub fn setbuf (__stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn setvbuf (__stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __modes : :: std :: os :: raw :: c_int , __n : usize) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn setbuffer (__stream : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __size : usize) ; } unsafe extern "C" { pub fn setlinebuf (__stream : * mut FILE) ; } unsafe extern "C" { pub fn fprintf (__stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn printf (__format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn sprintf (__s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vfprintf (__s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vprintf (__format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vsprintf (__s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn snprintf (__s : * mut :: std :: os :: raw :: c_char , __maxlen : :: std :: os :: raw :: c_ulong , __format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vsnprintf (__s : * mut :: std :: os :: raw :: c_char , __maxlen : :: std :: os :: raw :: c_ulong , __format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vasprintf (__ptr : * mut * mut :: std :: os :: raw :: c_char , __f : * const :: std :: os :: raw :: c_char , __arg : __gnuc_va_list) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn __asprintf (__ptr : * mut * mut :: std :: os :: raw :: c_char , __fmt : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn asprintf (__ptr : * mut * mut :: std :: os :: raw :: c_char , __fmt : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vdprintf (__fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , __arg : __gnuc_va_list) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn dprintf (__fd : :: std :: os :: raw :: c_int , __fmt : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fscanf (__stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn scanf (__format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn sscanf (__s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } pub type _Float128 = u128 ; pub type _Float32 = f32 ; pub type _Float64 = f64 ; pub type _Float32x = f64 ; pub type _Float64x = u128 ; unsafe extern "C" { # [link_name = "\u{1}__isoc99_fscanf"] pub fn fscanf1 (__stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { # [link_name = "\u{1}__isoc99_scanf"] pub fn scanf1 (__format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { # [link_name = "\u{1}__isoc99_sscanf"] pub fn sscanf1 (__s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vfscanf (__s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vscanf (__format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn vsscanf (__s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { # [link_name = "\u{1}__isoc99_vfscanf"] pub fn vfscanf1 (__s : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { # [link_name = "\u{1}__isoc99_vscanf"] pub fn vscanf1 (__format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { # [link_name = "\u{1}__isoc99_vsscanf"] pub fn vsscanf1 (__s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : __BindgenOpaqueArray < u64 , 4usize >) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fgetc (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getc (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getchar () -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getc_unlocked (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getchar_unlocked () -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fgetc_unlocked (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fputc (__c : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn putc (__c : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn putchar (__c : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fputc_unlocked (__c : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn putc_unlocked (__c : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn putchar_unlocked (__c : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getw (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn putw (__w : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fgets (__s : * mut :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn __getdelim (__lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> __ssize_t ; } unsafe extern "C" { pub fn getdelim (__lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> __ssize_t ; } unsafe extern "C" { pub fn getline (__lineptr : * mut * mut :: std :: os :: raw :: c_char , __n : * mut usize , __stream : * mut FILE) -> __ssize_t ; } unsafe extern "C" { pub fn fputs (__s : * const :: std :: os :: raw :: c_char , __stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn puts (__s : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn ungetc (__c : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fread (__ptr : * mut :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong , __n : :: std :: os :: raw :: c_ulong , __stream : * mut FILE) -> :: std :: os :: raw :: c_ulong ; } unsafe extern "C" { pub fn fwrite (__ptr : * const :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong , __n : :: std :: os :: raw :: c_ulong , __s : * mut FILE) -> :: std :: os :: raw :: c_ulong ; } unsafe extern "C" { pub fn fread_unlocked (__ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE) -> usize ; } unsafe extern "C" { pub fn fwrite_unlocked (__ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __stream : * mut FILE) -> usize ; } unsafe extern "C" { pub fn fseek (__stream : * mut FILE , __off : :: std :: os :: raw :: c_long , __whence : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn ftell (__stream : * mut FILE) -> :: std :: os :: raw :: c_long ; } unsafe extern "C" { pub fn rewind (__stream : * mut FILE) ; } unsafe extern "C" { pub fn fseeko (__stream : * mut FILE , __off : __off_t , __whence : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn ftello (__stream : * mut FILE) -> __off_t ; } unsafe extern "C" { pub fn fgetpos (__stream : * mut FILE , __pos : * mut fpos_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fsetpos (__stream : * mut FILE , __pos : * const fpos_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn clearerr (__stream : * mut FILE) ; } unsafe extern "C" { pub fn feof (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn ferror (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn clearerr_unlocked (__stream : * mut FILE) ; } unsafe extern "C" { pub fn feof_unlocked (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn ferror_unlocked (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn perror (__s : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn fileno (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn fileno_unlocked (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn pclose (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn popen (__command : * const :: std :: os :: raw :: c_char , __modes : * const :: std :: os :: raw :: c_char) -> * mut FILE ; } unsafe extern "C" { pub fn ctermid (__s : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn flockfile (__stream : * mut FILE) ; } unsafe extern "C" { pub fn ftrylockfile (__stream : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn funlockfile (__stream : * mut FILE) ; } unsafe extern "C" { pub fn __uflow (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn __overflow (arg1 : * mut FILE , arg2 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } pub type ClientData = * mut :: std :: os :: raw :: c_void ; pub type Tcl_WideInt = :: std :: os :: raw :: c_longlong ; pub type Tcl_WideUInt = :: std :: os :: raw :: c_ulonglong ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct stat { _unused : [u8 ; 0] , } pub type Tcl_StatBuf = stat ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Interp { pub result : * mut :: std :: os :: raw :: c_char , pub freeProc : :: std :: option :: Option < unsafe extern "C" fn (blockPtr : * mut :: std :: os :: raw :: c_char) > , pub errorLine : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Interp"] [:: std :: mem :: size_of :: < Tcl_Interp > () - 24usize] ; ["Alignment of Tcl_Interp"] [:: std :: mem :: align_of :: < Tcl_Interp > () - 8usize] ; ["Offset of field: Tcl_Interp::result"] [:: std :: mem :: offset_of ! (Tcl_Interp , result) - 0usize] ; ["Offset of field: Tcl_Interp::freeProc"] [:: std :: mem :: offset_of ! (Tcl_Interp , freeProc) - 8usize] ; ["Offset of field: Tcl_Interp::errorLine"] [:: std :: mem :: offset_of ! (Tcl_Interp , errorLine) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_AsyncHandler_ { _unused : [u8 ; 0] , } pub type Tcl_AsyncHandler = * mut Tcl_AsyncHandler_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Channel_ { _unused : [u8 ; 0] , } pub type Tcl_Channel = * mut Tcl_Channel_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Command_ { _unused : [u8 ; 0] , } pub type Tcl_Command = * mut Tcl_Command_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Condition_ { _unused : [u8 ; 0] , } pub type Tcl_Condition = * mut Tcl_Condition_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_EncodingState_ { _unused : [u8 ; 0] , } pub type Tcl_EncodingState = * mut Tcl_EncodingState_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Encoding_ { _unused : [u8 ; 0] , } pub type Tcl_Encoding = * mut Tcl_Encoding_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Mutex_ { _unused : [u8 ; 0] , } pub type Tcl_Mutex = * mut Tcl_Mutex_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Pid_ { _unused : [u8 ; 0] , } pub type Tcl_Pid = * mut Tcl_Pid_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_RegExp_ { _unused : [u8 ; 0] , } pub type Tcl_RegExp = * mut Tcl_RegExp_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_ThreadDataKey_ { _unused : [u8 ; 0] , } pub type Tcl_ThreadDataKey = * mut Tcl_ThreadDataKey_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_ThreadId_ { _unused : [u8 ; 0] , } pub type Tcl_ThreadId = * mut Tcl_ThreadId_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_TimerToken_ { _unused : [u8 ; 0] , } pub type Tcl_TimerToken = * mut Tcl_TimerToken_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Trace_ { _unused : [u8 ; 0] , } pub type Tcl_Trace = * mut Tcl_Trace_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Var_ { _unused : [u8 ; 0] , } pub type Tcl_Var = * mut Tcl_Var_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_ChannelTypeVersion_ { _unused : [u8 ; 0] , } pub type Tcl_ChannelTypeVersion = * mut Tcl_ChannelTypeVersion_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_LoadHandle_ { _unused : [u8 ; 0] , } pub type Tcl_LoadHandle = * mut Tcl_LoadHandle_ ; pub type Tcl_ThreadCreateProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_RegExpIndices { pub start : :: std :: os :: raw :: c_long , pub end : :: std :: os :: raw :: c_long , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_RegExpIndices"] [:: std :: mem :: size_of :: < Tcl_RegExpIndices > () - 16usize] ; ["Alignment of Tcl_RegExpIndices"] [:: std :: mem :: align_of :: < Tcl_RegExpIndices > () - 8usize] ; ["Offset of field: Tcl_RegExpIndices::start"] [:: std :: mem :: offset_of ! (Tcl_RegExpIndices , start) - 0usize] ; ["Offset of field: Tcl_RegExpIndices::end"] [:: std :: mem :: offset_of ! (Tcl_RegExpIndices , end) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_RegExpInfo { pub nsubs : :: std :: os :: raw :: c_int , pub matches : * mut Tcl_RegExpIndices , pub extendStart : :: std :: os :: raw :: c_long , pub reserved : :: std :: os :: raw :: c_long , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_RegExpInfo"] [:: std :: mem :: size_of :: < Tcl_RegExpInfo > () - 32usize] ; ["Alignment of Tcl_RegExpInfo"] [:: std :: mem :: align_of :: < Tcl_RegExpInfo > () - 8usize] ; ["Offset of field: Tcl_RegExpInfo::nsubs"] [:: std :: mem :: offset_of ! (Tcl_RegExpInfo , nsubs) - 0usize] ; ["Offset of field: Tcl_RegExpInfo::matches"] [:: std :: mem :: offset_of ! (Tcl_RegExpInfo , matches) - 8usize] ; ["Offset of field: Tcl_RegExpInfo::extendStart"] [:: std :: mem :: offset_of ! (Tcl_RegExpInfo , extendStart) - 16usize] ; ["Offset of field: Tcl_RegExpInfo::reserved"] [:: std :: mem :: offset_of ! (Tcl_RegExpInfo , reserved) - 24usize] ; } ; pub type Tcl_Stat_ = * mut Tcl_StatBuf ; pub type Tcl_OldStat_ = * mut stat ; pub const Tcl_ValueType_TCL_INT : Tcl_ValueType = 0 ; pub const Tcl_ValueType_TCL_DOUBLE : Tcl_ValueType = 1 ; pub const Tcl_ValueType_TCL_EITHER : Tcl_ValueType = 2 ; pub const Tcl_ValueType_TCL_WIDE_INT : Tcl_ValueType = 3 ; pub type Tcl_ValueType = :: std :: os :: raw :: c_uint ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Value { pub type_ : Tcl_ValueType , pub intValue : :: std :: os :: raw :: c_long , pub doubleValue : f64 , pub wideValue : Tcl_WideInt , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Value"] [:: std :: mem :: size_of :: < Tcl_Value > () - 32usize] ; ["Alignment of Tcl_Value"] [:: std :: mem :: align_of :: < Tcl_Value > () - 8usize] ; ["Offset of field: Tcl_Value::type_"] [:: std :: mem :: offset_of ! (Tcl_Value , type_) - 0usize] ; ["Offset of field: Tcl_Value::intValue"] [:: std :: mem :: offset_of ! (Tcl_Value , intValue) - 8usize] ; ["Offset of field: Tcl_Value::doubleValue"] [:: std :: mem :: offset_of ! (Tcl_Value , doubleValue) - 16usize] ; ["Offset of field: Tcl_Value::wideValue"] [:: std :: mem :: offset_of ! (Tcl_Value , wideValue) - 24usize] ; } ; pub type Tcl_AppInitProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > ; pub type Tcl_AsyncProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , code : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_ChannelProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , mask : :: std :: os :: raw :: c_int) > ; pub type Tcl_CloseProc = :: std :: option :: Option < unsafe extern "C" fn (data : ClientData) > ; pub type Tcl_CmdDeleteProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_CmdProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , argc : :: std :: os :: raw :: c_int , argv : * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > ; pub type Tcl_CmdTraceProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , level : :: std :: os :: raw :: c_int , command : * mut :: std :: os :: raw :: c_char , proc_ : Tcl_CmdProc , cmdClientData : ClientData , argc : :: std :: os :: raw :: c_int , argv : * mut * const :: std :: os :: raw :: c_char) > ; pub type Tcl_CmdObjTraceProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , level : :: std :: os :: raw :: c_int , command : * const :: std :: os :: raw :: c_char , commandInfo : Tcl_Command , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_CmdObjTraceDeleteProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_DupInternalRepProc = :: std :: option :: Option < unsafe extern "C" fn (srcPtr : * mut Tcl_Obj , dupPtr : * mut Tcl_Obj) > ; pub type Tcl_EncodingConvertProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int , statePtr : * mut Tcl_EncodingState , dst : * mut :: std :: os :: raw :: c_char , dstLen : :: std :: os :: raw :: c_int , srcReadPtr : * mut :: std :: os :: raw :: c_int , dstWrotePtr : * mut :: std :: os :: raw :: c_int , dstCharsPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_EncodingFreeProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_EventProc = :: std :: option :: Option < unsafe extern "C" fn (evPtr : * mut Tcl_Event , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_EventCheckProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , flags : :: std :: os :: raw :: c_int) > ; pub type Tcl_EventDeleteProc = :: std :: option :: Option < unsafe extern "C" fn (evPtr : * mut Tcl_Event , clientData : ClientData) -> :: std :: os :: raw :: c_int > ; pub type Tcl_EventSetupProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , flags : :: std :: os :: raw :: c_int) > ; pub type Tcl_ExitProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_FileProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , mask : :: std :: os :: raw :: c_int) > ; pub type Tcl_FileFreeProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_FreeInternalRepProc = :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj) > ; pub type Tcl_FreeProc = :: std :: option :: Option < unsafe extern "C" fn (blockPtr : * mut :: std :: os :: raw :: c_char) > ; pub type Tcl_IdleProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_InterpDeleteProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp) > ; pub type Tcl_MathProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , args : * mut Tcl_Value , resultPtr : * mut Tcl_Value) -> :: std :: os :: raw :: c_int > ; pub type Tcl_NamespaceDeleteProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_ObjCmdProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_PackageInitProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > ; pub type Tcl_PanicProc = :: std :: option :: Option < unsafe extern "C" fn (format : * const :: std :: os :: raw :: c_char , ...) > ; pub type Tcl_TcpAcceptProc = :: std :: option :: Option < unsafe extern "C" fn (callbackData : ClientData , chan : Tcl_Channel , address : * mut :: std :: os :: raw :: c_char , port : :: std :: os :: raw :: c_int) > ; pub type Tcl_TimerProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_SetFromAnyProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_UpdateStringProc = :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj) > ; pub type Tcl_VarTraceProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char > ; pub type Tcl_CommandTraceProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , oldName : * const :: std :: os :: raw :: c_char , newName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) > ; pub type Tcl_CreateFileHandlerProc = :: std :: option :: Option < unsafe extern "C" fn (fd : :: std :: os :: raw :: c_int , mask : :: std :: os :: raw :: c_int , proc_ : Tcl_FileProc , clientData : ClientData) > ; pub type Tcl_DeleteFileHandlerProc = :: std :: option :: Option < unsafe extern "C" fn (fd : :: std :: os :: raw :: c_int) > ; pub type Tcl_AlertNotifierProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_ServiceModeHookProc = :: std :: option :: Option < unsafe extern "C" fn (mode : :: std :: os :: raw :: c_int) > ; pub type Tcl_InitNotifierProc = :: std :: option :: Option < unsafe extern "C" fn () -> ClientData > ; pub type Tcl_FinalizeNotifierProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_MainLoopProc = :: std :: option :: Option < unsafe extern "C" fn () > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_ObjType { pub name : * mut :: std :: os :: raw :: c_char , pub freeIntRepProc : Tcl_FreeInternalRepProc , pub dupIntRepProc : Tcl_DupInternalRepProc , pub updateStringProc : Tcl_UpdateStringProc , pub setFromAnyProc : Tcl_SetFromAnyProc , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_ObjType"] [:: std :: mem :: size_of :: < Tcl_ObjType > () - 40usize] ; ["Alignment of Tcl_ObjType"] [:: std :: mem :: align_of :: < Tcl_ObjType > () - 8usize] ; ["Offset of field: Tcl_ObjType::name"] [:: std :: mem :: offset_of ! (Tcl_ObjType , name) - 0usize] ; ["Offset of field: Tcl_ObjType::freeIntRepProc"] [:: std :: mem :: offset_of ! (Tcl_ObjType , freeIntRepProc) - 8usize] ; ["Offset of field: Tcl_ObjType::dupIntRepProc"] [:: std :: mem :: offset_of ! (Tcl_ObjType , dupIntRepProc) - 16usize] ; ["Offset of field: Tcl_ObjType::updateStringProc"] [:: std :: mem :: offset_of ! (Tcl_ObjType , updateStringProc) - 24usize] ; ["Offset of field: Tcl_ObjType::setFromAnyProc"] [:: std :: mem :: offset_of ! (Tcl_ObjType , setFromAnyProc) - 32usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct Tcl_Obj { pub refCount : :: std :: os :: raw :: c_int , pub bytes : * mut :: std :: os :: raw :: c_char , pub length : :: std :: os :: raw :: c_int , pub typePtr : * mut Tcl_ObjType , pub internalRep : Tcl_Obj__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union Tcl_Obj__bindgen_ty_1 { pub longValue : :: std :: os :: raw :: c_long , pub doubleValue : f64 , pub otherValuePtr : * mut :: std :: os :: raw :: c_void , pub wideValue : Tcl_WideInt , pub twoPtrValue : Tcl_Obj__bindgen_ty_1__bindgen_ty_1 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Obj__bindgen_ty_1__bindgen_ty_1 { pub ptr1 : * mut :: std :: os :: raw :: c_void , pub ptr2 : * mut :: std :: os :: raw :: c_void , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Obj__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: size_of :: < Tcl_Obj__bindgen_ty_1__bindgen_ty_1 > () - 16usize] ; ["Alignment of Tcl_Obj__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: align_of :: < Tcl_Obj__bindgen_ty_1__bindgen_ty_1 > () - 8usize] ; ["Offset of field: Tcl_Obj__bindgen_ty_1__bindgen_ty_1::ptr1"] [:: std :: mem :: offset_of ! (Tcl_Obj__bindgen_ty_1__bindgen_ty_1 , ptr1) - 0usize] ; ["Offset of field: Tcl_Obj__bindgen_ty_1__bindgen_ty_1::ptr2"] [:: std :: mem :: offset_of ! (Tcl_Obj__bindgen_ty_1__bindgen_ty_1 , ptr2) - 8usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Obj__bindgen_ty_1"] [:: std :: mem :: size_of :: < Tcl_Obj__bindgen_ty_1 > () - 16usize] ; ["Alignment of Tcl_Obj__bindgen_ty_1"] [:: std :: mem :: align_of :: < Tcl_Obj__bindgen_ty_1 > () - 8usize] ; ["Offset of field: Tcl_Obj__bindgen_ty_1::longValue"] [:: std :: mem :: offset_of ! (Tcl_Obj__bindgen_ty_1 , longValue) - 0usize] ; ["Offset of field: Tcl_Obj__bindgen_ty_1::doubleValue"] [:: std :: mem :: offset_of ! (Tcl_Obj__bindgen_ty_1 , doubleValue) - 0usize] ; ["Offset of field: Tcl_Obj__bindgen_ty_1::otherValuePtr"] [:: std :: mem :: offset_of ! (Tcl_Obj__bindgen_ty_1 , otherValuePtr) - 0usize] ; ["Offset of field: Tcl_Obj__bindgen_ty_1::wideValue"] [:: std :: mem :: offset_of ! (Tcl_Obj__bindgen_ty_1 , wideValue) - 0usize] ; ["Offset of field: Tcl_Obj__bindgen_ty_1::twoPtrValue"] [:: std :: mem :: offset_of ! (Tcl_Obj__bindgen_ty_1 , twoPtrValue) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Obj"] [:: std :: mem :: size_of :: < Tcl_Obj > () - 48usize] ; ["Alignment of Tcl_Obj"] [:: std :: mem :: align_of :: < Tcl_Obj > () - 8usize] ; ["Offset of field: Tcl_Obj::refCount"] [:: std :: mem :: offset_of ! (Tcl_Obj , refCount) - 0usize] ; ["Offset of field: Tcl_Obj::bytes"] [:: std :: mem :: offset_of ! (Tcl_Obj , bytes) - 8usize] ; ["Offset of field: Tcl_Obj::length"] [:: std :: mem :: offset_of ! (Tcl_Obj , length) - 16usize] ; ["Offset of field: Tcl_Obj::typePtr"] [:: std :: mem :: offset_of ! (Tcl_Obj , typePtr) - 24usize] ; ["Offset of field: Tcl_Obj::internalRep"] [:: std :: mem :: offset_of ! (Tcl_Obj , internalRep) - 32usize] ; } ; unsafe extern "C" { pub fn Tcl_IncrRefCount (objPtr : * mut Tcl_Obj) ; } unsafe extern "C" { pub fn Tcl_DecrRefCount (objPtr : * mut Tcl_Obj) ; } unsafe extern "C" { pub fn Tcl_IsShared (objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_SavedResult { pub result : * mut :: std :: os :: raw :: c_char , pub freeProc : Tcl_FreeProc , pub objResultPtr : * mut Tcl_Obj , pub appendResult : * mut :: std :: os :: raw :: c_char , pub appendAvl : :: std :: os :: raw :: c_int , pub appendUsed : :: std :: os :: raw :: c_int , pub resultSpace : [:: std :: os :: raw :: c_char ; 201usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_SavedResult"] [:: std :: mem :: size_of :: < Tcl_SavedResult > () - 248usize] ; ["Alignment of Tcl_SavedResult"] [:: std :: mem :: align_of :: < Tcl_SavedResult > () - 8usize] ; ["Offset of field: Tcl_SavedResult::result"] [:: std :: mem :: offset_of ! (Tcl_SavedResult , result) - 0usize] ; ["Offset of field: Tcl_SavedResult::freeProc"] [:: std :: mem :: offset_of ! (Tcl_SavedResult , freeProc) - 8usize] ; ["Offset of field: Tcl_SavedResult::objResultPtr"] [:: std :: mem :: offset_of ! (Tcl_SavedResult , objResultPtr) - 16usize] ; ["Offset of field: Tcl_SavedResult::appendResult"] [:: std :: mem :: offset_of ! (Tcl_SavedResult , appendResult) - 24usize] ; ["Offset of field: Tcl_SavedResult::appendAvl"] [:: std :: mem :: offset_of ! (Tcl_SavedResult , appendAvl) - 32usize] ; ["Offset of field: Tcl_SavedResult::appendUsed"] [:: std :: mem :: offset_of ! (Tcl_SavedResult , appendUsed) - 36usize] ; ["Offset of field: Tcl_SavedResult::resultSpace"] [:: std :: mem :: offset_of ! (Tcl_SavedResult , resultSpace) - 40usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Namespace { pub name : * mut :: std :: os :: raw :: c_char , pub fullName : * mut :: std :: os :: raw :: c_char , pub clientData : ClientData , pub deleteProc : Tcl_NamespaceDeleteProc , pub parentPtr : * mut Tcl_Namespace , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Namespace"] [:: std :: mem :: size_of :: < Tcl_Namespace > () - 40usize] ; ["Alignment of Tcl_Namespace"] [:: std :: mem :: align_of :: < Tcl_Namespace > () - 8usize] ; ["Offset of field: Tcl_Namespace::name"] [:: std :: mem :: offset_of ! (Tcl_Namespace , name) - 0usize] ; ["Offset of field: Tcl_Namespace::fullName"] [:: std :: mem :: offset_of ! (Tcl_Namespace , fullName) - 8usize] ; ["Offset of field: Tcl_Namespace::clientData"] [:: std :: mem :: offset_of ! (Tcl_Namespace , clientData) - 16usize] ; ["Offset of field: Tcl_Namespace::deleteProc"] [:: std :: mem :: offset_of ! (Tcl_Namespace , deleteProc) - 24usize] ; ["Offset of field: Tcl_Namespace::parentPtr"] [:: std :: mem :: offset_of ! (Tcl_Namespace , parentPtr) - 32usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_CallFrame { pub nsPtr : * mut Tcl_Namespace , pub dummy1 : :: std :: os :: raw :: c_int , pub dummy2 : :: std :: os :: raw :: c_int , pub dummy3 : * mut :: std :: os :: raw :: c_void , pub dummy4 : * mut :: std :: os :: raw :: c_void , pub dummy5 : * mut :: std :: os :: raw :: c_void , pub dummy6 : :: std :: os :: raw :: c_int , pub dummy7 : * mut :: std :: os :: raw :: c_void , pub dummy8 : * mut :: std :: os :: raw :: c_void , pub dummy9 : :: std :: os :: raw :: c_int , pub dummy10 : * mut :: std :: os :: raw :: c_void , pub dummy11 : * mut :: std :: os :: raw :: c_void , pub dummy12 : * mut :: std :: os :: raw :: c_void , pub dummy13 : * mut :: std :: os :: raw :: c_void , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_CallFrame"] [:: std :: mem :: size_of :: < Tcl_CallFrame > () - 104usize] ; ["Alignment of Tcl_CallFrame"] [:: std :: mem :: align_of :: < Tcl_CallFrame > () - 8usize] ; ["Offset of field: Tcl_CallFrame::nsPtr"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , nsPtr) - 0usize] ; ["Offset of field: Tcl_CallFrame::dummy1"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy1) - 8usize] ; ["Offset of field: Tcl_CallFrame::dummy2"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy2) - 12usize] ; ["Offset of field: Tcl_CallFrame::dummy3"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy3) - 16usize] ; ["Offset of field: Tcl_CallFrame::dummy4"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy4) - 24usize] ; ["Offset of field: Tcl_CallFrame::dummy5"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy5) - 32usize] ; ["Offset of field: Tcl_CallFrame::dummy6"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy6) - 40usize] ; ["Offset of field: Tcl_CallFrame::dummy7"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy7) - 48usize] ; ["Offset of field: Tcl_CallFrame::dummy8"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy8) - 56usize] ; ["Offset of field: Tcl_CallFrame::dummy9"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy9) - 64usize] ; ["Offset of field: Tcl_CallFrame::dummy10"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy10) - 72usize] ; ["Offset of field: Tcl_CallFrame::dummy11"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy11) - 80usize] ; ["Offset of field: Tcl_CallFrame::dummy12"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy12) - 88usize] ; ["Offset of field: Tcl_CallFrame::dummy13"] [:: std :: mem :: offset_of ! (Tcl_CallFrame , dummy13) - 96usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_CmdInfo { pub isNativeObjectProc : :: std :: os :: raw :: c_int , pub objProc : Tcl_ObjCmdProc , pub objClientData : ClientData , pub proc_ : Tcl_CmdProc , pub clientData : ClientData , pub deleteProc : Tcl_CmdDeleteProc , pub deleteData : ClientData , pub namespacePtr : * mut Tcl_Namespace , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_CmdInfo"] [:: std :: mem :: size_of :: < Tcl_CmdInfo > () - 64usize] ; ["Alignment of Tcl_CmdInfo"] [:: std :: mem :: align_of :: < Tcl_CmdInfo > () - 8usize] ; ["Offset of field: Tcl_CmdInfo::isNativeObjectProc"] [:: std :: mem :: offset_of ! (Tcl_CmdInfo , isNativeObjectProc) - 0usize] ; ["Offset of field: Tcl_CmdInfo::objProc"] [:: std :: mem :: offset_of ! (Tcl_CmdInfo , objProc) - 8usize] ; ["Offset of field: Tcl_CmdInfo::objClientData"] [:: std :: mem :: offset_of ! (Tcl_CmdInfo , objClientData) - 16usize] ; ["Offset of field: Tcl_CmdInfo::proc_"] [:: std :: mem :: offset_of ! (Tcl_CmdInfo , proc_) - 24usize] ; ["Offset of field: Tcl_CmdInfo::clientData"] [:: std :: mem :: offset_of ! (Tcl_CmdInfo , clientData) - 32usize] ; ["Offset of field: Tcl_CmdInfo::deleteProc"] [:: std :: mem :: offset_of ! (Tcl_CmdInfo , deleteProc) - 40usize] ; ["Offset of field: Tcl_CmdInfo::deleteData"] [:: std :: mem :: offset_of ! (Tcl_CmdInfo , deleteData) - 48usize] ; ["Offset of field: Tcl_CmdInfo::namespacePtr"] [:: std :: mem :: offset_of ! (Tcl_CmdInfo , namespacePtr) - 56usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_DString { pub string : * mut :: std :: os :: raw :: c_char , pub length : :: std :: os :: raw :: c_int , pub spaceAvl : :: std :: os :: raw :: c_int , pub staticSpace : [:: std :: os :: raw :: c_char ; 200usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_DString"] [:: std :: mem :: size_of :: < Tcl_DString > () - 216usize] ; ["Alignment of Tcl_DString"] [:: std :: mem :: align_of :: < Tcl_DString > () - 8usize] ; ["Offset of field: Tcl_DString::string"] [:: std :: mem :: offset_of ! (Tcl_DString , string) - 0usize] ; ["Offset of field: Tcl_DString::length"] [:: std :: mem :: offset_of ! (Tcl_DString , length) - 8usize] ; ["Offset of field: Tcl_DString::spaceAvl"] [:: std :: mem :: offset_of ! (Tcl_DString , spaceAvl) - 12usize] ; ["Offset of field: Tcl_DString::staticSpace"] [:: std :: mem :: offset_of ! (Tcl_DString , staticSpace) - 16usize] ; } ; pub type Tcl_HashKeyProc = :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , keyPtr : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_uint > ; pub type Tcl_CompareHashKeysProc = :: std :: option :: Option < unsafe extern "C" fn (keyPtr : * mut :: std :: os :: raw :: c_void , hPtr : * mut Tcl_HashEntry) -> :: std :: os :: raw :: c_int > ; pub type Tcl_AllocHashEntryProc = :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , keyPtr : * mut :: std :: os :: raw :: c_void) -> * mut Tcl_HashEntry > ; pub type Tcl_FreeHashEntryProc = :: std :: option :: Option < unsafe extern "C" fn (hPtr : * mut Tcl_HashEntry) > ; # [repr (C)] # [derive (Copy , Clone)] pub struct Tcl_HashEntry { pub nextPtr : * mut Tcl_HashEntry , pub tablePtr : * mut Tcl_HashTable , pub hash : * mut :: std :: os :: raw :: c_void , pub clientData : ClientData , pub key : Tcl_HashEntry__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union Tcl_HashEntry__bindgen_ty_1 { pub oneWordValue : * mut :: std :: os :: raw :: c_char , pub objPtr : * mut Tcl_Obj , pub words : [:: std :: os :: raw :: c_int ; 1usize] , pub string : [:: std :: os :: raw :: c_char ; 4usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_HashEntry__bindgen_ty_1"] [:: std :: mem :: size_of :: < Tcl_HashEntry__bindgen_ty_1 > () - 8usize] ; ["Alignment of Tcl_HashEntry__bindgen_ty_1"] [:: std :: mem :: align_of :: < Tcl_HashEntry__bindgen_ty_1 > () - 8usize] ; ["Offset of field: Tcl_HashEntry__bindgen_ty_1::oneWordValue"] [:: std :: mem :: offset_of ! (Tcl_HashEntry__bindgen_ty_1 , oneWordValue) - 0usize] ; ["Offset of field: Tcl_HashEntry__bindgen_ty_1::objPtr"] [:: std :: mem :: offset_of ! (Tcl_HashEntry__bindgen_ty_1 , objPtr) - 0usize] ; ["Offset of field: Tcl_HashEntry__bindgen_ty_1::words"] [:: std :: mem :: offset_of ! (Tcl_HashEntry__bindgen_ty_1 , words) - 0usize] ; ["Offset of field: Tcl_HashEntry__bindgen_ty_1::string"] [:: std :: mem :: offset_of ! (Tcl_HashEntry__bindgen_ty_1 , string) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_HashEntry"] [:: std :: mem :: size_of :: < Tcl_HashEntry > () - 40usize] ; ["Alignment of Tcl_HashEntry"] [:: std :: mem :: align_of :: < Tcl_HashEntry > () - 8usize] ; ["Offset of field: Tcl_HashEntry::nextPtr"] [:: std :: mem :: offset_of ! (Tcl_HashEntry , nextPtr) - 0usize] ; ["Offset of field: Tcl_HashEntry::tablePtr"] [:: std :: mem :: offset_of ! (Tcl_HashEntry , tablePtr) - 8usize] ; ["Offset of field: Tcl_HashEntry::hash"] [:: std :: mem :: offset_of ! (Tcl_HashEntry , hash) - 16usize] ; ["Offset of field: Tcl_HashEntry::clientData"] [:: std :: mem :: offset_of ! (Tcl_HashEntry , clientData) - 24usize] ; ["Offset of field: Tcl_HashEntry::key"] [:: std :: mem :: offset_of ! (Tcl_HashEntry , key) - 32usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_HashKeyType { pub version : :: std :: os :: raw :: c_int , pub flags : :: std :: os :: raw :: c_int , pub hashKeyProc : Tcl_HashKeyProc , pub compareKeysProc : Tcl_CompareHashKeysProc , pub allocEntryProc : Tcl_AllocHashEntryProc , pub freeEntryProc : Tcl_FreeHashEntryProc , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_HashKeyType"] [:: std :: mem :: size_of :: < Tcl_HashKeyType > () - 40usize] ; ["Alignment of Tcl_HashKeyType"] [:: std :: mem :: align_of :: < Tcl_HashKeyType > () - 8usize] ; ["Offset of field: Tcl_HashKeyType::version"] [:: std :: mem :: offset_of ! (Tcl_HashKeyType , version) - 0usize] ; ["Offset of field: Tcl_HashKeyType::flags"] [:: std :: mem :: offset_of ! (Tcl_HashKeyType , flags) - 4usize] ; ["Offset of field: Tcl_HashKeyType::hashKeyProc"] [:: std :: mem :: offset_of ! (Tcl_HashKeyType , hashKeyProc) - 8usize] ; ["Offset of field: Tcl_HashKeyType::compareKeysProc"] [:: std :: mem :: offset_of ! (Tcl_HashKeyType , compareKeysProc) - 16usize] ; ["Offset of field: Tcl_HashKeyType::allocEntryProc"] [:: std :: mem :: offset_of ! (Tcl_HashKeyType , allocEntryProc) - 24usize] ; ["Offset of field: Tcl_HashKeyType::freeEntryProc"] [:: std :: mem :: offset_of ! (Tcl_HashKeyType , freeEntryProc) - 32usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_HashTable { pub buckets : * mut * mut Tcl_HashEntry , pub staticBuckets : [* mut Tcl_HashEntry ; 4usize] , pub numBuckets : :: std :: os :: raw :: c_int , pub numEntries : :: std :: os :: raw :: c_int , pub rebuildSize : :: std :: os :: raw :: c_int , pub downShift : :: std :: os :: raw :: c_int , pub mask : :: std :: os :: raw :: c_int , pub keyType : :: std :: os :: raw :: c_int , pub findProc : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , key : * const :: std :: os :: raw :: c_char) -> * mut Tcl_HashEntry > , pub createProc : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , key : * const :: std :: os :: raw :: c_char , newPtr : * mut :: std :: os :: raw :: c_int) -> * mut Tcl_HashEntry > , pub typePtr : * mut Tcl_HashKeyType , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_HashTable"] [:: std :: mem :: size_of :: < Tcl_HashTable > () - 88usize] ; ["Alignment of Tcl_HashTable"] [:: std :: mem :: align_of :: < Tcl_HashTable > () - 8usize] ; ["Offset of field: Tcl_HashTable::buckets"] [:: std :: mem :: offset_of ! (Tcl_HashTable , buckets) - 0usize] ; ["Offset of field: Tcl_HashTable::staticBuckets"] [:: std :: mem :: offset_of ! (Tcl_HashTable , staticBuckets) - 8usize] ; ["Offset of field: Tcl_HashTable::numBuckets"] [:: std :: mem :: offset_of ! (Tcl_HashTable , numBuckets) - 40usize] ; ["Offset of field: Tcl_HashTable::numEntries"] [:: std :: mem :: offset_of ! (Tcl_HashTable , numEntries) - 44usize] ; ["Offset of field: Tcl_HashTable::rebuildSize"] [:: std :: mem :: offset_of ! (Tcl_HashTable , rebuildSize) - 48usize] ; ["Offset of field: Tcl_HashTable::downShift"] [:: std :: mem :: offset_of ! (Tcl_HashTable , downShift) - 52usize] ; ["Offset of field: Tcl_HashTable::mask"] [:: std :: mem :: offset_of ! (Tcl_HashTable , mask) - 56usize] ; ["Offset of field: Tcl_HashTable::keyType"] [:: std :: mem :: offset_of ! (Tcl_HashTable , keyType) - 60usize] ; ["Offset of field: Tcl_HashTable::findProc"] [:: std :: mem :: offset_of ! (Tcl_HashTable , findProc) - 64usize] ; ["Offset of field: Tcl_HashTable::createProc"] [:: std :: mem :: offset_of ! (Tcl_HashTable , createProc) - 72usize] ; ["Offset of field: Tcl_HashTable::typePtr"] [:: std :: mem :: offset_of ! (Tcl_HashTable , typePtr) - 80usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_HashSearch { pub tablePtr : * mut Tcl_HashTable , pub nextIndex : :: std :: os :: raw :: c_int , pub nextEntryPtr : * mut Tcl_HashEntry , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_HashSearch"] [:: std :: mem :: size_of :: < Tcl_HashSearch > () - 24usize] ; ["Alignment of Tcl_HashSearch"] [:: std :: mem :: align_of :: < Tcl_HashSearch > () - 8usize] ; ["Offset of field: Tcl_HashSearch::tablePtr"] [:: std :: mem :: offset_of ! (Tcl_HashSearch , tablePtr) - 0usize] ; ["Offset of field: Tcl_HashSearch::nextIndex"] [:: std :: mem :: offset_of ! (Tcl_HashSearch , nextIndex) - 8usize] ; ["Offset of field: Tcl_HashSearch::nextEntryPtr"] [:: std :: mem :: offset_of ! (Tcl_HashSearch , nextEntryPtr) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Event { pub proc_ : Tcl_EventProc , pub nextPtr : * mut Tcl_Event , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Event"] [:: std :: mem :: size_of :: < Tcl_Event > () - 16usize] ; ["Alignment of Tcl_Event"] [:: std :: mem :: align_of :: < Tcl_Event > () - 8usize] ; ["Offset of field: Tcl_Event::proc_"] [:: std :: mem :: offset_of ! (Tcl_Event , proc_) - 0usize] ; ["Offset of field: Tcl_Event::nextPtr"] [:: std :: mem :: offset_of ! (Tcl_Event , nextPtr) - 8usize] ; } ; pub const Tcl_QueuePosition_TCL_QUEUE_TAIL : Tcl_QueuePosition = 0 ; pub const Tcl_QueuePosition_TCL_QUEUE_HEAD : Tcl_QueuePosition = 1 ; pub const Tcl_QueuePosition_TCL_QUEUE_MARK : Tcl_QueuePosition = 2 ; pub type Tcl_QueuePosition = :: std :: os :: raw :: c_uint ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Time { pub sec : :: std :: os :: raw :: c_long , pub usec : :: std :: os :: raw :: c_long , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Time"] [:: std :: mem :: size_of :: < Tcl_Time > () - 16usize] ; ["Alignment of Tcl_Time"] [:: std :: mem :: align_of :: < Tcl_Time > () - 8usize] ; ["Offset of field: Tcl_Time::sec"] [:: std :: mem :: offset_of ! (Tcl_Time , sec) - 0usize] ; ["Offset of field: Tcl_Time::usec"] [:: std :: mem :: offset_of ! (Tcl_Time , usec) - 8usize] ; } ; pub type Tcl_SetTimerProc = :: std :: option :: Option < unsafe extern "C" fn (timePtr : * mut Tcl_Time) > ; pub type Tcl_WaitForEventProc = :: std :: option :: Option < unsafe extern "C" fn (timePtr : * mut Tcl_Time) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverBlockModeProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverCloseProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverClose2Proc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , interp : * mut Tcl_Interp , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverInputProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , buf : * mut :: std :: os :: raw :: c_char , toRead : :: std :: os :: raw :: c_int , errorCodePtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverOutputProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , buf : * const :: std :: os :: raw :: c_char , toWrite : :: std :: os :: raw :: c_int , errorCodePtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverSeekProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , offset : :: std :: os :: raw :: c_long , mode : :: std :: os :: raw :: c_int , errorCodePtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverSetOptionProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , interp : * mut Tcl_Interp , optionName : * const :: std :: os :: raw :: c_char , value : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverGetOptionProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , interp : * mut Tcl_Interp , optionName : * const :: std :: os :: raw :: c_char , dsPtr : * mut Tcl_DString) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverWatchProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , mask : :: std :: os :: raw :: c_int) > ; pub type Tcl_DriverGetHandleProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , direction : :: std :: os :: raw :: c_int , handlePtr : * mut ClientData) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverFlushProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverHandlerProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , interestMask : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_DriverWideSeekProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , offset : Tcl_WideInt , mode : :: std :: os :: raw :: c_int , errorCodePtr : * mut :: std :: os :: raw :: c_int) -> Tcl_WideInt > ; pub type Tcl_DriverThreadActionProc = :: std :: option :: Option < unsafe extern "C" fn (instanceData : ClientData , action : :: std :: os :: raw :: c_int) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_ChannelType { pub typeName : * mut :: std :: os :: raw :: c_char , pub version : Tcl_ChannelTypeVersion , pub closeProc : Tcl_DriverCloseProc , pub inputProc : Tcl_DriverInputProc , pub outputProc : Tcl_DriverOutputProc , pub seekProc : Tcl_DriverSeekProc , pub setOptionProc : Tcl_DriverSetOptionProc , pub getOptionProc : Tcl_DriverGetOptionProc , pub watchProc : Tcl_DriverWatchProc , pub getHandleProc : Tcl_DriverGetHandleProc , pub close2Proc : Tcl_DriverClose2Proc , pub blockModeProc : Tcl_DriverBlockModeProc , pub flushProc : Tcl_DriverFlushProc , pub handlerProc : Tcl_DriverHandlerProc , pub wideSeekProc : Tcl_DriverWideSeekProc , pub threadActionProc : Tcl_DriverThreadActionProc , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_ChannelType"] [:: std :: mem :: size_of :: < Tcl_ChannelType > () - 128usize] ; ["Alignment of Tcl_ChannelType"] [:: std :: mem :: align_of :: < Tcl_ChannelType > () - 8usize] ; ["Offset of field: Tcl_ChannelType::typeName"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , typeName) - 0usize] ; ["Offset of field: Tcl_ChannelType::version"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , version) - 8usize] ; ["Offset of field: Tcl_ChannelType::closeProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , closeProc) - 16usize] ; ["Offset of field: Tcl_ChannelType::inputProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , inputProc) - 24usize] ; ["Offset of field: Tcl_ChannelType::outputProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , outputProc) - 32usize] ; ["Offset of field: Tcl_ChannelType::seekProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , seekProc) - 40usize] ; ["Offset of field: Tcl_ChannelType::setOptionProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , setOptionProc) - 48usize] ; ["Offset of field: Tcl_ChannelType::getOptionProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , getOptionProc) - 56usize] ; ["Offset of field: Tcl_ChannelType::watchProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , watchProc) - 64usize] ; ["Offset of field: Tcl_ChannelType::getHandleProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , getHandleProc) - 72usize] ; ["Offset of field: Tcl_ChannelType::close2Proc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , close2Proc) - 80usize] ; ["Offset of field: Tcl_ChannelType::blockModeProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , blockModeProc) - 88usize] ; ["Offset of field: Tcl_ChannelType::flushProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , flushProc) - 96usize] ; ["Offset of field: Tcl_ChannelType::handlerProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , handlerProc) - 104usize] ; ["Offset of field: Tcl_ChannelType::wideSeekProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , wideSeekProc) - 112usize] ; ["Offset of field: Tcl_ChannelType::threadActionProc"] [:: std :: mem :: offset_of ! (Tcl_ChannelType , threadActionProc) - 120usize] ; } ; pub const Tcl_PathType_TCL_PATH_ABSOLUTE : Tcl_PathType = 0 ; pub const Tcl_PathType_TCL_PATH_RELATIVE : Tcl_PathType = 1 ; pub const Tcl_PathType_TCL_PATH_VOLUME_RELATIVE : Tcl_PathType = 2 ; pub type Tcl_PathType = :: std :: os :: raw :: c_uint ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_GlobTypeData { pub type_ : :: std :: os :: raw :: c_int , pub perm : :: std :: os :: raw :: c_int , pub macType : * mut Tcl_Obj , pub macCreator : * mut Tcl_Obj , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_GlobTypeData"] [:: std :: mem :: size_of :: < Tcl_GlobTypeData > () - 24usize] ; ["Alignment of Tcl_GlobTypeData"] [:: std :: mem :: align_of :: < Tcl_GlobTypeData > () - 8usize] ; ["Offset of field: Tcl_GlobTypeData::type_"] [:: std :: mem :: offset_of ! (Tcl_GlobTypeData , type_) - 0usize] ; ["Offset of field: Tcl_GlobTypeData::perm"] [:: std :: mem :: offset_of ! (Tcl_GlobTypeData , perm) - 4usize] ; ["Offset of field: Tcl_GlobTypeData::macType"] [:: std :: mem :: offset_of ! (Tcl_GlobTypeData , macType) - 8usize] ; ["Offset of field: Tcl_GlobTypeData::macCreator"] [:: std :: mem :: offset_of ! (Tcl_GlobTypeData , macCreator) - 16usize] ; } ; pub type Tcl_FSStatProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , buf : * mut Tcl_StatBuf) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSAccessProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSOpenFileChannelProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj , mode : :: std :: os :: raw :: c_int , permissions : :: std :: os :: raw :: c_int) -> Tcl_Channel > ; pub type Tcl_FSMatchInDirectoryProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , result : * mut Tcl_Obj , pathPtr : * mut Tcl_Obj , pattern : * const :: std :: os :: raw :: c_char , types : * mut Tcl_GlobTypeData) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSGetCwdProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> * mut Tcl_Obj > ; pub type Tcl_FSChdirProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSLstatProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , buf : * mut Tcl_StatBuf) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSCreateDirectoryProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSDeleteFileProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSCopyDirectoryProc = :: std :: option :: Option < unsafe extern "C" fn (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj , errorPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSCopyFileProc = :: std :: option :: Option < unsafe extern "C" fn (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSRemoveDirectoryProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , recursive : :: std :: os :: raw :: c_int , errorPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSRenameFileProc = :: std :: option :: Option < unsafe extern "C" fn (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSUnloadFileProc = :: std :: option :: Option < unsafe extern "C" fn (loadHandle : Tcl_LoadHandle) > ; pub type Tcl_FSListVolumesProc = :: std :: option :: Option < unsafe extern "C" fn () -> * mut Tcl_Obj > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct utimbuf { _unused : [u8 ; 0] , } pub type Tcl_FSUtimeProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , tval : * mut utimbuf) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSNormalizePathProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj , nextCheckpoint : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSFileAttrsGetProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , index : :: std :: os :: raw :: c_int , pathPtr : * mut Tcl_Obj , objPtrRef : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSFileAttrStringsProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , objPtrRef : * mut * mut Tcl_Obj) -> * mut * const :: std :: os :: raw :: c_char > ; pub type Tcl_FSFileAttrsSetProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , index : :: std :: os :: raw :: c_int , pathPtr : * mut Tcl_Obj , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSLinkProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , toPtr : * mut Tcl_Obj , linkType : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > ; pub type Tcl_FSLoadFileProc = :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj , handlePtr : * mut Tcl_LoadHandle , unloadProcPtr : * mut Tcl_FSUnloadFileProc) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSPathInFilesystemProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , clientDataPtr : * mut ClientData) -> :: std :: os :: raw :: c_int > ; pub type Tcl_FSFilesystemPathTypeProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj > ; pub type Tcl_FSFilesystemSeparatorProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj > ; pub type Tcl_FSFreeInternalRepProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > ; pub type Tcl_FSDupInternalRepProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) -> ClientData > ; pub type Tcl_FSInternalToNormalizedProc = :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) -> * mut Tcl_Obj > ; pub type Tcl_FSCreateInternalRepProc = :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> ClientData > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_FSVersion_ { _unused : [u8 ; 0] , } pub type Tcl_FSVersion = * mut Tcl_FSVersion_ ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Filesystem { pub typeName : * const :: std :: os :: raw :: c_char , pub structureLength : :: std :: os :: raw :: c_int , pub version : Tcl_FSVersion , pub pathInFilesystemProc : Tcl_FSPathInFilesystemProc , pub dupInternalRepProc : Tcl_FSDupInternalRepProc , pub freeInternalRepProc : Tcl_FSFreeInternalRepProc , pub internalToNormalizedProc : Tcl_FSInternalToNormalizedProc , pub createInternalRepProc : Tcl_FSCreateInternalRepProc , pub normalizePathProc : Tcl_FSNormalizePathProc , pub filesystemPathTypeProc : Tcl_FSFilesystemPathTypeProc , pub filesystemSeparatorProc : Tcl_FSFilesystemSeparatorProc , pub statProc : Tcl_FSStatProc , pub accessProc : Tcl_FSAccessProc , pub openFileChannelProc : Tcl_FSOpenFileChannelProc , pub matchInDirectoryProc : Tcl_FSMatchInDirectoryProc , pub utimeProc : Tcl_FSUtimeProc , pub linkProc : Tcl_FSLinkProc , pub listVolumesProc : Tcl_FSListVolumesProc , pub fileAttrStringsProc : Tcl_FSFileAttrStringsProc , pub fileAttrsGetProc : Tcl_FSFileAttrsGetProc , pub fileAttrsSetProc : Tcl_FSFileAttrsSetProc , pub createDirectoryProc : Tcl_FSCreateDirectoryProc , pub removeDirectoryProc : Tcl_FSRemoveDirectoryProc , pub deleteFileProc : Tcl_FSDeleteFileProc , pub copyFileProc : Tcl_FSCopyFileProc , pub renameFileProc : Tcl_FSRenameFileProc , pub copyDirectoryProc : Tcl_FSCopyDirectoryProc , pub lstatProc : Tcl_FSLstatProc , pub loadFileProc : Tcl_FSLoadFileProc , pub getCwdProc : Tcl_FSGetCwdProc , pub chdirProc : Tcl_FSChdirProc , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Filesystem"] [:: std :: mem :: size_of :: < Tcl_Filesystem > () - 248usize] ; ["Alignment of Tcl_Filesystem"] [:: std :: mem :: align_of :: < Tcl_Filesystem > () - 8usize] ; ["Offset of field: Tcl_Filesystem::typeName"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , typeName) - 0usize] ; ["Offset of field: Tcl_Filesystem::structureLength"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , structureLength) - 8usize] ; ["Offset of field: Tcl_Filesystem::version"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , version) - 16usize] ; ["Offset of field: Tcl_Filesystem::pathInFilesystemProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , pathInFilesystemProc) - 24usize] ; ["Offset of field: Tcl_Filesystem::dupInternalRepProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , dupInternalRepProc) - 32usize] ; ["Offset of field: Tcl_Filesystem::freeInternalRepProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , freeInternalRepProc) - 40usize] ; ["Offset of field: Tcl_Filesystem::internalToNormalizedProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , internalToNormalizedProc) - 48usize] ; ["Offset of field: Tcl_Filesystem::createInternalRepProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , createInternalRepProc) - 56usize] ; ["Offset of field: Tcl_Filesystem::normalizePathProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , normalizePathProc) - 64usize] ; ["Offset of field: Tcl_Filesystem::filesystemPathTypeProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , filesystemPathTypeProc) - 72usize] ; ["Offset of field: Tcl_Filesystem::filesystemSeparatorProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , filesystemSeparatorProc) - 80usize] ; ["Offset of field: Tcl_Filesystem::statProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , statProc) - 88usize] ; ["Offset of field: Tcl_Filesystem::accessProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , accessProc) - 96usize] ; ["Offset of field: Tcl_Filesystem::openFileChannelProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , openFileChannelProc) - 104usize] ; ["Offset of field: Tcl_Filesystem::matchInDirectoryProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , matchInDirectoryProc) - 112usize] ; ["Offset of field: Tcl_Filesystem::utimeProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , utimeProc) - 120usize] ; ["Offset of field: Tcl_Filesystem::linkProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , linkProc) - 128usize] ; ["Offset of field: Tcl_Filesystem::listVolumesProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , listVolumesProc) - 136usize] ; ["Offset of field: Tcl_Filesystem::fileAttrStringsProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , fileAttrStringsProc) - 144usize] ; ["Offset of field: Tcl_Filesystem::fileAttrsGetProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , fileAttrsGetProc) - 152usize] ; ["Offset of field: Tcl_Filesystem::fileAttrsSetProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , fileAttrsSetProc) - 160usize] ; ["Offset of field: Tcl_Filesystem::createDirectoryProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , createDirectoryProc) - 168usize] ; ["Offset of field: Tcl_Filesystem::removeDirectoryProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , removeDirectoryProc) - 176usize] ; ["Offset of field: Tcl_Filesystem::deleteFileProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , deleteFileProc) - 184usize] ; ["Offset of field: Tcl_Filesystem::copyFileProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , copyFileProc) - 192usize] ; ["Offset of field: Tcl_Filesystem::renameFileProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , renameFileProc) - 200usize] ; ["Offset of field: Tcl_Filesystem::copyDirectoryProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , copyDirectoryProc) - 208usize] ; ["Offset of field: Tcl_Filesystem::lstatProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , lstatProc) - 216usize] ; ["Offset of field: Tcl_Filesystem::loadFileProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , loadFileProc) - 224usize] ; ["Offset of field: Tcl_Filesystem::getCwdProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , getCwdProc) - 232usize] ; ["Offset of field: Tcl_Filesystem::chdirProc"] [:: std :: mem :: offset_of ! (Tcl_Filesystem , chdirProc) - 240usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_NotifierProcs { pub setTimerProc : Tcl_SetTimerProc , pub waitForEventProc : Tcl_WaitForEventProc , pub createFileHandlerProc : Tcl_CreateFileHandlerProc , pub deleteFileHandlerProc : Tcl_DeleteFileHandlerProc , pub initNotifierProc : Tcl_InitNotifierProc , pub finalizeNotifierProc : Tcl_FinalizeNotifierProc , pub alertNotifierProc : Tcl_AlertNotifierProc , pub serviceModeHookProc : Tcl_ServiceModeHookProc , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_NotifierProcs"] [:: std :: mem :: size_of :: < Tcl_NotifierProcs > () - 64usize] ; ["Alignment of Tcl_NotifierProcs"] [:: std :: mem :: align_of :: < Tcl_NotifierProcs > () - 8usize] ; ["Offset of field: Tcl_NotifierProcs::setTimerProc"] [:: std :: mem :: offset_of ! (Tcl_NotifierProcs , setTimerProc) - 0usize] ; ["Offset of field: Tcl_NotifierProcs::waitForEventProc"] [:: std :: mem :: offset_of ! (Tcl_NotifierProcs , waitForEventProc) - 8usize] ; ["Offset of field: Tcl_NotifierProcs::createFileHandlerProc"] [:: std :: mem :: offset_of ! (Tcl_NotifierProcs , createFileHandlerProc) - 16usize] ; ["Offset of field: Tcl_NotifierProcs::deleteFileHandlerProc"] [:: std :: mem :: offset_of ! (Tcl_NotifierProcs , deleteFileHandlerProc) - 24usize] ; ["Offset of field: Tcl_NotifierProcs::initNotifierProc"] [:: std :: mem :: offset_of ! (Tcl_NotifierProcs , initNotifierProc) - 32usize] ; ["Offset of field: Tcl_NotifierProcs::finalizeNotifierProc"] [:: std :: mem :: offset_of ! (Tcl_NotifierProcs , finalizeNotifierProc) - 40usize] ; ["Offset of field: Tcl_NotifierProcs::alertNotifierProc"] [:: std :: mem :: offset_of ! (Tcl_NotifierProcs , alertNotifierProc) - 48usize] ; ["Offset of field: Tcl_NotifierProcs::serviceModeHookProc"] [:: std :: mem :: offset_of ! (Tcl_NotifierProcs , serviceModeHookProc) - 56usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_EncodingType { pub encodingName : * const :: std :: os :: raw :: c_char , pub toUtfProc : Tcl_EncodingConvertProc , pub fromUtfProc : Tcl_EncodingConvertProc , pub freeProc : Tcl_EncodingFreeProc , pub clientData : ClientData , pub nullSize : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_EncodingType"] [:: std :: mem :: size_of :: < Tcl_EncodingType > () - 48usize] ; ["Alignment of Tcl_EncodingType"] [:: std :: mem :: align_of :: < Tcl_EncodingType > () - 8usize] ; ["Offset of field: Tcl_EncodingType::encodingName"] [:: std :: mem :: offset_of ! (Tcl_EncodingType , encodingName) - 0usize] ; ["Offset of field: Tcl_EncodingType::toUtfProc"] [:: std :: mem :: offset_of ! (Tcl_EncodingType , toUtfProc) - 8usize] ; ["Offset of field: Tcl_EncodingType::fromUtfProc"] [:: std :: mem :: offset_of ! (Tcl_EncodingType , fromUtfProc) - 16usize] ; ["Offset of field: Tcl_EncodingType::freeProc"] [:: std :: mem :: offset_of ! (Tcl_EncodingType , freeProc) - 24usize] ; ["Offset of field: Tcl_EncodingType::clientData"] [:: std :: mem :: offset_of ! (Tcl_EncodingType , clientData) - 32usize] ; ["Offset of field: Tcl_EncodingType::nullSize"] [:: std :: mem :: offset_of ! (Tcl_EncodingType , nullSize) - 40usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Token { pub type_ : :: std :: os :: raw :: c_int , pub start : * const :: std :: os :: raw :: c_char , pub size : :: std :: os :: raw :: c_int , pub numComponents : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Token"] [:: std :: mem :: size_of :: < Tcl_Token > () - 24usize] ; ["Alignment of Tcl_Token"] [:: std :: mem :: align_of :: < Tcl_Token > () - 8usize] ; ["Offset of field: Tcl_Token::type_"] [:: std :: mem :: offset_of ! (Tcl_Token , type_) - 0usize] ; ["Offset of field: Tcl_Token::start"] [:: std :: mem :: offset_of ! (Tcl_Token , start) - 8usize] ; ["Offset of field: Tcl_Token::size"] [:: std :: mem :: offset_of ! (Tcl_Token , size) - 16usize] ; ["Offset of field: Tcl_Token::numComponents"] [:: std :: mem :: offset_of ! (Tcl_Token , numComponents) - 20usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct Tcl_Parse { pub commentStart : * const :: std :: os :: raw :: c_char , pub commentSize : :: std :: os :: raw :: c_int , pub commandStart : * const :: std :: os :: raw :: c_char , pub commandSize : :: std :: os :: raw :: c_int , pub numWords : :: std :: os :: raw :: c_int , pub tokenPtr : * mut Tcl_Token , pub numTokens : :: std :: os :: raw :: c_int , pub tokensAvailable : :: std :: os :: raw :: c_int , pub errorType : :: std :: os :: raw :: c_int , pub string : * const :: std :: os :: raw :: c_char , pub end : * const :: std :: os :: raw :: c_char , pub interp : * mut Tcl_Interp , pub term : * const :: std :: os :: raw :: c_char , pub incomplete : :: std :: os :: raw :: c_int , pub staticTokens : [Tcl_Token ; 20usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of Tcl_Parse"] [:: std :: mem :: size_of :: < Tcl_Parse > () - 576usize] ; ["Alignment of Tcl_Parse"] [:: std :: mem :: align_of :: < Tcl_Parse > () - 8usize] ; ["Offset of field: Tcl_Parse::commentStart"] [:: std :: mem :: offset_of ! (Tcl_Parse , commentStart) - 0usize] ; ["Offset of field: Tcl_Parse::commentSize"] [:: std :: mem :: offset_of ! (Tcl_Parse , commentSize) - 8usize] ; ["Offset of field: Tcl_Parse::commandStart"] [:: std :: mem :: offset_of ! (Tcl_Parse , commandStart) - 16usize] ; ["Offset of field: Tcl_Parse::commandSize"] [:: std :: mem :: offset_of ! (Tcl_Parse , commandSize) - 24usize] ; ["Offset of field: Tcl_Parse::numWords"] [:: std :: mem :: offset_of ! (Tcl_Parse , numWords) - 28usize] ; ["Offset of field: Tcl_Parse::tokenPtr"] [:: std :: mem :: offset_of ! (Tcl_Parse , tokenPtr) - 32usize] ; ["Offset of field: Tcl_Parse::numTokens"] [:: std :: mem :: offset_of ! (Tcl_Parse , numTokens) - 40usize] ; ["Offset of field: Tcl_Parse::tokensAvailable"] [:: std :: mem :: offset_of ! (Tcl_Parse , tokensAvailable) - 44usize] ; ["Offset of field: Tcl_Parse::errorType"] [:: std :: mem :: offset_of ! (Tcl_Parse , errorType) - 48usize] ; ["Offset of field: Tcl_Parse::string"] [:: std :: mem :: offset_of ! (Tcl_Parse , string) - 56usize] ; ["Offset of field: Tcl_Parse::end"] [:: std :: mem :: offset_of ! (Tcl_Parse , end) - 64usize] ; ["Offset of field: Tcl_Parse::interp"] [:: std :: mem :: offset_of ! (Tcl_Parse , interp) - 72usize] ; ["Offset of field: Tcl_Parse::term"] [:: std :: mem :: offset_of ! (Tcl_Parse , term) - 80usize] ; ["Offset of field: Tcl_Parse::incomplete"] [:: std :: mem :: offset_of ! (Tcl_Parse , incomplete) - 88usize] ; ["Offset of field: Tcl_Parse::staticTokens"] [:: std :: mem :: offset_of ! (Tcl_Parse , staticTokens) - 96usize] ; } ; pub type Tcl_UniChar = :: std :: os :: raw :: c_ushort ; unsafe extern "C" { pub fn Tcl_InitStubs (interp : * mut Tcl_Interp , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_PkgProvideEx (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , clientData : ClientData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_PkgRequireEx (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int , clientDataPtr : * mut ClientData) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_Panic (format : * const :: std :: os :: raw :: c_char , ...) ; } unsafe extern "C" { pub fn Tcl_Alloc (size : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_Free (ptr : * mut :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_Realloc (ptr : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_DbCkalloc (size : :: std :: os :: raw :: c_uint , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_DbCkfree (ptr : * mut :: std :: os :: raw :: c_char , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_DbCkrealloc (ptr : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_uint , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_CreateFileHandler (fd : :: std :: os :: raw :: c_int , mask : :: std :: os :: raw :: c_int , proc_ : Tcl_FileProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DeleteFileHandler (fd : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_SetTimer (timePtr : * mut Tcl_Time) ; } unsafe extern "C" { pub fn Tcl_Sleep (ms : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_WaitForEvent (timePtr : * mut Tcl_Time) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_AppendAllObjTypes (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_AppendStringsToObj (objPtr : * mut Tcl_Obj , ...) ; } unsafe extern "C" { pub fn Tcl_AppendToObj (objPtr : * mut Tcl_Obj , bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_ConcatObj (objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_ConvertToType (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , typePtr : * mut Tcl_ObjType) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_DbDecrRefCount (objPtr : * mut Tcl_Obj , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_DbIncrRefCount (objPtr : * mut Tcl_Obj , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_DbIsShared (objPtr : * mut Tcl_Obj , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_DbNewBooleanObj (boolValue : :: std :: os :: raw :: c_int , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_DbNewByteArrayObj (bytes : * const :: std :: os :: raw :: c_uchar , length : :: std :: os :: raw :: c_int , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_DbNewDoubleObj (doubleValue : f64 , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_DbNewListObj (objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_DbNewLongObj (longValue : :: std :: os :: raw :: c_long , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_DbNewObj (file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_DbNewStringObj (bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_DuplicateObj (objPtr : * mut Tcl_Obj) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn TclFreeObj (objPtr : * mut Tcl_Obj) ; } unsafe extern "C" { pub fn Tcl_GetBoolean (interp : * mut Tcl_Interp , src : * const :: std :: os :: raw :: c_char , boolPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetBooleanFromObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , boolPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetByteArrayFromObj (objPtr : * mut Tcl_Obj , lengthPtr : * mut :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_uchar ; } unsafe extern "C" { pub fn Tcl_GetDouble (interp : * mut Tcl_Interp , src : * const :: std :: os :: raw :: c_char , doublePtr : * mut f64) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetDoubleFromObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , doublePtr : * mut f64) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetIndexFromObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , tablePtr : * mut * const :: std :: os :: raw :: c_char , msg : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , indexPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetInt (interp : * mut Tcl_Interp , src : * const :: std :: os :: raw :: c_char , intPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetIntFromObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , intPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetLongFromObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , longPtr : * mut :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetObjType (typeName : * const :: std :: os :: raw :: c_char) -> * mut Tcl_ObjType ; } unsafe extern "C" { pub fn Tcl_GetStringFromObj (objPtr : * mut Tcl_Obj , lengthPtr : * mut :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_InvalidateStringRep (objPtr : * mut Tcl_Obj) ; } unsafe extern "C" { pub fn Tcl_ListObjAppendList (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , elemListPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ListObjAppendElement (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ListObjGetElements (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , objcPtr : * mut :: std :: os :: raw :: c_int , objvPtr : * mut * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ListObjIndex (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , index : :: std :: os :: raw :: c_int , objPtrPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ListObjLength (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , lengthPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ListObjReplace (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , first : :: std :: os :: raw :: c_int , count : :: std :: os :: raw :: c_int , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_NewBooleanObj (boolValue : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_NewByteArrayObj (bytes : * const :: std :: os :: raw :: c_uchar , length : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_NewDoubleObj (doubleValue : f64) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_NewIntObj (intValue : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_NewListObj (objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_NewLongObj (longValue : :: std :: os :: raw :: c_long) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_NewObj () -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_NewStringObj (bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_SetBooleanObj (objPtr : * mut Tcl_Obj , boolValue : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_SetByteArrayLength (objPtr : * mut Tcl_Obj , length : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_uchar ; } unsafe extern "C" { pub fn Tcl_SetByteArrayObj (objPtr : * mut Tcl_Obj , bytes : * const :: std :: os :: raw :: c_uchar , length : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_SetDoubleObj (objPtr : * mut Tcl_Obj , doubleValue : f64) ; } unsafe extern "C" { pub fn Tcl_SetIntObj (objPtr : * mut Tcl_Obj , intValue : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_SetListObj (objPtr : * mut Tcl_Obj , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) ; } unsafe extern "C" { pub fn Tcl_SetLongObj (objPtr : * mut Tcl_Obj , longValue : :: std :: os :: raw :: c_long) ; } unsafe extern "C" { pub fn Tcl_SetObjLength (objPtr : * mut Tcl_Obj , length : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_SetStringObj (objPtr : * mut Tcl_Obj , bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_AddErrorInfo (interp : * mut Tcl_Interp , message : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_AddObjErrorInfo (interp : * mut Tcl_Interp , message : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_AllowExceptions (interp : * mut Tcl_Interp) ; } unsafe extern "C" { pub fn Tcl_AppendElement (interp : * mut Tcl_Interp , element : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_AppendResult (interp : * mut Tcl_Interp , ...) ; } unsafe extern "C" { pub fn Tcl_AsyncCreate (proc_ : Tcl_AsyncProc , clientData : ClientData) -> Tcl_AsyncHandler ; } unsafe extern "C" { pub fn Tcl_AsyncDelete (async_ : Tcl_AsyncHandler) ; } unsafe extern "C" { pub fn Tcl_AsyncInvoke (interp : * mut Tcl_Interp , code : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_AsyncMark (async_ : Tcl_AsyncHandler) ; } unsafe extern "C" { pub fn Tcl_AsyncReady () -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_BackgroundError (interp : * mut Tcl_Interp) ; } unsafe extern "C" { pub fn Tcl_Backslash (src : * const :: std :: os :: raw :: c_char , readPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_BadChannelOption (interp : * mut Tcl_Interp , optionName : * const :: std :: os :: raw :: c_char , optionList : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_CallWhenDeleted (interp : * mut Tcl_Interp , proc_ : Tcl_InterpDeleteProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_CancelIdleCall (idleProc : Tcl_IdleProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_Close (interp : * mut Tcl_Interp , chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_CommandComplete (cmd : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_Concat (argc : :: std :: os :: raw :: c_int , argv : * const * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_ConvertElement (src : * const :: std :: os :: raw :: c_char , dst : * mut :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ConvertCountedElement (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int , dst : * mut :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_CreateAlias (slave : * mut Tcl_Interp , slaveCmd : * const :: std :: os :: raw :: c_char , target : * mut Tcl_Interp , targetCmd : * const :: std :: os :: raw :: c_char , argc : :: std :: os :: raw :: c_int , argv : * const * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_CreateAliasObj (slave : * mut Tcl_Interp , slaveCmd : * const :: std :: os :: raw :: c_char , target : * mut Tcl_Interp , targetCmd : * const :: std :: os :: raw :: c_char , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_CreateChannel (typePtr : * mut Tcl_ChannelType , chanName : * const :: std :: os :: raw :: c_char , instanceData : ClientData , mask : :: std :: os :: raw :: c_int) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_CreateChannelHandler (chan : Tcl_Channel , mask : :: std :: os :: raw :: c_int , proc_ : Tcl_ChannelProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_CreateCloseHandler (chan : Tcl_Channel , proc_ : Tcl_CloseProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_CreateCommand (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , proc_ : Tcl_CmdProc , clientData : ClientData , deleteProc : Tcl_CmdDeleteProc) -> Tcl_Command ; } unsafe extern "C" { pub fn Tcl_CreateEventSource (setupProc : Tcl_EventSetupProc , checkProc : Tcl_EventCheckProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_CreateExitHandler (proc_ : Tcl_ExitProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_CreateInterp () -> * mut Tcl_Interp ; } unsafe extern "C" { pub fn Tcl_CreateMathFunc (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , numArgs : :: std :: os :: raw :: c_int , argTypes : * mut Tcl_ValueType , proc_ : Tcl_MathProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_CreateObjCommand (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , proc_ : Tcl_ObjCmdProc , clientData : ClientData , deleteProc : Tcl_CmdDeleteProc) -> Tcl_Command ; } unsafe extern "C" { pub fn Tcl_CreateSlave (interp : * mut Tcl_Interp , slaveName : * const :: std :: os :: raw :: c_char , isSafe : :: std :: os :: raw :: c_int) -> * mut Tcl_Interp ; } unsafe extern "C" { pub fn Tcl_CreateTimerHandler (milliseconds : :: std :: os :: raw :: c_int , proc_ : Tcl_TimerProc , clientData : ClientData) -> Tcl_TimerToken ; } unsafe extern "C" { pub fn Tcl_CreateTrace (interp : * mut Tcl_Interp , level : :: std :: os :: raw :: c_int , proc_ : Tcl_CmdTraceProc , clientData : ClientData) -> Tcl_Trace ; } unsafe extern "C" { pub fn Tcl_DeleteAssocData (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_DeleteChannelHandler (chan : Tcl_Channel , proc_ : Tcl_ChannelProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DeleteCloseHandler (chan : Tcl_Channel , proc_ : Tcl_CloseProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DeleteCommand (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_DeleteCommandFromToken (interp : * mut Tcl_Interp , command : Tcl_Command) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_DeleteEvents (proc_ : Tcl_EventDeleteProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DeleteEventSource (setupProc : Tcl_EventSetupProc , checkProc : Tcl_EventCheckProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DeleteExitHandler (proc_ : Tcl_ExitProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DeleteHashEntry (entryPtr : * mut Tcl_HashEntry) ; } unsafe extern "C" { pub fn Tcl_DeleteHashTable (tablePtr : * mut Tcl_HashTable) ; } unsafe extern "C" { pub fn Tcl_DeleteInterp (interp : * mut Tcl_Interp) ; } unsafe extern "C" { pub fn Tcl_DetachPids (numPids : :: std :: os :: raw :: c_int , pidPtr : * mut Tcl_Pid) ; } unsafe extern "C" { pub fn Tcl_DeleteTimerHandler (token : Tcl_TimerToken) ; } unsafe extern "C" { pub fn Tcl_DeleteTrace (interp : * mut Tcl_Interp , trace : Tcl_Trace) ; } unsafe extern "C" { pub fn Tcl_DontCallWhenDeleted (interp : * mut Tcl_Interp , proc_ : Tcl_InterpDeleteProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DoOneEvent (flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_DoWhenIdle (proc_ : Tcl_IdleProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DStringAppend (dsPtr : * mut Tcl_DString , bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_DStringAppendElement (dsPtr : * mut Tcl_DString , element : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_DStringEndSublist (dsPtr : * mut Tcl_DString) ; } unsafe extern "C" { pub fn Tcl_DStringFree (dsPtr : * mut Tcl_DString) ; } unsafe extern "C" { pub fn Tcl_DStringGetResult (interp : * mut Tcl_Interp , dsPtr : * mut Tcl_DString) ; } unsafe extern "C" { pub fn Tcl_DStringInit (dsPtr : * mut Tcl_DString) ; } unsafe extern "C" { pub fn Tcl_DStringResult (interp : * mut Tcl_Interp , dsPtr : * mut Tcl_DString) ; } unsafe extern "C" { pub fn Tcl_DStringSetLength (dsPtr : * mut Tcl_DString , length : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_DStringStartSublist (dsPtr : * mut Tcl_DString) ; } unsafe extern "C" { pub fn Tcl_Eof (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ErrnoId () -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_ErrnoMsg (err : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_Eval (interp : * mut Tcl_Interp , script : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_EvalFile (interp : * mut Tcl_Interp , fileName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_EvalObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_EventuallyFree (clientData : ClientData , freeProc : Tcl_FreeProc) ; } unsafe extern "C" { pub fn Tcl_Exit (status : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_ExposeCommand (interp : * mut Tcl_Interp , hiddenCmdToken : * const :: std :: os :: raw :: c_char , cmdName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExprBoolean (interp : * mut Tcl_Interp , expr : * const :: std :: os :: raw :: c_char , ptr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExprBooleanObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , ptr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExprDouble (interp : * mut Tcl_Interp , expr : * const :: std :: os :: raw :: c_char , ptr : * mut f64) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExprDoubleObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , ptr : * mut f64) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExprLong (interp : * mut Tcl_Interp , expr : * const :: std :: os :: raw :: c_char , ptr : * mut :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExprLongObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , ptr : * mut :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExprObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , resultPtrPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExprString (interp : * mut Tcl_Interp , expr : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_Finalize () ; } unsafe extern "C" { pub fn Tcl_FindExecutable (argv0 : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_FirstHashEntry (tablePtr : * mut Tcl_HashTable , searchPtr : * mut Tcl_HashSearch) -> * mut Tcl_HashEntry ; } unsafe extern "C" { pub fn Tcl_Flush (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FreeResult (interp : * mut Tcl_Interp) ; } unsafe extern "C" { pub fn Tcl_GetAlias (interp : * mut Tcl_Interp , slaveCmd : * const :: std :: os :: raw :: c_char , targetInterpPtr : * mut * mut Tcl_Interp , targetCmdPtr : * mut * const :: std :: os :: raw :: c_char , argcPtr : * mut :: std :: os :: raw :: c_int , argvPtr : * mut * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetAliasObj (interp : * mut Tcl_Interp , slaveCmd : * const :: std :: os :: raw :: c_char , targetInterpPtr : * mut * mut Tcl_Interp , targetCmdPtr : * mut * const :: std :: os :: raw :: c_char , objcPtr : * mut :: std :: os :: raw :: c_int , objv : * mut * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetAssocData (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , procPtr : * mut Tcl_InterpDeleteProc) -> ClientData ; } unsafe extern "C" { pub fn Tcl_GetChannel (interp : * mut Tcl_Interp , chanName : * const :: std :: os :: raw :: c_char , modePtr : * mut :: std :: os :: raw :: c_int) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_GetChannelBufferSize (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetChannelHandle (chan : Tcl_Channel , direction : :: std :: os :: raw :: c_int , handlePtr : * mut ClientData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetChannelInstanceData (chan : Tcl_Channel) -> ClientData ; } unsafe extern "C" { pub fn Tcl_GetChannelMode (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetChannelName (chan : Tcl_Channel) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GetChannelOption (interp : * mut Tcl_Interp , chan : Tcl_Channel , optionName : * const :: std :: os :: raw :: c_char , dsPtr : * mut Tcl_DString) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetChannelType (chan : Tcl_Channel) -> * mut Tcl_ChannelType ; } unsafe extern "C" { pub fn Tcl_GetCommandInfo (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , infoPtr : * mut Tcl_CmdInfo) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetCommandName (interp : * mut Tcl_Interp , command : Tcl_Command) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GetErrno () -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetHostName () -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GetInterpPath (askInterp : * mut Tcl_Interp , slaveInterp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetMaster (interp : * mut Tcl_Interp) -> * mut Tcl_Interp ; } unsafe extern "C" { pub fn Tcl_GetNameOfExecutable () -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GetObjResult (interp : * mut Tcl_Interp) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_GetOpenFile (interp : * mut Tcl_Interp , chanID : * const :: std :: os :: raw :: c_char , forWriting : :: std :: os :: raw :: c_int , checkUsage : :: std :: os :: raw :: c_int , filePtr : * mut ClientData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetPathType (path : * const :: std :: os :: raw :: c_char) -> Tcl_PathType ; } unsafe extern "C" { pub fn Tcl_Gets (chan : Tcl_Channel , dsPtr : * mut Tcl_DString) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetsObj (chan : Tcl_Channel , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetServiceMode () -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetSlave (interp : * mut Tcl_Interp , slaveName : * const :: std :: os :: raw :: c_char) -> * mut Tcl_Interp ; } unsafe extern "C" { pub fn Tcl_GetStdChannel (type_ : :: std :: os :: raw :: c_int) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_GetStringResult (interp : * mut Tcl_Interp) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GetVar (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GetVar2 (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GlobalEval (interp : * mut Tcl_Interp , command : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GlobalEvalObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_HideCommand (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , hiddenCmdToken : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_Init (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_InitHashTable (tablePtr : * mut Tcl_HashTable , keyType : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_InputBlocked (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_InputBuffered (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_InterpDeleted (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_IsSafe (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_JoinPath (argc : :: std :: os :: raw :: c_int , argv : * const * const :: std :: os :: raw :: c_char , resultPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_LinkVar (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , addr : * mut :: std :: os :: raw :: c_char , type_ : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_MakeFileChannel (handle : ClientData , mode : :: std :: os :: raw :: c_int) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_MakeSafe (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_MakeTcpClientChannel (tcpSocket : ClientData) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_Merge (argc : :: std :: os :: raw :: c_int , argv : * const * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_NextHashEntry (searchPtr : * mut Tcl_HashSearch) -> * mut Tcl_HashEntry ; } unsafe extern "C" { pub fn Tcl_NotifyChannel (channel : Tcl_Channel , mask : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_ObjGetVar2 (interp : * mut Tcl_Interp , part1Ptr : * mut Tcl_Obj , part2Ptr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_ObjSetVar2 (interp : * mut Tcl_Interp , part1Ptr : * mut Tcl_Obj , part2Ptr : * mut Tcl_Obj , newValuePtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_OpenCommandChannel (interp : * mut Tcl_Interp , argc : :: std :: os :: raw :: c_int , argv : * mut * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_OpenFileChannel (interp : * mut Tcl_Interp , fileName : * const :: std :: os :: raw :: c_char , modeString : * const :: std :: os :: raw :: c_char , permissions : :: std :: os :: raw :: c_int) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_OpenTcpClient (interp : * mut Tcl_Interp , port : :: std :: os :: raw :: c_int , address : * const :: std :: os :: raw :: c_char , myaddr : * const :: std :: os :: raw :: c_char , myport : :: std :: os :: raw :: c_int , async_ : :: std :: os :: raw :: c_int) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_OpenTcpServer (interp : * mut Tcl_Interp , port : :: std :: os :: raw :: c_int , host : * const :: std :: os :: raw :: c_char , acceptProc : Tcl_TcpAcceptProc , callbackData : ClientData) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_Preserve (data : ClientData) ; } unsafe extern "C" { pub fn Tcl_PrintDouble (interp : * mut Tcl_Interp , value : f64 , dst : * mut :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_PutEnv (assignment : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_PosixError (interp : * mut Tcl_Interp) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_QueueEvent (evPtr : * mut Tcl_Event , position : Tcl_QueuePosition) ; } unsafe extern "C" { pub fn Tcl_Read (chan : Tcl_Channel , bufPtr : * mut :: std :: os :: raw :: c_char , toRead : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ReapDetachedProcs () ; } unsafe extern "C" { pub fn Tcl_RecordAndEval (interp : * mut Tcl_Interp , cmd : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_RecordAndEvalObj (interp : * mut Tcl_Interp , cmdPtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_RegisterChannel (interp : * mut Tcl_Interp , chan : Tcl_Channel) ; } unsafe extern "C" { pub fn Tcl_RegisterObjType (typePtr : * mut Tcl_ObjType) ; } unsafe extern "C" { pub fn Tcl_RegExpCompile (interp : * mut Tcl_Interp , pattern : * const :: std :: os :: raw :: c_char) -> Tcl_RegExp ; } unsafe extern "C" { pub fn Tcl_RegExpExec (interp : * mut Tcl_Interp , regexp : Tcl_RegExp , text : * const :: std :: os :: raw :: c_char , start : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_RegExpMatch (interp : * mut Tcl_Interp , text : * const :: std :: os :: raw :: c_char , pattern : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_RegExpRange (regexp : Tcl_RegExp , index : :: std :: os :: raw :: c_int , startPtr : * mut * const :: std :: os :: raw :: c_char , endPtr : * mut * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_Release (clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_ResetResult (interp : * mut Tcl_Interp) ; } unsafe extern "C" { pub fn Tcl_ScanElement (src : * const :: std :: os :: raw :: c_char , flagPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ScanCountedElement (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int , flagPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SeekOld (chan : Tcl_Channel , offset : :: std :: os :: raw :: c_int , mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ServiceAll () -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ServiceEvent (flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SetAssocData (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , proc_ : Tcl_InterpDeleteProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_SetChannelBufferSize (chan : Tcl_Channel , sz : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_SetChannelOption (interp : * mut Tcl_Interp , chan : Tcl_Channel , optionName : * const :: std :: os :: raw :: c_char , newValue : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SetCommandInfo (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , infoPtr : * const Tcl_CmdInfo) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SetErrno (err : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_SetErrorCode (interp : * mut Tcl_Interp , ...) ; } unsafe extern "C" { pub fn Tcl_SetMaxBlockTime (timePtr : * mut Tcl_Time) ; } unsafe extern "C" { pub fn Tcl_SetPanicProc (panicProc : Tcl_PanicProc) ; } unsafe extern "C" { pub fn Tcl_SetRecursionLimit (interp : * mut Tcl_Interp , depth : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SetResult (interp : * mut Tcl_Interp , result : * mut :: std :: os :: raw :: c_char , freeProc : Tcl_FreeProc) ; } unsafe extern "C" { pub fn Tcl_SetServiceMode (mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SetObjErrorCode (interp : * mut Tcl_Interp , errorObjPtr : * mut Tcl_Obj) ; } unsafe extern "C" { pub fn Tcl_SetObjResult (interp : * mut Tcl_Interp , resultObjPtr : * mut Tcl_Obj) ; } unsafe extern "C" { pub fn Tcl_SetStdChannel (channel : Tcl_Channel , type_ : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_SetVar (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , newValue : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_SetVar2 (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , newValue : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_SignalId (sig : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_SignalMsg (sig : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_SourceRCFile (interp : * mut Tcl_Interp) ; } unsafe extern "C" { pub fn Tcl_SplitList (interp : * mut Tcl_Interp , listStr : * const :: std :: os :: raw :: c_char , argcPtr : * mut :: std :: os :: raw :: c_int , argvPtr : * mut * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SplitPath (path : * const :: std :: os :: raw :: c_char , argcPtr : * mut :: std :: os :: raw :: c_int , argvPtr : * mut * mut * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_StaticPackage (interp : * mut Tcl_Interp , pkgName : * const :: std :: os :: raw :: c_char , initProc : Tcl_PackageInitProc , safeInitProc : Tcl_PackageInitProc) ; } unsafe extern "C" { pub fn Tcl_StringMatch (str_ : * const :: std :: os :: raw :: c_char , pattern : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_TellOld (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_TraceVar (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_VarTraceProc , clientData : ClientData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_TraceVar2 (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_VarTraceProc , clientData : ClientData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_TranslateFileName (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , bufferPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_Ungets (chan : Tcl_Channel , str_ : * const :: std :: os :: raw :: c_char , len : :: std :: os :: raw :: c_int , atHead : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UnlinkVar (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_UnregisterChannel (interp : * mut Tcl_Interp , chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UnsetVar (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UnsetVar2 (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UntraceVar (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_VarTraceProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_UntraceVar2 (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_VarTraceProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_UpdateLinkedVar (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_UpVar (interp : * mut Tcl_Interp , frameName : * const :: std :: os :: raw :: c_char , varName : * const :: std :: os :: raw :: c_char , localName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UpVar2 (interp : * mut Tcl_Interp , frameName : * const :: std :: os :: raw :: c_char , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , localName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_VarEval (interp : * mut Tcl_Interp , ...) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_VarTraceInfo (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , procPtr : Tcl_VarTraceProc , prevClientData : ClientData) -> ClientData ; } unsafe extern "C" { pub fn Tcl_VarTraceInfo2 (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , procPtr : Tcl_VarTraceProc , prevClientData : ClientData) -> ClientData ; } unsafe extern "C" { pub fn Tcl_Write (chan : Tcl_Channel , s : * const :: std :: os :: raw :: c_char , slen : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_WrongNumArgs (interp : * mut Tcl_Interp , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj , message : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_DumpActiveMemory (fileName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ValidateAllMemory (file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_AppendResultVA (interp : * mut Tcl_Interp , argList : va_list) ; } unsafe extern "C" { pub fn Tcl_AppendStringsToObjVA (objPtr : * mut Tcl_Obj , argList : va_list) ; } unsafe extern "C" { pub fn Tcl_HashStats (tablePtr : * mut Tcl_HashTable) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_ParseVar (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , termPtr : * mut * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_PkgPresent (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_PkgPresentEx (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int , clientDataPtr : * mut ClientData) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_PkgProvide (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_PkgRequire (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_SetErrorCodeVA (interp : * mut Tcl_Interp , argList : va_list) ; } unsafe extern "C" { pub fn Tcl_VarEvalVA (interp : * mut Tcl_Interp , argList : va_list) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_WaitPid (pid : Tcl_Pid , statPtr : * mut :: std :: os :: raw :: c_int , options : :: std :: os :: raw :: c_int) -> Tcl_Pid ; } unsafe extern "C" { pub fn Tcl_PanicVA (format : * const :: std :: os :: raw :: c_char , argList : va_list) ; } unsafe extern "C" { pub fn Tcl_GetVersion (major : * mut :: std :: os :: raw :: c_int , minor : * mut :: std :: os :: raw :: c_int , patchLevel : * mut :: std :: os :: raw :: c_int , type_ : * mut :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_InitMemory (interp : * mut Tcl_Interp) ; } unsafe extern "C" { pub fn Tcl_StackChannel (interp : * mut Tcl_Interp , typePtr : * mut Tcl_ChannelType , instanceData : ClientData , mask : :: std :: os :: raw :: c_int , prevChan : Tcl_Channel) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_UnstackChannel (interp : * mut Tcl_Interp , chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetStackedChannel (chan : Tcl_Channel) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_SetMainLoop (proc_ : Tcl_MainLoopProc) ; } unsafe extern "C" { pub fn Tcl_AppendObjToObj (objPtr : * mut Tcl_Obj , appendObjPtr : * mut Tcl_Obj) ; } unsafe extern "C" { pub fn Tcl_CreateEncoding (typePtr : * mut Tcl_EncodingType) -> Tcl_Encoding ; } unsafe extern "C" { pub fn Tcl_CreateThreadExitHandler (proc_ : Tcl_ExitProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DeleteThreadExitHandler (proc_ : Tcl_ExitProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_DiscardResult (statePtr : * mut Tcl_SavedResult) ; } unsafe extern "C" { pub fn Tcl_EvalEx (interp : * mut Tcl_Interp , script : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_EvalObjv (interp : * mut Tcl_Interp , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_EvalObjEx (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExitThread (status : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_ExternalToUtf (interp : * mut Tcl_Interp , encoding : Tcl_Encoding , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int , statePtr : * mut Tcl_EncodingState , dst : * mut :: std :: os :: raw :: c_char , dstLen : :: std :: os :: raw :: c_int , srcReadPtr : * mut :: std :: os :: raw :: c_int , dstWrotePtr : * mut :: std :: os :: raw :: c_int , dstCharsPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ExternalToUtfDString (encoding : Tcl_Encoding , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , dsPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_FinalizeThread () ; } unsafe extern "C" { pub fn Tcl_FinalizeNotifier (clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_FreeEncoding (encoding : Tcl_Encoding) ; } unsafe extern "C" { pub fn Tcl_GetCurrentThread () -> Tcl_ThreadId ; } unsafe extern "C" { pub fn Tcl_GetEncoding (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char) -> Tcl_Encoding ; } unsafe extern "C" { pub fn Tcl_GetEncodingName (encoding : Tcl_Encoding) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GetEncodingNames (interp : * mut Tcl_Interp) ; } unsafe extern "C" { pub fn Tcl_GetIndexFromObjStruct (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , tablePtr : * const :: std :: os :: raw :: c_void , offset : :: std :: os :: raw :: c_int , msg : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , indexPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetThreadData (keyPtr : * mut Tcl_ThreadDataKey , size : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_void ; } unsafe extern "C" { pub fn Tcl_GetVar2Ex (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_InitNotifier () -> ClientData ; } unsafe extern "C" { pub fn Tcl_MutexLock (mutexPtr : * mut Tcl_Mutex) ; } unsafe extern "C" { pub fn Tcl_MutexUnlock (mutexPtr : * mut Tcl_Mutex) ; } unsafe extern "C" { pub fn Tcl_ConditionNotify (condPtr : * mut Tcl_Condition) ; } unsafe extern "C" { pub fn Tcl_ConditionWait (condPtr : * mut Tcl_Condition , mutexPtr : * mut Tcl_Mutex , timePtr : * mut Tcl_Time) ; } unsafe extern "C" { pub fn Tcl_NumUtfChars (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ReadChars (channel : Tcl_Channel , objPtr : * mut Tcl_Obj , charsToRead : :: std :: os :: raw :: c_int , appendFlag : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_RestoreResult (interp : * mut Tcl_Interp , statePtr : * mut Tcl_SavedResult) ; } unsafe extern "C" { pub fn Tcl_SaveResult (interp : * mut Tcl_Interp , statePtr : * mut Tcl_SavedResult) ; } unsafe extern "C" { pub fn Tcl_SetSystemEncoding (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SetVar2Ex (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , newValuePtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_ThreadAlert (threadId : Tcl_ThreadId) ; } unsafe extern "C" { pub fn Tcl_ThreadQueueEvent (threadId : Tcl_ThreadId , evPtr : * mut Tcl_Event , position : Tcl_QueuePosition) ; } unsafe extern "C" { pub fn Tcl_UniCharAtIndex (src : * const :: std :: os :: raw :: c_char , index : :: std :: os :: raw :: c_int) -> Tcl_UniChar ; } unsafe extern "C" { pub fn Tcl_UniCharToLower (ch : :: std :: os :: raw :: c_int) -> Tcl_UniChar ; } unsafe extern "C" { pub fn Tcl_UniCharToTitle (ch : :: std :: os :: raw :: c_int) -> Tcl_UniChar ; } unsafe extern "C" { pub fn Tcl_UniCharToUpper (ch : :: std :: os :: raw :: c_int) -> Tcl_UniChar ; } unsafe extern "C" { pub fn Tcl_UniCharToUtf (ch : :: std :: os :: raw :: c_int , buf : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfAtIndex (src : * const :: std :: os :: raw :: c_char , index : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_UtfCharComplete (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfBackslash (src : * const :: std :: os :: raw :: c_char , readPtr : * mut :: std :: os :: raw :: c_int , dst : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfFindFirst (src : * const :: std :: os :: raw :: c_char , ch : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_UtfFindLast (src : * const :: std :: os :: raw :: c_char , ch : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_UtfNext (src : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_UtfPrev (src : * const :: std :: os :: raw :: c_char , start : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_UtfToExternal (interp : * mut Tcl_Interp , encoding : Tcl_Encoding , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int , statePtr : * mut Tcl_EncodingState , dst : * mut :: std :: os :: raw :: c_char , dstLen : :: std :: os :: raw :: c_int , srcReadPtr : * mut :: std :: os :: raw :: c_int , dstWrotePtr : * mut :: std :: os :: raw :: c_int , dstCharsPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfToExternalDString (encoding : Tcl_Encoding , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , dsPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_UtfToLower (src : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfToTitle (src : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfToUniChar (src : * const :: std :: os :: raw :: c_char , chPtr : * mut Tcl_UniChar) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfToUpper (src : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_WriteChars (chan : Tcl_Channel , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_WriteObj (chan : Tcl_Channel , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetString (objPtr : * mut Tcl_Obj) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_GetDefaultEncodingDir () -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_SetDefaultEncodingDir (path : * const :: std :: os :: raw :: c_char) ; } unsafe extern "C" { pub fn Tcl_AlertNotifier (clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_ServiceModeHook (mode : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_UniCharIsAlnum (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsAlpha (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsDigit (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsLower (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsSpace (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsUpper (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsWordChar (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharLen (uniStr : * const Tcl_UniChar) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharNcmp (ucs : * const Tcl_UniChar , uct : * const Tcl_UniChar , numChars : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharToUtfDString (uniStr : * const Tcl_UniChar , uniLength : :: std :: os :: raw :: c_int , dsPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_UtfToUniCharDString (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int , dsPtr : * mut Tcl_DString) -> * mut Tcl_UniChar ; } unsafe extern "C" { pub fn Tcl_GetRegExpFromObj (interp : * mut Tcl_Interp , patObj : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> Tcl_RegExp ; } unsafe extern "C" { pub fn Tcl_EvalTokens (interp : * mut Tcl_Interp , tokenPtr : * mut Tcl_Token , count : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FreeParse (parsePtr : * mut Tcl_Parse) ; } unsafe extern "C" { pub fn Tcl_LogCommandInfo (interp : * mut Tcl_Interp , script : * const :: std :: os :: raw :: c_char , command : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_ParseBraces (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse , append : :: std :: os :: raw :: c_int , termPtr : * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ParseCommand (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , nested : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ParseExpr (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ParseQuotedString (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse , append : :: std :: os :: raw :: c_int , termPtr : * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ParseVarName (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse , append : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetCwd (interp : * mut Tcl_Interp , cwdPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_Chdir (dirName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_Access (path : * const :: std :: os :: raw :: c_char , mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_Stat (path : * const :: std :: os :: raw :: c_char , bufPtr : * mut stat) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfNcmp (s1 : * const :: std :: os :: raw :: c_char , s2 : * const :: std :: os :: raw :: c_char , n : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UtfNcasecmp (s1 : * const :: std :: os :: raw :: c_char , s2 : * const :: std :: os :: raw :: c_char , n : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_StringCaseMatch (str_ : * const :: std :: os :: raw :: c_char , pattern : * const :: std :: os :: raw :: c_char , nocase : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsControl (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsGraph (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsPrint (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharIsPunct (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_RegExpExecObj (interp : * mut Tcl_Interp , regexp : Tcl_RegExp , textObj : * mut Tcl_Obj , offset : :: std :: os :: raw :: c_int , nmatches : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_RegExpGetInfo (regexp : Tcl_RegExp , infoPtr : * mut Tcl_RegExpInfo) ; } unsafe extern "C" { pub fn Tcl_NewUnicodeObj (unicode : * const Tcl_UniChar , numChars : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_SetUnicodeObj (objPtr : * mut Tcl_Obj , unicode : * const Tcl_UniChar , numChars : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_GetCharLength (objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetUniChar (objPtr : * mut Tcl_Obj , index : :: std :: os :: raw :: c_int) -> Tcl_UniChar ; } unsafe extern "C" { pub fn Tcl_GetUnicode (objPtr : * mut Tcl_Obj) -> * mut Tcl_UniChar ; } unsafe extern "C" { pub fn Tcl_GetRange (objPtr : * mut Tcl_Obj , first : :: std :: os :: raw :: c_int , last : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_AppendUnicodeToObj (objPtr : * mut Tcl_Obj , unicode : * const Tcl_UniChar , length : :: std :: os :: raw :: c_int) ; } unsafe extern "C" { pub fn Tcl_RegExpMatchObj (interp : * mut Tcl_Interp , textObj : * mut Tcl_Obj , patternObj : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SetNotifier (notifierProcPtr : * mut Tcl_NotifierProcs) ; } unsafe extern "C" { pub fn Tcl_GetAllocMutex () -> * mut Tcl_Mutex ; } unsafe extern "C" { pub fn Tcl_GetChannelNames (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetChannelNamesEx (interp : * mut Tcl_Interp , pattern : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ProcObjCmd (clientData : ClientData , interp : * mut Tcl_Interp , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ConditionFinalize (condPtr : * mut Tcl_Condition) ; } unsafe extern "C" { pub fn Tcl_MutexFinalize (mutex : * mut Tcl_Mutex) ; } unsafe extern "C" { pub fn Tcl_CreateThread (idPtr : * mut Tcl_ThreadId , proc_ : Tcl_ThreadCreateProc , clientData : ClientData , stackSize : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ReadRaw (chan : Tcl_Channel , dst : * mut :: std :: os :: raw :: c_char , bytesToRead : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_WriteRaw (chan : Tcl_Channel , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetTopChannel (chan : Tcl_Channel) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_ChannelBuffered (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ChannelName (chanTypePtr : * mut Tcl_ChannelType) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_ChannelVersion (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_ChannelTypeVersion ; } unsafe extern "C" { pub fn Tcl_ChannelBlockModeProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverBlockModeProc ; } unsafe extern "C" { pub fn Tcl_ChannelCloseProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverCloseProc ; } unsafe extern "C" { pub fn Tcl_ChannelClose2Proc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverClose2Proc ; } unsafe extern "C" { pub fn Tcl_ChannelInputProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverInputProc ; } unsafe extern "C" { pub fn Tcl_ChannelOutputProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverOutputProc ; } unsafe extern "C" { pub fn Tcl_ChannelSeekProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverSeekProc ; } unsafe extern "C" { pub fn Tcl_ChannelSetOptionProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverSetOptionProc ; } unsafe extern "C" { pub fn Tcl_ChannelGetOptionProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverGetOptionProc ; } unsafe extern "C" { pub fn Tcl_ChannelWatchProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverWatchProc ; } unsafe extern "C" { pub fn Tcl_ChannelGetHandleProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverGetHandleProc ; } unsafe extern "C" { pub fn Tcl_ChannelFlushProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverFlushProc ; } unsafe extern "C" { pub fn Tcl_ChannelHandlerProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverHandlerProc ; } unsafe extern "C" { pub fn Tcl_JoinThread (threadId : Tcl_ThreadId , result : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_IsChannelShared (channel : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_IsChannelRegistered (interp : * mut Tcl_Interp , channel : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_CutChannel (channel : Tcl_Channel) ; } unsafe extern "C" { pub fn Tcl_SpliceChannel (channel : Tcl_Channel) ; } unsafe extern "C" { pub fn Tcl_ClearChannelHandlers (channel : Tcl_Channel) ; } unsafe extern "C" { pub fn Tcl_IsChannelExisting (channelName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharNcasecmp (ucs : * const Tcl_UniChar , uct : * const Tcl_UniChar , numChars : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UniCharCaseMatch (uniStr : * const Tcl_UniChar , uniPattern : * const Tcl_UniChar , nocase : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FindHashEntry (tablePtr : * mut Tcl_HashTable , key : * const :: std :: os :: raw :: c_char) -> * mut Tcl_HashEntry ; } unsafe extern "C" { pub fn Tcl_CreateHashEntry (tablePtr : * mut Tcl_HashTable , key : * const :: std :: os :: raw :: c_char , newPtr : * mut :: std :: os :: raw :: c_int) -> * mut Tcl_HashEntry ; } unsafe extern "C" { pub fn Tcl_InitCustomHashTable (tablePtr : * mut Tcl_HashTable , keyType : :: std :: os :: raw :: c_int , typePtr : * mut Tcl_HashKeyType) ; } unsafe extern "C" { pub fn Tcl_InitObjHashTable (tablePtr : * mut Tcl_HashTable) ; } unsafe extern "C" { pub fn Tcl_CommandTraceInfo (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , procPtr : Tcl_CommandTraceProc , prevClientData : ClientData) -> ClientData ; } unsafe extern "C" { pub fn Tcl_TraceCommand (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_CommandTraceProc , clientData : ClientData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_UntraceCommand (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_CommandTraceProc , clientData : ClientData) ; } unsafe extern "C" { pub fn Tcl_AttemptAlloc (size : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_AttemptDbCkalloc (size : :: std :: os :: raw :: c_uint , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_AttemptRealloc (ptr : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_AttemptDbCkrealloc (ptr : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_uint , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_AttemptSetObjLength (objPtr : * mut Tcl_Obj , length : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetChannelThread (channel : Tcl_Channel) -> Tcl_ThreadId ; } unsafe extern "C" { pub fn Tcl_GetUnicodeFromObj (objPtr : * mut Tcl_Obj , lengthPtr : * mut :: std :: os :: raw :: c_int) -> * mut Tcl_UniChar ; } unsafe extern "C" { pub fn Tcl_GetMathFuncInfo (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , numArgsPtr : * mut :: std :: os :: raw :: c_int , argTypesPtr : * mut * mut Tcl_ValueType , procPtr : * mut Tcl_MathProc , clientDataPtr : * mut ClientData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_ListMathFuncs (interp : * mut Tcl_Interp , pattern : * const :: std :: os :: raw :: c_char) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_SubstObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_DetachChannel (interp : * mut Tcl_Interp , channel : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_IsStandardChannel (channel : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSCopyFile (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSCopyDirectory (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj , errorPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSCreateDirectory (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSDeleteFile (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSLoadFile (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj , sym1 : * const :: std :: os :: raw :: c_char , sym2 : * const :: std :: os :: raw :: c_char , proc1Ptr : * mut Tcl_PackageInitProc , proc2Ptr : * mut Tcl_PackageInitProc , handlePtr : * mut Tcl_LoadHandle , unloadProcPtr : * mut Tcl_FSUnloadFileProc) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSMatchInDirectory (interp : * mut Tcl_Interp , result : * mut Tcl_Obj , pathPtr : * mut Tcl_Obj , pattern : * const :: std :: os :: raw :: c_char , types : * mut Tcl_GlobTypeData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSLink (pathPtr : * mut Tcl_Obj , toPtr : * mut Tcl_Obj , linkAction : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSRemoveDirectory (pathPtr : * mut Tcl_Obj , recursive : :: std :: os :: raw :: c_int , errorPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSRenameFile (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSLstat (pathPtr : * mut Tcl_Obj , buf : * mut Tcl_StatBuf) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSUtime (pathPtr : * mut Tcl_Obj , tval : * mut utimbuf) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSFileAttrsGet (interp : * mut Tcl_Interp , index : :: std :: os :: raw :: c_int , pathPtr : * mut Tcl_Obj , objPtrRef : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSFileAttrsSet (interp : * mut Tcl_Interp , index : :: std :: os :: raw :: c_int , pathPtr : * mut Tcl_Obj , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSFileAttrStrings (pathPtr : * mut Tcl_Obj , objPtrRef : * mut * mut Tcl_Obj) -> * mut * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_FSStat (pathPtr : * mut Tcl_Obj , buf : * mut Tcl_StatBuf) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSAccess (pathPtr : * mut Tcl_Obj , mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSOpenFileChannel (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj , modeString : * const :: std :: os :: raw :: c_char , permissions : :: std :: os :: raw :: c_int) -> Tcl_Channel ; } unsafe extern "C" { pub fn Tcl_FSGetCwd (interp : * mut Tcl_Interp) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSChdir (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSConvertToPathType (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSJoinPath (listObj : * mut Tcl_Obj , elements : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSSplitPath (pathPtr : * mut Tcl_Obj , lenPtr : * mut :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSEqualPaths (firstPtr : * mut Tcl_Obj , secondPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSGetNormalizedPath (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSJoinToPath (pathPtr : * mut Tcl_Obj , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSGetInternalRep (pathPtr : * mut Tcl_Obj , fsPtr : * mut Tcl_Filesystem) -> ClientData ; } unsafe extern "C" { pub fn Tcl_FSGetTranslatedPath (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSEvalFile (interp : * mut Tcl_Interp , fileName : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSNewNativePath (fromFilesystem : * mut Tcl_Filesystem , clientData : ClientData) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSGetNativePath (pathPtr : * mut Tcl_Obj) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_FSFileSystemInfo (pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSPathSeparator (pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSListVolumes () -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_FSRegister (clientData : ClientData , fsPtr : * mut Tcl_Filesystem) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSUnregister (fsPtr : * mut Tcl_Filesystem) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSData (fsPtr : * mut Tcl_Filesystem) -> ClientData ; } unsafe extern "C" { pub fn Tcl_FSGetTranslatedStringPath (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn Tcl_FSGetFileSystemForPath (pathPtr : * mut Tcl_Obj) -> * mut Tcl_Filesystem ; } unsafe extern "C" { pub fn Tcl_FSGetPathType (pathPtr : * mut Tcl_Obj) -> Tcl_PathType ; } unsafe extern "C" { pub fn Tcl_OutputBuffered (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_FSMountsChanged (fsPtr : * mut Tcl_Filesystem) ; } unsafe extern "C" { pub fn Tcl_EvalTokensStandard (interp : * mut Tcl_Interp , tokenPtr : * mut Tcl_Token , count : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_GetTime (timeBuf : * mut Tcl_Time) ; } unsafe extern "C" { pub fn Tcl_CreateObjTrace (interp : * mut Tcl_Interp , level : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int , objProc : Tcl_CmdObjTraceProc , clientData : ClientData , delProc : Tcl_CmdObjTraceDeleteProc) -> Tcl_Trace ; } unsafe extern "C" { pub fn Tcl_GetCommandInfoFromToken (token : Tcl_Command , infoPtr : * mut Tcl_CmdInfo) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_SetCommandInfoFromToken (token : Tcl_Command , infoPtr : * const Tcl_CmdInfo) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_DbNewWideIntObj (wideValue : Tcl_WideInt , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_GetWideIntFromObj (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , widePtr : * mut Tcl_WideInt) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn Tcl_NewWideIntObj (wideValue : Tcl_WideInt) -> * mut Tcl_Obj ; } unsafe extern "C" { pub fn Tcl_SetWideIntObj (objPtr : * mut Tcl_Obj , wideValue : Tcl_WideInt) ; } unsafe extern "C" { pub fn Tcl_AllocStatBuf () -> * mut Tcl_StatBuf ; } unsafe extern "C" { pub fn Tcl_Seek (chan : Tcl_Channel , offset : Tcl_WideInt , mode : :: std :: os :: raw :: c_int) -> Tcl_WideInt ; } unsafe extern "C" { pub fn Tcl_Tell (chan : Tcl_Channel) -> Tcl_WideInt ; } unsafe extern "C" { pub fn Tcl_ChannelWideSeekProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverWideSeekProc ; } unsafe extern "C" { pub fn Tcl_ChannelThreadActionProc (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverThreadActionProc ; } unsafe extern "C" { pub fn Tcl_PkgRequireProc (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj , clientDataPtr : * mut ClientData) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn TclUnusedStubEntry () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct TclStubHooks { pub tclPlatStubs : * mut TclPlatStubs , pub tclIntStubs : * mut TclIntStubs , pub tclIntPlatStubs : * mut TclIntPlatStubs , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of TclStubHooks"] [:: std :: mem :: size_of :: < TclStubHooks > () - 24usize] ; ["Alignment of TclStubHooks"] [:: std :: mem :: align_of :: < TclStubHooks > () - 8usize] ; ["Offset of field: TclStubHooks::tclPlatStubs"] [:: std :: mem :: offset_of ! (TclStubHooks , tclPlatStubs) - 0usize] ; ["Offset of field: TclStubHooks::tclIntStubs"] [:: std :: mem :: offset_of ! (TclStubHooks , tclIntStubs) - 8usize] ; ["Offset of field: TclStubHooks::tclIntPlatStubs"] [:: std :: mem :: offset_of ! (TclStubHooks , tclIntPlatStubs) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct TclStubs { pub magic : :: std :: os :: raw :: c_int , pub hooks : * mut TclStubHooks , pub tcl_PkgProvideEx : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , clientData : ClientData) -> :: std :: os :: raw :: c_int > , pub tcl_PkgRequireEx : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int , clientDataPtr : * mut ClientData) -> * const :: std :: os :: raw :: c_char > , pub tcl_Panic : :: std :: option :: Option < unsafe extern "C" fn (format : * const :: std :: os :: raw :: c_char , ...) > , pub tcl_Alloc : :: std :: option :: Option < unsafe extern "C" fn (size : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_char > , pub tcl_Free : :: std :: option :: Option < unsafe extern "C" fn (ptr : * mut :: std :: os :: raw :: c_char) > , pub tcl_Realloc : :: std :: option :: Option < unsafe extern "C" fn (ptr : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_char > , pub tcl_DbCkalloc : :: std :: option :: Option < unsafe extern "C" fn (size : :: std :: os :: raw :: c_uint , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char > , pub tcl_DbCkfree : :: std :: option :: Option < unsafe extern "C" fn (ptr : * mut :: std :: os :: raw :: c_char , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) > , pub tcl_DbCkrealloc : :: std :: option :: Option < unsafe extern "C" fn (ptr : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_uint , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char > , pub tcl_CreateFileHandler : :: std :: option :: Option < unsafe extern "C" fn (fd : :: std :: os :: raw :: c_int , mask : :: std :: os :: raw :: c_int , proc_ : Tcl_FileProc , clientData : ClientData) > , pub tcl_DeleteFileHandler : :: std :: option :: Option < unsafe extern "C" fn (fd : :: std :: os :: raw :: c_int) > , pub tcl_SetTimer : :: std :: option :: Option < unsafe extern "C" fn (timePtr : * mut Tcl_Time) > , pub tcl_Sleep : :: std :: option :: Option < unsafe extern "C" fn (ms : :: std :: os :: raw :: c_int) > , pub tcl_WaitForEvent : :: std :: option :: Option < unsafe extern "C" fn (timePtr : * mut Tcl_Time) -> :: std :: os :: raw :: c_int > , pub tcl_AppendAllObjTypes : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_AppendStringsToObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , ...) > , pub tcl_AppendToObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) > , pub tcl_ConcatObj : :: std :: option :: Option < unsafe extern "C" fn (objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> * mut Tcl_Obj > , pub tcl_ConvertToType : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , typePtr : * mut Tcl_ObjType) -> :: std :: os :: raw :: c_int > , pub tcl_DbDecrRefCount : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) > , pub tcl_DbIncrRefCount : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) > , pub tcl_DbIsShared : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_DbNewBooleanObj : :: std :: option :: Option < unsafe extern "C" fn (boolValue : :: std :: os :: raw :: c_int , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_DbNewByteArrayObj : :: std :: option :: Option < unsafe extern "C" fn (bytes : * const :: std :: os :: raw :: c_uchar , length : :: std :: os :: raw :: c_int , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_DbNewDoubleObj : :: std :: option :: Option < unsafe extern "C" fn (doubleValue : f64 , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_DbNewListObj : :: std :: option :: Option < unsafe extern "C" fn (objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_DbNewLongObj : :: std :: option :: Option < unsafe extern "C" fn (longValue : :: std :: os :: raw :: c_long , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_DbNewObj : :: std :: option :: Option < unsafe extern "C" fn (file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_DbNewStringObj : :: std :: option :: Option < unsafe extern "C" fn (bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_DuplicateObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj) -> * mut Tcl_Obj > , pub tclFreeObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj) > , pub tcl_GetBoolean : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , src : * const :: std :: os :: raw :: c_char , boolPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetBooleanFromObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , boolPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetByteArrayFromObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , lengthPtr : * mut :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_uchar > , pub tcl_GetDouble : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , src : * const :: std :: os :: raw :: c_char , doublePtr : * mut f64) -> :: std :: os :: raw :: c_int > , pub tcl_GetDoubleFromObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , doublePtr : * mut f64) -> :: std :: os :: raw :: c_int > , pub tcl_GetIndexFromObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , tablePtr : * mut * const :: std :: os :: raw :: c_char , msg : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , indexPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetInt : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , src : * const :: std :: os :: raw :: c_char , intPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetIntFromObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , intPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetLongFromObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , longPtr : * mut :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int > , pub tcl_GetObjType : :: std :: option :: Option < unsafe extern "C" fn (typeName : * const :: std :: os :: raw :: c_char) -> * mut Tcl_ObjType > , pub tcl_GetStringFromObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , lengthPtr : * mut :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char > , pub tcl_InvalidateStringRep : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj) > , pub tcl_ListObjAppendList : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , elemListPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_ListObjAppendElement : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_ListObjGetElements : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , objcPtr : * mut :: std :: os :: raw :: c_int , objvPtr : * mut * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_ListObjIndex : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , index : :: std :: os :: raw :: c_int , objPtrPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_ListObjLength : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , lengthPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ListObjReplace : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , listPtr : * mut Tcl_Obj , first : :: std :: os :: raw :: c_int , count : :: std :: os :: raw :: c_int , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_NewBooleanObj : :: std :: option :: Option < unsafe extern "C" fn (boolValue : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_NewByteArrayObj : :: std :: option :: Option < unsafe extern "C" fn (bytes : * const :: std :: os :: raw :: c_uchar , length : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_NewDoubleObj : :: std :: option :: Option < unsafe extern "C" fn (doubleValue : f64) -> * mut Tcl_Obj > , pub tcl_NewIntObj : :: std :: option :: Option < unsafe extern "C" fn (intValue : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_NewListObj : :: std :: option :: Option < unsafe extern "C" fn (objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> * mut Tcl_Obj > , pub tcl_NewLongObj : :: std :: option :: Option < unsafe extern "C" fn (longValue : :: std :: os :: raw :: c_long) -> * mut Tcl_Obj > , pub tcl_NewObj : :: std :: option :: Option < unsafe extern "C" fn () -> * mut Tcl_Obj > , pub tcl_NewStringObj : :: std :: option :: Option < unsafe extern "C" fn (bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_SetBooleanObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , boolValue : :: std :: os :: raw :: c_int) > , pub tcl_SetByteArrayLength : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , length : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_uchar > , pub tcl_SetByteArrayObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , bytes : * const :: std :: os :: raw :: c_uchar , length : :: std :: os :: raw :: c_int) > , pub tcl_SetDoubleObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , doubleValue : f64) > , pub tcl_SetIntObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , intValue : :: std :: os :: raw :: c_int) > , pub tcl_SetListObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) > , pub tcl_SetLongObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , longValue : :: std :: os :: raw :: c_long) > , pub tcl_SetObjLength : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , length : :: std :: os :: raw :: c_int) > , pub tcl_SetStringObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) > , pub tcl_AddErrorInfo : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , message : * const :: std :: os :: raw :: c_char) > , pub tcl_AddObjErrorInfo : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , message : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) > , pub tcl_AllowExceptions : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) > , pub tcl_AppendElement : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , element : * const :: std :: os :: raw :: c_char) > , pub tcl_AppendResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , ...) > , pub tcl_AsyncCreate : :: std :: option :: Option < unsafe extern "C" fn (proc_ : Tcl_AsyncProc , clientData : ClientData) -> Tcl_AsyncHandler > , pub tcl_AsyncDelete : :: std :: option :: Option < unsafe extern "C" fn (async_ : Tcl_AsyncHandler) > , pub tcl_AsyncInvoke : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , code : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_AsyncMark : :: std :: option :: Option < unsafe extern "C" fn (async_ : Tcl_AsyncHandler) > , pub tcl_AsyncReady : :: std :: option :: Option < unsafe extern "C" fn () -> :: std :: os :: raw :: c_int > , pub tcl_BackgroundError : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) > , pub tcl_Backslash : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , readPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_char > , pub tcl_BadChannelOption : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , optionName : * const :: std :: os :: raw :: c_char , optionList : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_CallWhenDeleted : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , proc_ : Tcl_InterpDeleteProc , clientData : ClientData) > , pub tcl_CancelIdleCall : :: std :: option :: Option < unsafe extern "C" fn (idleProc : Tcl_IdleProc , clientData : ClientData) > , pub tcl_Close : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_CommandComplete : :: std :: option :: Option < unsafe extern "C" fn (cmd : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_Concat : :: std :: option :: Option < unsafe extern "C" fn (argc : :: std :: os :: raw :: c_int , argv : * const * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char > , pub tcl_ConvertElement : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , dst : * mut :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ConvertCountedElement : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int , dst : * mut :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_CreateAlias : :: std :: option :: Option < unsafe extern "C" fn (slave : * mut Tcl_Interp , slaveCmd : * const :: std :: os :: raw :: c_char , target : * mut Tcl_Interp , targetCmd : * const :: std :: os :: raw :: c_char , argc : :: std :: os :: raw :: c_int , argv : * const * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_CreateAliasObj : :: std :: option :: Option < unsafe extern "C" fn (slave : * mut Tcl_Interp , slaveCmd : * const :: std :: os :: raw :: c_char , target : * mut Tcl_Interp , targetCmd : * const :: std :: os :: raw :: c_char , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_CreateChannel : :: std :: option :: Option < unsafe extern "C" fn (typePtr : * mut Tcl_ChannelType , chanName : * const :: std :: os :: raw :: c_char , instanceData : ClientData , mask : :: std :: os :: raw :: c_int) -> Tcl_Channel > , pub tcl_CreateChannelHandler : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , mask : :: std :: os :: raw :: c_int , proc_ : Tcl_ChannelProc , clientData : ClientData) > , pub tcl_CreateCloseHandler : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , proc_ : Tcl_CloseProc , clientData : ClientData) > , pub tcl_CreateCommand : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , proc_ : Tcl_CmdProc , clientData : ClientData , deleteProc : Tcl_CmdDeleteProc) -> Tcl_Command > , pub tcl_CreateEventSource : :: std :: option :: Option < unsafe extern "C" fn (setupProc : Tcl_EventSetupProc , checkProc : Tcl_EventCheckProc , clientData : ClientData) > , pub tcl_CreateExitHandler : :: std :: option :: Option < unsafe extern "C" fn (proc_ : Tcl_ExitProc , clientData : ClientData) > , pub tcl_CreateInterp : :: std :: option :: Option < unsafe extern "C" fn () -> * mut Tcl_Interp > , pub tcl_CreateMathFunc : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , numArgs : :: std :: os :: raw :: c_int , argTypes : * mut Tcl_ValueType , proc_ : Tcl_MathProc , clientData : ClientData) > , pub tcl_CreateObjCommand : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , proc_ : Tcl_ObjCmdProc , clientData : ClientData , deleteProc : Tcl_CmdDeleteProc) -> Tcl_Command > , pub tcl_CreateSlave : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , slaveName : * const :: std :: os :: raw :: c_char , isSafe : :: std :: os :: raw :: c_int) -> * mut Tcl_Interp > , pub tcl_CreateTimerHandler : :: std :: option :: Option < unsafe extern "C" fn (milliseconds : :: std :: os :: raw :: c_int , proc_ : Tcl_TimerProc , clientData : ClientData) -> Tcl_TimerToken > , pub tcl_CreateTrace : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , level : :: std :: os :: raw :: c_int , proc_ : Tcl_CmdTraceProc , clientData : ClientData) -> Tcl_Trace > , pub tcl_DeleteAssocData : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char) > , pub tcl_DeleteChannelHandler : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , proc_ : Tcl_ChannelProc , clientData : ClientData) > , pub tcl_DeleteCloseHandler : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , proc_ : Tcl_CloseProc , clientData : ClientData) > , pub tcl_DeleteCommand : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_DeleteCommandFromToken : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , command : Tcl_Command) -> :: std :: os :: raw :: c_int > , pub tcl_DeleteEvents : :: std :: option :: Option < unsafe extern "C" fn (proc_ : Tcl_EventDeleteProc , clientData : ClientData) > , pub tcl_DeleteEventSource : :: std :: option :: Option < unsafe extern "C" fn (setupProc : Tcl_EventSetupProc , checkProc : Tcl_EventCheckProc , clientData : ClientData) > , pub tcl_DeleteExitHandler : :: std :: option :: Option < unsafe extern "C" fn (proc_ : Tcl_ExitProc , clientData : ClientData) > , pub tcl_DeleteHashEntry : :: std :: option :: Option < unsafe extern "C" fn (entryPtr : * mut Tcl_HashEntry) > , pub tcl_DeleteHashTable : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable) > , pub tcl_DeleteInterp : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) > , pub tcl_DetachPids : :: std :: option :: Option < unsafe extern "C" fn (numPids : :: std :: os :: raw :: c_int , pidPtr : * mut Tcl_Pid) > , pub tcl_DeleteTimerHandler : :: std :: option :: Option < unsafe extern "C" fn (token : Tcl_TimerToken) > , pub tcl_DeleteTrace : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , trace : Tcl_Trace) > , pub tcl_DontCallWhenDeleted : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , proc_ : Tcl_InterpDeleteProc , clientData : ClientData) > , pub tcl_DoOneEvent : :: std :: option :: Option < unsafe extern "C" fn (flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_DoWhenIdle : :: std :: option :: Option < unsafe extern "C" fn (proc_ : Tcl_IdleProc , clientData : ClientData) > , pub tcl_DStringAppend : :: std :: option :: Option < unsafe extern "C" fn (dsPtr : * mut Tcl_DString , bytes : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char > , pub tcl_DStringAppendElement : :: std :: option :: Option < unsafe extern "C" fn (dsPtr : * mut Tcl_DString , element : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char > , pub tcl_DStringEndSublist : :: std :: option :: Option < unsafe extern "C" fn (dsPtr : * mut Tcl_DString) > , pub tcl_DStringFree : :: std :: option :: Option < unsafe extern "C" fn (dsPtr : * mut Tcl_DString) > , pub tcl_DStringGetResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , dsPtr : * mut Tcl_DString) > , pub tcl_DStringInit : :: std :: option :: Option < unsafe extern "C" fn (dsPtr : * mut Tcl_DString) > , pub tcl_DStringResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , dsPtr : * mut Tcl_DString) > , pub tcl_DStringSetLength : :: std :: option :: Option < unsafe extern "C" fn (dsPtr : * mut Tcl_DString , length : :: std :: os :: raw :: c_int) > , pub tcl_DStringStartSublist : :: std :: option :: Option < unsafe extern "C" fn (dsPtr : * mut Tcl_DString) > , pub tcl_Eof : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_ErrnoId : :: std :: option :: Option < unsafe extern "C" fn () -> * const :: std :: os :: raw :: c_char > , pub tcl_ErrnoMsg : :: std :: option :: Option < unsafe extern "C" fn (err : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_Eval : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , script : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_EvalFile : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , fileName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_EvalObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_EventuallyFree : :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , freeProc : Tcl_FreeProc) > , pub tcl_Exit : :: std :: option :: Option < unsafe extern "C" fn (status : :: std :: os :: raw :: c_int) > , pub tcl_ExposeCommand : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , hiddenCmdToken : * const :: std :: os :: raw :: c_char , cmdName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_ExprBoolean : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , expr : * const :: std :: os :: raw :: c_char , ptr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ExprBooleanObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , ptr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ExprDouble : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , expr : * const :: std :: os :: raw :: c_char , ptr : * mut f64) -> :: std :: os :: raw :: c_int > , pub tcl_ExprDoubleObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , ptr : * mut f64) -> :: std :: os :: raw :: c_int > , pub tcl_ExprLong : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , expr : * const :: std :: os :: raw :: c_char , ptr : * mut :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int > , pub tcl_ExprLongObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , ptr : * mut :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int > , pub tcl_ExprObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , resultPtrPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_ExprString : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , expr : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_Finalize : :: std :: option :: Option < unsafe extern "C" fn () > , pub tcl_FindExecutable : :: std :: option :: Option < unsafe extern "C" fn (argv0 : * const :: std :: os :: raw :: c_char) > , pub tcl_FirstHashEntry : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , searchPtr : * mut Tcl_HashSearch) -> * mut Tcl_HashEntry > , pub tcl_Flush : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_FreeResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) > , pub tcl_GetAlias : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , slaveCmd : * const :: std :: os :: raw :: c_char , targetInterpPtr : * mut * mut Tcl_Interp , targetCmdPtr : * mut * const :: std :: os :: raw :: c_char , argcPtr : * mut :: std :: os :: raw :: c_int , argvPtr : * mut * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_GetAliasObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , slaveCmd : * const :: std :: os :: raw :: c_char , targetInterpPtr : * mut * mut Tcl_Interp , targetCmdPtr : * mut * const :: std :: os :: raw :: c_char , objcPtr : * mut :: std :: os :: raw :: c_int , objv : * mut * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_GetAssocData : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , procPtr : * mut Tcl_InterpDeleteProc) -> ClientData > , pub tcl_GetChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , chanName : * const :: std :: os :: raw :: c_char , modePtr : * mut :: std :: os :: raw :: c_int) -> Tcl_Channel > , pub tcl_GetChannelBufferSize : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_GetChannelHandle : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , direction : :: std :: os :: raw :: c_int , handlePtr : * mut ClientData) -> :: std :: os :: raw :: c_int > , pub tcl_GetChannelInstanceData : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> ClientData > , pub tcl_GetChannelMode : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_GetChannelName : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> * const :: std :: os :: raw :: c_char > , pub tcl_GetChannelOption : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , chan : Tcl_Channel , optionName : * const :: std :: os :: raw :: c_char , dsPtr : * mut Tcl_DString) -> :: std :: os :: raw :: c_int > , pub tcl_GetChannelType : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> * mut Tcl_ChannelType > , pub tcl_GetCommandInfo : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , infoPtr : * mut Tcl_CmdInfo) -> :: std :: os :: raw :: c_int > , pub tcl_GetCommandName : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , command : Tcl_Command) -> * const :: std :: os :: raw :: c_char > , pub tcl_GetErrno : :: std :: option :: Option < unsafe extern "C" fn () -> :: std :: os :: raw :: c_int > , pub tcl_GetHostName : :: std :: option :: Option < unsafe extern "C" fn () -> * const :: std :: os :: raw :: c_char > , pub tcl_GetInterpPath : :: std :: option :: Option < unsafe extern "C" fn (askInterp : * mut Tcl_Interp , slaveInterp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > , pub tcl_GetMaster : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> * mut Tcl_Interp > , pub tcl_GetNameOfExecutable : :: std :: option :: Option < unsafe extern "C" fn () -> * const :: std :: os :: raw :: c_char > , pub tcl_GetObjResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> * mut Tcl_Obj > , pub tcl_GetOpenFile : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , chanID : * const :: std :: os :: raw :: c_char , forWriting : :: std :: os :: raw :: c_int , checkUsage : :: std :: os :: raw :: c_int , filePtr : * mut ClientData) -> :: std :: os :: raw :: c_int > , pub tcl_GetPathType : :: std :: option :: Option < unsafe extern "C" fn (path : * const :: std :: os :: raw :: c_char) -> Tcl_PathType > , pub tcl_Gets : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , dsPtr : * mut Tcl_DString) -> :: std :: os :: raw :: c_int > , pub tcl_GetsObj : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_GetServiceMode : :: std :: option :: Option < unsafe extern "C" fn () -> :: std :: os :: raw :: c_int > , pub tcl_GetSlave : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , slaveName : * const :: std :: os :: raw :: c_char) -> * mut Tcl_Interp > , pub tcl_GetStdChannel : :: std :: option :: Option < unsafe extern "C" fn (type_ : :: std :: os :: raw :: c_int) -> Tcl_Channel > , pub tcl_GetStringResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> * const :: std :: os :: raw :: c_char > , pub tcl_GetVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_GetVar2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_GlobalEval : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , command : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_GlobalEvalObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_HideCommand : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , hiddenCmdToken : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_Init : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > , pub tcl_InitHashTable : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , keyType : :: std :: os :: raw :: c_int) > , pub tcl_InputBlocked : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_InputBuffered : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_InterpDeleted : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > , pub tcl_IsSafe : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > , pub tcl_JoinPath : :: std :: option :: Option < unsafe extern "C" fn (argc : :: std :: os :: raw :: c_int , argv : * const * const :: std :: os :: raw :: c_char , resultPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char > , pub tcl_LinkVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , addr : * mut :: std :: os :: raw :: c_char , type_ : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub reserved188 : * mut :: std :: os :: raw :: c_void , pub tcl_MakeFileChannel : :: std :: option :: Option < unsafe extern "C" fn (handle : ClientData , mode : :: std :: os :: raw :: c_int) -> Tcl_Channel > , pub tcl_MakeSafe : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > , pub tcl_MakeTcpClientChannel : :: std :: option :: Option < unsafe extern "C" fn (tcpSocket : ClientData) -> Tcl_Channel > , pub tcl_Merge : :: std :: option :: Option < unsafe extern "C" fn (argc : :: std :: os :: raw :: c_int , argv : * const * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char > , pub tcl_NextHashEntry : :: std :: option :: Option < unsafe extern "C" fn (searchPtr : * mut Tcl_HashSearch) -> * mut Tcl_HashEntry > , pub tcl_NotifyChannel : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel , mask : :: std :: os :: raw :: c_int) > , pub tcl_ObjGetVar2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1Ptr : * mut Tcl_Obj , part2Ptr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_ObjSetVar2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1Ptr : * mut Tcl_Obj , part2Ptr : * mut Tcl_Obj , newValuePtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_OpenCommandChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , argc : :: std :: os :: raw :: c_int , argv : * mut * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> Tcl_Channel > , pub tcl_OpenFileChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , fileName : * const :: std :: os :: raw :: c_char , modeString : * const :: std :: os :: raw :: c_char , permissions : :: std :: os :: raw :: c_int) -> Tcl_Channel > , pub tcl_OpenTcpClient : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , port : :: std :: os :: raw :: c_int , address : * const :: std :: os :: raw :: c_char , myaddr : * const :: std :: os :: raw :: c_char , myport : :: std :: os :: raw :: c_int , async_ : :: std :: os :: raw :: c_int) -> Tcl_Channel > , pub tcl_OpenTcpServer : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , port : :: std :: os :: raw :: c_int , host : * const :: std :: os :: raw :: c_char , acceptProc : Tcl_TcpAcceptProc , callbackData : ClientData) -> Tcl_Channel > , pub tcl_Preserve : :: std :: option :: Option < unsafe extern "C" fn (data : ClientData) > , pub tcl_PrintDouble : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , value : f64 , dst : * mut :: std :: os :: raw :: c_char) > , pub tcl_PutEnv : :: std :: option :: Option < unsafe extern "C" fn (assignment : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_PosixError : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> * const :: std :: os :: raw :: c_char > , pub tcl_QueueEvent : :: std :: option :: Option < unsafe extern "C" fn (evPtr : * mut Tcl_Event , position : Tcl_QueuePosition) > , pub tcl_Read : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , bufPtr : * mut :: std :: os :: raw :: c_char , toRead : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ReapDetachedProcs : :: std :: option :: Option < unsafe extern "C" fn () > , pub tcl_RecordAndEval : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cmd : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_RecordAndEvalObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cmdPtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_RegisterChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , chan : Tcl_Channel) > , pub tcl_RegisterObjType : :: std :: option :: Option < unsafe extern "C" fn (typePtr : * mut Tcl_ObjType) > , pub tcl_RegExpCompile : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pattern : * const :: std :: os :: raw :: c_char) -> Tcl_RegExp > , pub tcl_RegExpExec : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , regexp : Tcl_RegExp , text : * const :: std :: os :: raw :: c_char , start : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_RegExpMatch : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , text : * const :: std :: os :: raw :: c_char , pattern : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_RegExpRange : :: std :: option :: Option < unsafe extern "C" fn (regexp : Tcl_RegExp , index : :: std :: os :: raw :: c_int , startPtr : * mut * const :: std :: os :: raw :: c_char , endPtr : * mut * const :: std :: os :: raw :: c_char) > , pub tcl_Release : :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > , pub tcl_ResetResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) > , pub tcl_ScanElement : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , flagPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ScanCountedElement : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int , flagPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_SeekOld : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , offset : :: std :: os :: raw :: c_int , mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ServiceAll : :: std :: option :: Option < unsafe extern "C" fn () -> :: std :: os :: raw :: c_int > , pub tcl_ServiceEvent : :: std :: option :: Option < unsafe extern "C" fn (flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_SetAssocData : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , proc_ : Tcl_InterpDeleteProc , clientData : ClientData) > , pub tcl_SetChannelBufferSize : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , sz : :: std :: os :: raw :: c_int) > , pub tcl_SetChannelOption : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , chan : Tcl_Channel , optionName : * const :: std :: os :: raw :: c_char , newValue : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_SetCommandInfo : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cmdName : * const :: std :: os :: raw :: c_char , infoPtr : * const Tcl_CmdInfo) -> :: std :: os :: raw :: c_int > , pub tcl_SetErrno : :: std :: option :: Option < unsafe extern "C" fn (err : :: std :: os :: raw :: c_int) > , pub tcl_SetErrorCode : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , ...) > , pub tcl_SetMaxBlockTime : :: std :: option :: Option < unsafe extern "C" fn (timePtr : * mut Tcl_Time) > , pub tcl_SetPanicProc : :: std :: option :: Option < unsafe extern "C" fn (panicProc : Tcl_PanicProc) > , pub tcl_SetRecursionLimit : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , depth : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_SetResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , result : * mut :: std :: os :: raw :: c_char , freeProc : Tcl_FreeProc) > , pub tcl_SetServiceMode : :: std :: option :: Option < unsafe extern "C" fn (mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_SetObjErrorCode : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , errorObjPtr : * mut Tcl_Obj) > , pub tcl_SetObjResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , resultObjPtr : * mut Tcl_Obj) > , pub tcl_SetStdChannel : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel , type_ : :: std :: os :: raw :: c_int) > , pub tcl_SetVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , newValue : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_SetVar2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , newValue : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_SignalId : :: std :: option :: Option < unsafe extern "C" fn (sig : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_SignalMsg : :: std :: option :: Option < unsafe extern "C" fn (sig : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_SourceRCFile : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) > , pub tcl_SplitList : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , listStr : * const :: std :: os :: raw :: c_char , argcPtr : * mut :: std :: os :: raw :: c_int , argvPtr : * mut * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_SplitPath : :: std :: option :: Option < unsafe extern "C" fn (path : * const :: std :: os :: raw :: c_char , argcPtr : * mut :: std :: os :: raw :: c_int , argvPtr : * mut * mut * const :: std :: os :: raw :: c_char) > , pub tcl_StaticPackage : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pkgName : * const :: std :: os :: raw :: c_char , initProc : Tcl_PackageInitProc , safeInitProc : Tcl_PackageInitProc) > , pub tcl_StringMatch : :: std :: option :: Option < unsafe extern "C" fn (str_ : * const :: std :: os :: raw :: c_char , pattern : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_TellOld : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_TraceVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_VarTraceProc , clientData : ClientData) -> :: std :: os :: raw :: c_int > , pub tcl_TraceVar2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_VarTraceProc , clientData : ClientData) -> :: std :: os :: raw :: c_int > , pub tcl_TranslateFileName : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , bufferPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char > , pub tcl_Ungets : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , str_ : * const :: std :: os :: raw :: c_char , len : :: std :: os :: raw :: c_int , atHead : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UnlinkVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char) > , pub tcl_UnregisterChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_UnsetVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UnsetVar2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UntraceVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_VarTraceProc , clientData : ClientData) > , pub tcl_UntraceVar2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_VarTraceProc , clientData : ClientData) > , pub tcl_UpdateLinkedVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char) > , pub tcl_UpVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , frameName : * const :: std :: os :: raw :: c_char , varName : * const :: std :: os :: raw :: c_char , localName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UpVar2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , frameName : * const :: std :: os :: raw :: c_char , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , localName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_VarEval : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , ...) -> :: std :: os :: raw :: c_int > , pub tcl_VarTraceInfo : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , procPtr : Tcl_VarTraceProc , prevClientData : ClientData) -> ClientData > , pub tcl_VarTraceInfo2 : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , procPtr : Tcl_VarTraceProc , prevClientData : ClientData) -> ClientData > , pub tcl_Write : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , s : * const :: std :: os :: raw :: c_char , slen : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_WrongNumArgs : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj , message : * const :: std :: os :: raw :: c_char) > , pub tcl_DumpActiveMemory : :: std :: option :: Option < unsafe extern "C" fn (fileName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_ValidateAllMemory : :: std :: option :: Option < unsafe extern "C" fn (file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) > , pub tcl_AppendResultVA : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , argList : va_list) > , pub tcl_AppendStringsToObjVA : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , argList : va_list) > , pub tcl_HashStats : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable) -> * mut :: std :: os :: raw :: c_char > , pub tcl_ParseVar : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , termPtr : * mut * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char > , pub tcl_PkgPresent : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_PkgPresentEx : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int , clientDataPtr : * mut ClientData) -> * const :: std :: os :: raw :: c_char > , pub tcl_PkgProvide : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_PkgRequire : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , version : * const :: std :: os :: raw :: c_char , exact : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_SetErrorCodeVA : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , argList : va_list) > , pub tcl_VarEvalVA : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , argList : va_list) -> :: std :: os :: raw :: c_int > , pub tcl_WaitPid : :: std :: option :: Option < unsafe extern "C" fn (pid : Tcl_Pid , statPtr : * mut :: std :: os :: raw :: c_int , options : :: std :: os :: raw :: c_int) -> Tcl_Pid > , pub tcl_PanicVA : :: std :: option :: Option < unsafe extern "C" fn (format : * const :: std :: os :: raw :: c_char , argList : va_list) > , pub tcl_GetVersion : :: std :: option :: Option < unsafe extern "C" fn (major : * mut :: std :: os :: raw :: c_int , minor : * mut :: std :: os :: raw :: c_int , patchLevel : * mut :: std :: os :: raw :: c_int , type_ : * mut :: std :: os :: raw :: c_int) > , pub tcl_InitMemory : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) > , pub tcl_StackChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , typePtr : * mut Tcl_ChannelType , instanceData : ClientData , mask : :: std :: os :: raw :: c_int , prevChan : Tcl_Channel) -> Tcl_Channel > , pub tcl_UnstackChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_GetStackedChannel : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> Tcl_Channel > , pub tcl_SetMainLoop : :: std :: option :: Option < unsafe extern "C" fn (proc_ : Tcl_MainLoopProc) > , pub reserved285 : * mut :: std :: os :: raw :: c_void , pub tcl_AppendObjToObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , appendObjPtr : * mut Tcl_Obj) > , pub tcl_CreateEncoding : :: std :: option :: Option < unsafe extern "C" fn (typePtr : * mut Tcl_EncodingType) -> Tcl_Encoding > , pub tcl_CreateThreadExitHandler : :: std :: option :: Option < unsafe extern "C" fn (proc_ : Tcl_ExitProc , clientData : ClientData) > , pub tcl_DeleteThreadExitHandler : :: std :: option :: Option < unsafe extern "C" fn (proc_ : Tcl_ExitProc , clientData : ClientData) > , pub tcl_DiscardResult : :: std :: option :: Option < unsafe extern "C" fn (statePtr : * mut Tcl_SavedResult) > , pub tcl_EvalEx : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , script : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_EvalObjv : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_EvalObjEx : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ExitThread : :: std :: option :: Option < unsafe extern "C" fn (status : :: std :: os :: raw :: c_int) > , pub tcl_ExternalToUtf : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , encoding : Tcl_Encoding , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int , statePtr : * mut Tcl_EncodingState , dst : * mut :: std :: os :: raw :: c_char , dstLen : :: std :: os :: raw :: c_int , srcReadPtr : * mut :: std :: os :: raw :: c_int , dstWrotePtr : * mut :: std :: os :: raw :: c_int , dstCharsPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ExternalToUtfDString : :: std :: option :: Option < unsafe extern "C" fn (encoding : Tcl_Encoding , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , dsPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char > , pub tcl_FinalizeThread : :: std :: option :: Option < unsafe extern "C" fn () > , pub tcl_FinalizeNotifier : :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > , pub tcl_FreeEncoding : :: std :: option :: Option < unsafe extern "C" fn (encoding : Tcl_Encoding) > , pub tcl_GetCurrentThread : :: std :: option :: Option < unsafe extern "C" fn () -> Tcl_ThreadId > , pub tcl_GetEncoding : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char) -> Tcl_Encoding > , pub tcl_GetEncodingName : :: std :: option :: Option < unsafe extern "C" fn (encoding : Tcl_Encoding) -> * const :: std :: os :: raw :: c_char > , pub tcl_GetEncodingNames : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) > , pub tcl_GetIndexFromObjStruct : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , tablePtr : * const :: std :: os :: raw :: c_void , offset : :: std :: os :: raw :: c_int , msg : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , indexPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetThreadData : :: std :: option :: Option < unsafe extern "C" fn (keyPtr : * mut Tcl_ThreadDataKey , size : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_void > , pub tcl_GetVar2Ex : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_InitNotifier : :: std :: option :: Option < unsafe extern "C" fn () -> ClientData > , pub tcl_MutexLock : :: std :: option :: Option < unsafe extern "C" fn (mutexPtr : * mut Tcl_Mutex) > , pub tcl_MutexUnlock : :: std :: option :: Option < unsafe extern "C" fn (mutexPtr : * mut Tcl_Mutex) > , pub tcl_ConditionNotify : :: std :: option :: Option < unsafe extern "C" fn (condPtr : * mut Tcl_Condition) > , pub tcl_ConditionWait : :: std :: option :: Option < unsafe extern "C" fn (condPtr : * mut Tcl_Condition , mutexPtr : * mut Tcl_Mutex , timePtr : * mut Tcl_Time) > , pub tcl_NumUtfChars : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ReadChars : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel , objPtr : * mut Tcl_Obj , charsToRead : :: std :: os :: raw :: c_int , appendFlag : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_RestoreResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , statePtr : * mut Tcl_SavedResult) > , pub tcl_SaveResult : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , statePtr : * mut Tcl_SavedResult) > , pub tcl_SetSystemEncoding : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_SetVar2Ex : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , part1 : * const :: std :: os :: raw :: c_char , part2 : * const :: std :: os :: raw :: c_char , newValuePtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_ThreadAlert : :: std :: option :: Option < unsafe extern "C" fn (threadId : Tcl_ThreadId) > , pub tcl_ThreadQueueEvent : :: std :: option :: Option < unsafe extern "C" fn (threadId : Tcl_ThreadId , evPtr : * mut Tcl_Event , position : Tcl_QueuePosition) > , pub tcl_UniCharAtIndex : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , index : :: std :: os :: raw :: c_int) -> Tcl_UniChar > , pub tcl_UniCharToLower : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> Tcl_UniChar > , pub tcl_UniCharToTitle : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> Tcl_UniChar > , pub tcl_UniCharToUpper : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> Tcl_UniChar > , pub tcl_UniCharToUtf : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int , buf : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_UtfAtIndex : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , index : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_UtfCharComplete : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UtfBackslash : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , readPtr : * mut :: std :: os :: raw :: c_int , dst : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_UtfFindFirst : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , ch : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_UtfFindLast : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , ch : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char > , pub tcl_UtfNext : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char > , pub tcl_UtfPrev : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , start : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char > , pub tcl_UtfToExternal : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , encoding : Tcl_Encoding , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int , statePtr : * mut Tcl_EncodingState , dst : * mut :: std :: os :: raw :: c_char , dstLen : :: std :: os :: raw :: c_int , srcReadPtr : * mut :: std :: os :: raw :: c_int , dstWrotePtr : * mut :: std :: os :: raw :: c_int , dstCharsPtr : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UtfToExternalDString : :: std :: option :: Option < unsafe extern "C" fn (encoding : Tcl_Encoding , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int , dsPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char > , pub tcl_UtfToLower : :: std :: option :: Option < unsafe extern "C" fn (src : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_UtfToTitle : :: std :: option :: Option < unsafe extern "C" fn (src : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_UtfToUniChar : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , chPtr : * mut Tcl_UniChar) -> :: std :: os :: raw :: c_int > , pub tcl_UtfToUpper : :: std :: option :: Option < unsafe extern "C" fn (src : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_WriteChars : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_WriteObj : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_GetString : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj) -> * mut :: std :: os :: raw :: c_char > , pub tcl_GetDefaultEncodingDir : :: std :: option :: Option < unsafe extern "C" fn () -> * const :: std :: os :: raw :: c_char > , pub tcl_SetDefaultEncodingDir : :: std :: option :: Option < unsafe extern "C" fn (path : * const :: std :: os :: raw :: c_char) > , pub tcl_AlertNotifier : :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData) > , pub tcl_ServiceModeHook : :: std :: option :: Option < unsafe extern "C" fn (mode : :: std :: os :: raw :: c_int) > , pub tcl_UniCharIsAlnum : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsAlpha : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsDigit : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsLower : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsSpace : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsUpper : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsWordChar : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharLen : :: std :: option :: Option < unsafe extern "C" fn (uniStr : * const Tcl_UniChar) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharNcmp : :: std :: option :: Option < unsafe extern "C" fn (ucs : * const Tcl_UniChar , uct : * const Tcl_UniChar , numChars : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharToUtfDString : :: std :: option :: Option < unsafe extern "C" fn (uniStr : * const Tcl_UniChar , uniLength : :: std :: os :: raw :: c_int , dsPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char > , pub tcl_UtfToUniCharDString : :: std :: option :: Option < unsafe extern "C" fn (src : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int , dsPtr : * mut Tcl_DString) -> * mut Tcl_UniChar > , pub tcl_GetRegExpFromObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , patObj : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> Tcl_RegExp > , pub tcl_EvalTokens : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , tokenPtr : * mut Tcl_Token , count : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_FreeParse : :: std :: option :: Option < unsafe extern "C" fn (parsePtr : * mut Tcl_Parse) > , pub tcl_LogCommandInfo : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , script : * const :: std :: os :: raw :: c_char , command : * const :: std :: os :: raw :: c_char , length : :: std :: os :: raw :: c_int) > , pub tcl_ParseBraces : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse , append : :: std :: os :: raw :: c_int , termPtr : * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_ParseCommand : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , nested : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse) -> :: std :: os :: raw :: c_int > , pub tcl_ParseExpr : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse) -> :: std :: os :: raw :: c_int > , pub tcl_ParseQuotedString : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse , append : :: std :: os :: raw :: c_int , termPtr : * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_ParseVarName : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , start : * const :: std :: os :: raw :: c_char , numBytes : :: std :: os :: raw :: c_int , parsePtr : * mut Tcl_Parse , append : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetCwd : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , cwdPtr : * mut Tcl_DString) -> * mut :: std :: os :: raw :: c_char > , pub tcl_Chdir : :: std :: option :: Option < unsafe extern "C" fn (dirName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_Access : :: std :: option :: Option < unsafe extern "C" fn (path : * const :: std :: os :: raw :: c_char , mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_Stat : :: std :: option :: Option < unsafe extern "C" fn (path : * const :: std :: os :: raw :: c_char , bufPtr : * mut stat) -> :: std :: os :: raw :: c_int > , pub tcl_UtfNcmp : :: std :: option :: Option < unsafe extern "C" fn (s1 : * const :: std :: os :: raw :: c_char , s2 : * const :: std :: os :: raw :: c_char , n : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int > , pub tcl_UtfNcasecmp : :: std :: option :: Option < unsafe extern "C" fn (s1 : * const :: std :: os :: raw :: c_char , s2 : * const :: std :: os :: raw :: c_char , n : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int > , pub tcl_StringCaseMatch : :: std :: option :: Option < unsafe extern "C" fn (str_ : * const :: std :: os :: raw :: c_char , pattern : * const :: std :: os :: raw :: c_char , nocase : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsControl : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsGraph : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsPrint : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharIsPunct : :: std :: option :: Option < unsafe extern "C" fn (ch : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_RegExpExecObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , regexp : Tcl_RegExp , textObj : * mut Tcl_Obj , offset : :: std :: os :: raw :: c_int , nmatches : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_RegExpGetInfo : :: std :: option :: Option < unsafe extern "C" fn (regexp : Tcl_RegExp , infoPtr : * mut Tcl_RegExpInfo) > , pub tcl_NewUnicodeObj : :: std :: option :: Option < unsafe extern "C" fn (unicode : * const Tcl_UniChar , numChars : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_SetUnicodeObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , unicode : * const Tcl_UniChar , numChars : :: std :: os :: raw :: c_int) > , pub tcl_GetCharLength : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_GetUniChar : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , index : :: std :: os :: raw :: c_int) -> Tcl_UniChar > , pub tcl_GetUnicode : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj) -> * mut Tcl_UniChar > , pub tcl_GetRange : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , first : :: std :: os :: raw :: c_int , last : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_AppendUnicodeToObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , unicode : * const Tcl_UniChar , length : :: std :: os :: raw :: c_int) > , pub tcl_RegExpMatchObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , textObj : * mut Tcl_Obj , patternObj : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_SetNotifier : :: std :: option :: Option < unsafe extern "C" fn (notifierProcPtr : * mut Tcl_NotifierProcs) > , pub tcl_GetAllocMutex : :: std :: option :: Option < unsafe extern "C" fn () -> * mut Tcl_Mutex > , pub tcl_GetChannelNames : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int > , pub tcl_GetChannelNamesEx : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pattern : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_ProcObjCmd : :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , interp : * mut Tcl_Interp , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_ConditionFinalize : :: std :: option :: Option < unsafe extern "C" fn (condPtr : * mut Tcl_Condition) > , pub tcl_MutexFinalize : :: std :: option :: Option < unsafe extern "C" fn (mutex : * mut Tcl_Mutex) > , pub tcl_CreateThread : :: std :: option :: Option < unsafe extern "C" fn (idPtr : * mut Tcl_ThreadId , proc_ : Tcl_ThreadCreateProc , clientData : ClientData , stackSize : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_ReadRaw : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , dst : * mut :: std :: os :: raw :: c_char , bytesToRead : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_WriteRaw : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , src : * const :: std :: os :: raw :: c_char , srcLen : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetTopChannel : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> Tcl_Channel > , pub tcl_ChannelBuffered : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_ChannelName : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> * const :: std :: os :: raw :: c_char > , pub tcl_ChannelVersion : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_ChannelTypeVersion > , pub tcl_ChannelBlockModeProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverBlockModeProc > , pub tcl_ChannelCloseProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverCloseProc > , pub tcl_ChannelClose2Proc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverClose2Proc > , pub tcl_ChannelInputProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverInputProc > , pub tcl_ChannelOutputProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverOutputProc > , pub tcl_ChannelSeekProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverSeekProc > , pub tcl_ChannelSetOptionProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverSetOptionProc > , pub tcl_ChannelGetOptionProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverGetOptionProc > , pub tcl_ChannelWatchProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverWatchProc > , pub tcl_ChannelGetHandleProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverGetHandleProc > , pub tcl_ChannelFlushProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverFlushProc > , pub tcl_ChannelHandlerProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverHandlerProc > , pub tcl_JoinThread : :: std :: option :: Option < unsafe extern "C" fn (threadId : Tcl_ThreadId , result : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_IsChannelShared : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_IsChannelRegistered : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , channel : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_CutChannel : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel) > , pub tcl_SpliceChannel : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel) > , pub tcl_ClearChannelHandlers : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel) > , pub tcl_IsChannelExisting : :: std :: option :: Option < unsafe extern "C" fn (channelName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharNcasecmp : :: std :: option :: Option < unsafe extern "C" fn (ucs : * const Tcl_UniChar , uct : * const Tcl_UniChar , numChars : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int > , pub tcl_UniCharCaseMatch : :: std :: option :: Option < unsafe extern "C" fn (uniStr : * const Tcl_UniChar , uniPattern : * const Tcl_UniChar , nocase : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_FindHashEntry : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , key : * const :: std :: os :: raw :: c_char) -> * mut Tcl_HashEntry > , pub tcl_CreateHashEntry : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , key : * const :: std :: os :: raw :: c_char , newPtr : * mut :: std :: os :: raw :: c_int) -> * mut Tcl_HashEntry > , pub tcl_InitCustomHashTable : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable , keyType : :: std :: os :: raw :: c_int , typePtr : * mut Tcl_HashKeyType) > , pub tcl_InitObjHashTable : :: std :: option :: Option < unsafe extern "C" fn (tablePtr : * mut Tcl_HashTable) > , pub tcl_CommandTraceInfo : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , procPtr : Tcl_CommandTraceProc , prevClientData : ClientData) -> ClientData > , pub tcl_TraceCommand : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_CommandTraceProc , clientData : ClientData) -> :: std :: os :: raw :: c_int > , pub tcl_UntraceCommand : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , varName : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int , proc_ : Tcl_CommandTraceProc , clientData : ClientData) > , pub tcl_AttemptAlloc : :: std :: option :: Option < unsafe extern "C" fn (size : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_char > , pub tcl_AttemptDbCkalloc : :: std :: option :: Option < unsafe extern "C" fn (size : :: std :: os :: raw :: c_uint , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char > , pub tcl_AttemptRealloc : :: std :: option :: Option < unsafe extern "C" fn (ptr : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_char > , pub tcl_AttemptDbCkrealloc : :: std :: option :: Option < unsafe extern "C" fn (ptr : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_uint , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char > , pub tcl_AttemptSetObjLength : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , length : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetChannelThread : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel) -> Tcl_ThreadId > , pub tcl_GetUnicodeFromObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , lengthPtr : * mut :: std :: os :: raw :: c_int) -> * mut Tcl_UniChar > , pub tcl_GetMathFuncInfo : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , numArgsPtr : * mut :: std :: os :: raw :: c_int , argTypesPtr : * mut * mut Tcl_ValueType , procPtr : * mut Tcl_MathProc , clientDataPtr : * mut ClientData) -> :: std :: os :: raw :: c_int > , pub tcl_ListMathFuncs : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pattern : * const :: std :: os :: raw :: c_char) -> * mut Tcl_Obj > , pub tcl_SubstObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , flags : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_DetachChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , channel : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_IsStandardChannel : :: std :: option :: Option < unsafe extern "C" fn (channel : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_FSCopyFile : :: std :: option :: Option < unsafe extern "C" fn (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSCopyDirectory : :: std :: option :: Option < unsafe extern "C" fn (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj , errorPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSCreateDirectory : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSDeleteFile : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSLoadFile : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj , sym1 : * const :: std :: os :: raw :: c_char , sym2 : * const :: std :: os :: raw :: c_char , proc1Ptr : * mut Tcl_PackageInitProc , proc2Ptr : * mut Tcl_PackageInitProc , handlePtr : * mut Tcl_LoadHandle , unloadProcPtr : * mut Tcl_FSUnloadFileProc) -> :: std :: os :: raw :: c_int > , pub tcl_FSMatchInDirectory : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , result : * mut Tcl_Obj , pathPtr : * mut Tcl_Obj , pattern : * const :: std :: os :: raw :: c_char , types : * mut Tcl_GlobTypeData) -> :: std :: os :: raw :: c_int > , pub tcl_FSLink : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , toPtr : * mut Tcl_Obj , linkAction : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_FSRemoveDirectory : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , recursive : :: std :: os :: raw :: c_int , errorPtr : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSRenameFile : :: std :: option :: Option < unsafe extern "C" fn (srcPathPtr : * mut Tcl_Obj , destPathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSLstat : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , buf : * mut Tcl_StatBuf) -> :: std :: os :: raw :: c_int > , pub tcl_FSUtime : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , tval : * mut utimbuf) -> :: std :: os :: raw :: c_int > , pub tcl_FSFileAttrsGet : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , index : :: std :: os :: raw :: c_int , pathPtr : * mut Tcl_Obj , objPtrRef : * mut * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSFileAttrsSet : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , index : :: std :: os :: raw :: c_int , pathPtr : * mut Tcl_Obj , objPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSFileAttrStrings : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , objPtrRef : * mut * mut Tcl_Obj) -> * mut * const :: std :: os :: raw :: c_char > , pub tcl_FSStat : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , buf : * mut Tcl_StatBuf) -> :: std :: os :: raw :: c_int > , pub tcl_FSAccess : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , mode : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_FSOpenFileChannel : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj , modeString : * const :: std :: os :: raw :: c_char , permissions : :: std :: os :: raw :: c_int) -> Tcl_Channel > , pub tcl_FSGetCwd : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp) -> * mut Tcl_Obj > , pub tcl_FSChdir : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSConvertToPathType : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSJoinPath : :: std :: option :: Option < unsafe extern "C" fn (listObj : * mut Tcl_Obj , elements : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_FSSplitPath : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , lenPtr : * mut :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_FSEqualPaths : :: std :: option :: Option < unsafe extern "C" fn (firstPtr : * mut Tcl_Obj , secondPtr : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSGetNormalizedPath : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj > , pub tcl_FSJoinToPath : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj) -> * mut Tcl_Obj > , pub tcl_FSGetInternalRep : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj , fsPtr : * mut Tcl_Filesystem) -> ClientData > , pub tcl_FSGetTranslatedPath : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj > , pub tcl_FSEvalFile : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , fileName : * mut Tcl_Obj) -> :: std :: os :: raw :: c_int > , pub tcl_FSNewNativePath : :: std :: option :: Option < unsafe extern "C" fn (fromFilesystem : * mut Tcl_Filesystem , clientData : ClientData) -> * mut Tcl_Obj > , pub tcl_FSGetNativePath : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> * const :: std :: os :: raw :: c_char > , pub tcl_FSFileSystemInfo : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj > , pub tcl_FSPathSeparator : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> * mut Tcl_Obj > , pub tcl_FSListVolumes : :: std :: option :: Option < unsafe extern "C" fn () -> * mut Tcl_Obj > , pub tcl_FSRegister : :: std :: option :: Option < unsafe extern "C" fn (clientData : ClientData , fsPtr : * mut Tcl_Filesystem) -> :: std :: os :: raw :: c_int > , pub tcl_FSUnregister : :: std :: option :: Option < unsafe extern "C" fn (fsPtr : * mut Tcl_Filesystem) -> :: std :: os :: raw :: c_int > , pub tcl_FSData : :: std :: option :: Option < unsafe extern "C" fn (fsPtr : * mut Tcl_Filesystem) -> ClientData > , pub tcl_FSGetTranslatedStringPath : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , pathPtr : * mut Tcl_Obj) -> * const :: std :: os :: raw :: c_char > , pub tcl_FSGetFileSystemForPath : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> * mut Tcl_Filesystem > , pub tcl_FSGetPathType : :: std :: option :: Option < unsafe extern "C" fn (pathPtr : * mut Tcl_Obj) -> Tcl_PathType > , pub tcl_OutputBuffered : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> :: std :: os :: raw :: c_int > , pub tcl_FSMountsChanged : :: std :: option :: Option < unsafe extern "C" fn (fsPtr : * mut Tcl_Filesystem) > , pub tcl_EvalTokensStandard : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , tokenPtr : * mut Tcl_Token , count : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub tcl_GetTime : :: std :: option :: Option < unsafe extern "C" fn (timeBuf : * mut Tcl_Time) > , pub tcl_CreateObjTrace : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , level : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int , objProc : Tcl_CmdObjTraceProc , clientData : ClientData , delProc : Tcl_CmdObjTraceDeleteProc) -> Tcl_Trace > , pub tcl_GetCommandInfoFromToken : :: std :: option :: Option < unsafe extern "C" fn (token : Tcl_Command , infoPtr : * mut Tcl_CmdInfo) -> :: std :: os :: raw :: c_int > , pub tcl_SetCommandInfoFromToken : :: std :: option :: Option < unsafe extern "C" fn (token : Tcl_Command , infoPtr : * const Tcl_CmdInfo) -> :: std :: os :: raw :: c_int > , pub tcl_DbNewWideIntObj : :: std :: option :: Option < unsafe extern "C" fn (wideValue : Tcl_WideInt , file : * const :: std :: os :: raw :: c_char , line : :: std :: os :: raw :: c_int) -> * mut Tcl_Obj > , pub tcl_GetWideIntFromObj : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , objPtr : * mut Tcl_Obj , widePtr : * mut Tcl_WideInt) -> :: std :: os :: raw :: c_int > , pub tcl_NewWideIntObj : :: std :: option :: Option < unsafe extern "C" fn (wideValue : Tcl_WideInt) -> * mut Tcl_Obj > , pub tcl_SetWideIntObj : :: std :: option :: Option < unsafe extern "C" fn (objPtr : * mut Tcl_Obj , wideValue : Tcl_WideInt) > , pub tcl_AllocStatBuf : :: std :: option :: Option < unsafe extern "C" fn () -> * mut Tcl_StatBuf > , pub tcl_Seek : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel , offset : Tcl_WideInt , mode : :: std :: os :: raw :: c_int) -> Tcl_WideInt > , pub tcl_Tell : :: std :: option :: Option < unsafe extern "C" fn (chan : Tcl_Channel) -> Tcl_WideInt > , pub tcl_ChannelWideSeekProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverWideSeekProc > , pub reserved494 : * mut :: std :: os :: raw :: c_void , pub reserved495 : * mut :: std :: os :: raw :: c_void , pub reserved496 : * mut :: std :: os :: raw :: c_void , pub reserved497 : * mut :: std :: os :: raw :: c_void , pub reserved498 : * mut :: std :: os :: raw :: c_void , pub reserved499 : * mut :: std :: os :: raw :: c_void , pub reserved500 : * mut :: std :: os :: raw :: c_void , pub reserved501 : * mut :: std :: os :: raw :: c_void , pub reserved502 : * mut :: std :: os :: raw :: c_void , pub reserved503 : * mut :: std :: os :: raw :: c_void , pub reserved504 : * mut :: std :: os :: raw :: c_void , pub reserved505 : * mut :: std :: os :: raw :: c_void , pub reserved506 : * mut :: std :: os :: raw :: c_void , pub reserved507 : * mut :: std :: os :: raw :: c_void , pub reserved508 : * mut :: std :: os :: raw :: c_void , pub reserved509 : * mut :: std :: os :: raw :: c_void , pub reserved510 : * mut :: std :: os :: raw :: c_void , pub reserved511 : * mut :: std :: os :: raw :: c_void , pub reserved512 : * mut :: std :: os :: raw :: c_void , pub reserved513 : * mut :: std :: os :: raw :: c_void , pub reserved514 : * mut :: std :: os :: raw :: c_void , pub reserved515 : * mut :: std :: os :: raw :: c_void , pub reserved516 : * mut :: std :: os :: raw :: c_void , pub reserved517 : * mut :: std :: os :: raw :: c_void , pub reserved518 : * mut :: std :: os :: raw :: c_void , pub reserved519 : * mut :: std :: os :: raw :: c_void , pub reserved520 : * mut :: std :: os :: raw :: c_void , pub reserved521 : * mut :: std :: os :: raw :: c_void , pub reserved522 : * mut :: std :: os :: raw :: c_void , pub reserved523 : * mut :: std :: os :: raw :: c_void , pub reserved524 : * mut :: std :: os :: raw :: c_void , pub reserved525 : * mut :: std :: os :: raw :: c_void , pub reserved526 : * mut :: std :: os :: raw :: c_void , pub reserved527 : * mut :: std :: os :: raw :: c_void , pub reserved528 : * mut :: std :: os :: raw :: c_void , pub reserved529 : * mut :: std :: os :: raw :: c_void , pub reserved530 : * mut :: std :: os :: raw :: c_void , pub reserved531 : * mut :: std :: os :: raw :: c_void , pub reserved532 : * mut :: std :: os :: raw :: c_void , pub reserved533 : * mut :: std :: os :: raw :: c_void , pub reserved534 : * mut :: std :: os :: raw :: c_void , pub reserved535 : * mut :: std :: os :: raw :: c_void , pub reserved536 : * mut :: std :: os :: raw :: c_void , pub reserved537 : * mut :: std :: os :: raw :: c_void , pub reserved538 : * mut :: std :: os :: raw :: c_void , pub reserved539 : * mut :: std :: os :: raw :: c_void , pub reserved540 : * mut :: std :: os :: raw :: c_void , pub reserved541 : * mut :: std :: os :: raw :: c_void , pub reserved542 : * mut :: std :: os :: raw :: c_void , pub reserved543 : * mut :: std :: os :: raw :: c_void , pub reserved544 : * mut :: std :: os :: raw :: c_void , pub reserved545 : * mut :: std :: os :: raw :: c_void , pub reserved546 : * mut :: std :: os :: raw :: c_void , pub reserved547 : * mut :: std :: os :: raw :: c_void , pub reserved548 : * mut :: std :: os :: raw :: c_void , pub reserved549 : * mut :: std :: os :: raw :: c_void , pub reserved550 : * mut :: std :: os :: raw :: c_void , pub reserved551 : * mut :: std :: os :: raw :: c_void , pub reserved552 : * mut :: std :: os :: raw :: c_void , pub reserved553 : * mut :: std :: os :: raw :: c_void , pub tcl_ChannelThreadActionProc : :: std :: option :: Option < unsafe extern "C" fn (chanTypePtr : * mut Tcl_ChannelType) -> Tcl_DriverThreadActionProc > , pub reserved555 : * mut :: std :: os :: raw :: c_void , pub reserved556 : * mut :: std :: os :: raw :: c_void , pub reserved557 : * mut :: std :: os :: raw :: c_void , pub reserved558 : * mut :: std :: os :: raw :: c_void , pub reserved559 : * mut :: std :: os :: raw :: c_void , pub reserved560 : * mut :: std :: os :: raw :: c_void , pub reserved561 : * mut :: std :: os :: raw :: c_void , pub reserved562 : * mut :: std :: os :: raw :: c_void , pub reserved563 : * mut :: std :: os :: raw :: c_void , pub reserved564 : * mut :: std :: os :: raw :: c_void , pub reserved565 : * mut :: std :: os :: raw :: c_void , pub reserved566 : * mut :: std :: os :: raw :: c_void , pub reserved567 : * mut :: std :: os :: raw :: c_void , pub reserved568 : * mut :: std :: os :: raw :: c_void , pub reserved569 : * mut :: std :: os :: raw :: c_void , pub reserved570 : * mut :: std :: os :: raw :: c_void , pub reserved571 : * mut :: std :: os :: raw :: c_void , pub reserved572 : * mut :: std :: os :: raw :: c_void , pub tcl_PkgRequireProc : :: std :: option :: Option < unsafe extern "C" fn (interp : * mut Tcl_Interp , name : * const :: std :: os :: raw :: c_char , objc : :: std :: os :: raw :: c_int , objv : * const * mut Tcl_Obj , clientDataPtr : * mut ClientData) -> :: std :: os :: raw :: c_int > , pub reserved574 : * mut :: std :: os :: raw :: c_void , pub reserved575 : * mut :: std :: os :: raw :: c_void , pub reserved576 : * mut :: std :: os :: raw :: c_void , pub reserved577 : * mut :: std :: os :: raw :: c_void , pub reserved578 : * mut :: std :: os :: raw :: c_void , pub reserved579 : * mut :: std :: os :: raw :: c_void , pub reserved580 : * mut :: std :: os :: raw :: c_void , pub reserved581 : * mut :: std :: os :: raw :: c_void , pub reserved582 : * mut :: std :: os :: raw :: c_void , pub reserved583 : * mut :: std :: os :: raw :: c_void , pub reserved584 : * mut :: std :: os :: raw :: c_void , pub reserved585 : * mut :: std :: os :: raw :: c_void , pub reserved586 : * mut :: std :: os :: raw :: c_void , pub reserved587 : * mut :: std :: os :: raw :: c_void , pub reserved588 : * mut :: std :: os :: raw :: c_void , pub reserved589 : * mut :: std :: os :: raw :: c_void , pub reserved590 : * mut :: std :: os :: raw :: c_void , pub reserved591 : * mut :: std :: os :: raw :: c_void , pub reserved592 : * mut :: std :: os :: raw :: c_void , pub reserved593 : * mut :: std :: os :: raw :: c_void , pub reserved594 : * mut :: std :: os :: raw :: c_void , pub reserved595 : * mut :: std :: os :: raw :: c_void , pub reserved596 : * mut :: std :: os :: raw :: c_void , pub reserved597 : * mut :: std :: os :: raw :: c_void , pub reserved598 : * mut :: std :: os :: raw :: c_void , pub reserved599 : * mut :: std :: os :: raw :: c_void , pub reserved600 : * mut :: std :: os :: raw :: c_void , pub reserved601 : * mut :: std :: os :: raw :: c_void , pub reserved602 : * mut :: std :: os :: raw :: c_void , pub reserved603 : * mut :: std :: os :: raw :: c_void , pub reserved604 : * mut :: std :: os :: raw :: c_void , pub reserved605 : * mut :: std :: os :: raw :: c_void , pub reserved606 : * mut :: std :: os :: raw :: c_void , pub reserved607 : * mut :: std :: os :: raw :: c_void , pub reserved608 : * mut :: std :: os :: raw :: c_void , pub reserved609 : * mut :: std :: os :: raw :: c_void , pub reserved610 : * mut :: std :: os :: raw :: c_void , pub reserved611 : * mut :: std :: os :: raw :: c_void , pub reserved612 : * mut :: std :: os :: raw :: c_void , pub reserved613 : * mut :: std :: os :: raw :: c_void , pub reserved614 : * mut :: std :: os :: raw :: c_void , pub reserved615 : * mut :: std :: os :: raw :: c_void , pub reserved616 : * mut :: std :: os :: raw :: c_void , pub reserved617 : * mut :: std :: os :: raw :: c_void , pub reserved618 : * mut :: std :: os :: raw :: c_void , pub reserved619 : * mut :: std :: os :: raw :: c_void , pub reserved620 : * mut :: std :: os :: raw :: c_void , pub reserved621 : * mut :: std :: os :: raw :: c_void , pub reserved622 : * mut :: std :: os :: raw :: c_void , pub reserved623 : * mut :: std :: os :: raw :: c_void , pub reserved624 : * mut :: std :: os :: raw :: c_void , pub reserved625 : * mut :: std :: os :: raw :: c_void , pub reserved626 : * mut :: std :: os :: raw :: c_void , pub reserved627 : * mut :: std :: os :: raw :: c_void , pub reserved628 : * mut :: std :: os :: raw :: c_void , pub reserved629 : * mut :: std :: os :: raw :: c_void , pub tclUnusedStubEntry : :: std :: option :: Option < unsafe extern "C" fn () > , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of TclStubs"] [:: std :: mem :: size_of :: < TclStubs > () - 5064usize] ; ["Alignment of TclStubs"] [:: std :: mem :: align_of :: < TclStubs > () - 8usize] ; ["Offset of field: TclStubs::magic"] [:: std :: mem :: offset_of ! (TclStubs , magic) - 0usize] ; ["Offset of field: TclStubs::hooks"] [:: std :: mem :: offset_of ! (TclStubs , hooks) - 8usize] ; ["Offset of field: TclStubs::tcl_PkgProvideEx"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PkgProvideEx) - 16usize] ; ["Offset of field: TclStubs::tcl_PkgRequireEx"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PkgRequireEx) - 24usize] ; ["Offset of field: TclStubs::tcl_Panic"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Panic) - 32usize] ; ["Offset of field: TclStubs::tcl_Alloc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Alloc) - 40usize] ; ["Offset of field: TclStubs::tcl_Free"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Free) - 48usize] ; ["Offset of field: TclStubs::tcl_Realloc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Realloc) - 56usize] ; ["Offset of field: TclStubs::tcl_DbCkalloc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbCkalloc) - 64usize] ; ["Offset of field: TclStubs::tcl_DbCkfree"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbCkfree) - 72usize] ; ["Offset of field: TclStubs::tcl_DbCkrealloc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbCkrealloc) - 80usize] ; ["Offset of field: TclStubs::tcl_CreateFileHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateFileHandler) - 88usize] ; ["Offset of field: TclStubs::tcl_DeleteFileHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteFileHandler) - 96usize] ; ["Offset of field: TclStubs::tcl_SetTimer"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetTimer) - 104usize] ; ["Offset of field: TclStubs::tcl_Sleep"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Sleep) - 112usize] ; ["Offset of field: TclStubs::tcl_WaitForEvent"] [:: std :: mem :: offset_of ! (TclStubs , tcl_WaitForEvent) - 120usize] ; ["Offset of field: TclStubs::tcl_AppendAllObjTypes"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendAllObjTypes) - 128usize] ; ["Offset of field: TclStubs::tcl_AppendStringsToObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendStringsToObj) - 136usize] ; ["Offset of field: TclStubs::tcl_AppendToObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendToObj) - 144usize] ; ["Offset of field: TclStubs::tcl_ConcatObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ConcatObj) - 152usize] ; ["Offset of field: TclStubs::tcl_ConvertToType"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ConvertToType) - 160usize] ; ["Offset of field: TclStubs::tcl_DbDecrRefCount"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbDecrRefCount) - 168usize] ; ["Offset of field: TclStubs::tcl_DbIncrRefCount"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbIncrRefCount) - 176usize] ; ["Offset of field: TclStubs::tcl_DbIsShared"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbIsShared) - 184usize] ; ["Offset of field: TclStubs::tcl_DbNewBooleanObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbNewBooleanObj) - 192usize] ; ["Offset of field: TclStubs::tcl_DbNewByteArrayObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbNewByteArrayObj) - 200usize] ; ["Offset of field: TclStubs::tcl_DbNewDoubleObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbNewDoubleObj) - 208usize] ; ["Offset of field: TclStubs::tcl_DbNewListObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbNewListObj) - 216usize] ; ["Offset of field: TclStubs::tcl_DbNewLongObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbNewLongObj) - 224usize] ; ["Offset of field: TclStubs::tcl_DbNewObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbNewObj) - 232usize] ; ["Offset of field: TclStubs::tcl_DbNewStringObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbNewStringObj) - 240usize] ; ["Offset of field: TclStubs::tcl_DuplicateObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DuplicateObj) - 248usize] ; ["Offset of field: TclStubs::tclFreeObj"] [:: std :: mem :: offset_of ! (TclStubs , tclFreeObj) - 256usize] ; ["Offset of field: TclStubs::tcl_GetBoolean"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetBoolean) - 264usize] ; ["Offset of field: TclStubs::tcl_GetBooleanFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetBooleanFromObj) - 272usize] ; ["Offset of field: TclStubs::tcl_GetByteArrayFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetByteArrayFromObj) - 280usize] ; ["Offset of field: TclStubs::tcl_GetDouble"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetDouble) - 288usize] ; ["Offset of field: TclStubs::tcl_GetDoubleFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetDoubleFromObj) - 296usize] ; ["Offset of field: TclStubs::tcl_GetIndexFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetIndexFromObj) - 304usize] ; ["Offset of field: TclStubs::tcl_GetInt"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetInt) - 312usize] ; ["Offset of field: TclStubs::tcl_GetIntFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetIntFromObj) - 320usize] ; ["Offset of field: TclStubs::tcl_GetLongFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetLongFromObj) - 328usize] ; ["Offset of field: TclStubs::tcl_GetObjType"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetObjType) - 336usize] ; ["Offset of field: TclStubs::tcl_GetStringFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetStringFromObj) - 344usize] ; ["Offset of field: TclStubs::tcl_InvalidateStringRep"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InvalidateStringRep) - 352usize] ; ["Offset of field: TclStubs::tcl_ListObjAppendList"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ListObjAppendList) - 360usize] ; ["Offset of field: TclStubs::tcl_ListObjAppendElement"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ListObjAppendElement) - 368usize] ; ["Offset of field: TclStubs::tcl_ListObjGetElements"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ListObjGetElements) - 376usize] ; ["Offset of field: TclStubs::tcl_ListObjIndex"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ListObjIndex) - 384usize] ; ["Offset of field: TclStubs::tcl_ListObjLength"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ListObjLength) - 392usize] ; ["Offset of field: TclStubs::tcl_ListObjReplace"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ListObjReplace) - 400usize] ; ["Offset of field: TclStubs::tcl_NewBooleanObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewBooleanObj) - 408usize] ; ["Offset of field: TclStubs::tcl_NewByteArrayObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewByteArrayObj) - 416usize] ; ["Offset of field: TclStubs::tcl_NewDoubleObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewDoubleObj) - 424usize] ; ["Offset of field: TclStubs::tcl_NewIntObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewIntObj) - 432usize] ; ["Offset of field: TclStubs::tcl_NewListObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewListObj) - 440usize] ; ["Offset of field: TclStubs::tcl_NewLongObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewLongObj) - 448usize] ; ["Offset of field: TclStubs::tcl_NewObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewObj) - 456usize] ; ["Offset of field: TclStubs::tcl_NewStringObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewStringObj) - 464usize] ; ["Offset of field: TclStubs::tcl_SetBooleanObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetBooleanObj) - 472usize] ; ["Offset of field: TclStubs::tcl_SetByteArrayLength"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetByteArrayLength) - 480usize] ; ["Offset of field: TclStubs::tcl_SetByteArrayObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetByteArrayObj) - 488usize] ; ["Offset of field: TclStubs::tcl_SetDoubleObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetDoubleObj) - 496usize] ; ["Offset of field: TclStubs::tcl_SetIntObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetIntObj) - 504usize] ; ["Offset of field: TclStubs::tcl_SetListObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetListObj) - 512usize] ; ["Offset of field: TclStubs::tcl_SetLongObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetLongObj) - 520usize] ; ["Offset of field: TclStubs::tcl_SetObjLength"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetObjLength) - 528usize] ; ["Offset of field: TclStubs::tcl_SetStringObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetStringObj) - 536usize] ; ["Offset of field: TclStubs::tcl_AddErrorInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AddErrorInfo) - 544usize] ; ["Offset of field: TclStubs::tcl_AddObjErrorInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AddObjErrorInfo) - 552usize] ; ["Offset of field: TclStubs::tcl_AllowExceptions"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AllowExceptions) - 560usize] ; ["Offset of field: TclStubs::tcl_AppendElement"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendElement) - 568usize] ; ["Offset of field: TclStubs::tcl_AppendResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendResult) - 576usize] ; ["Offset of field: TclStubs::tcl_AsyncCreate"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AsyncCreate) - 584usize] ; ["Offset of field: TclStubs::tcl_AsyncDelete"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AsyncDelete) - 592usize] ; ["Offset of field: TclStubs::tcl_AsyncInvoke"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AsyncInvoke) - 600usize] ; ["Offset of field: TclStubs::tcl_AsyncMark"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AsyncMark) - 608usize] ; ["Offset of field: TclStubs::tcl_AsyncReady"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AsyncReady) - 616usize] ; ["Offset of field: TclStubs::tcl_BackgroundError"] [:: std :: mem :: offset_of ! (TclStubs , tcl_BackgroundError) - 624usize] ; ["Offset of field: TclStubs::tcl_Backslash"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Backslash) - 632usize] ; ["Offset of field: TclStubs::tcl_BadChannelOption"] [:: std :: mem :: offset_of ! (TclStubs , tcl_BadChannelOption) - 640usize] ; ["Offset of field: TclStubs::tcl_CallWhenDeleted"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CallWhenDeleted) - 648usize] ; ["Offset of field: TclStubs::tcl_CancelIdleCall"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CancelIdleCall) - 656usize] ; ["Offset of field: TclStubs::tcl_Close"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Close) - 664usize] ; ["Offset of field: TclStubs::tcl_CommandComplete"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CommandComplete) - 672usize] ; ["Offset of field: TclStubs::tcl_Concat"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Concat) - 680usize] ; ["Offset of field: TclStubs::tcl_ConvertElement"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ConvertElement) - 688usize] ; ["Offset of field: TclStubs::tcl_ConvertCountedElement"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ConvertCountedElement) - 696usize] ; ["Offset of field: TclStubs::tcl_CreateAlias"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateAlias) - 704usize] ; ["Offset of field: TclStubs::tcl_CreateAliasObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateAliasObj) - 712usize] ; ["Offset of field: TclStubs::tcl_CreateChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateChannel) - 720usize] ; ["Offset of field: TclStubs::tcl_CreateChannelHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateChannelHandler) - 728usize] ; ["Offset of field: TclStubs::tcl_CreateCloseHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateCloseHandler) - 736usize] ; ["Offset of field: TclStubs::tcl_CreateCommand"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateCommand) - 744usize] ; ["Offset of field: TclStubs::tcl_CreateEventSource"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateEventSource) - 752usize] ; ["Offset of field: TclStubs::tcl_CreateExitHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateExitHandler) - 760usize] ; ["Offset of field: TclStubs::tcl_CreateInterp"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateInterp) - 768usize] ; ["Offset of field: TclStubs::tcl_CreateMathFunc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateMathFunc) - 776usize] ; ["Offset of field: TclStubs::tcl_CreateObjCommand"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateObjCommand) - 784usize] ; ["Offset of field: TclStubs::tcl_CreateSlave"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateSlave) - 792usize] ; ["Offset of field: TclStubs::tcl_CreateTimerHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateTimerHandler) - 800usize] ; ["Offset of field: TclStubs::tcl_CreateTrace"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateTrace) - 808usize] ; ["Offset of field: TclStubs::tcl_DeleteAssocData"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteAssocData) - 816usize] ; ["Offset of field: TclStubs::tcl_DeleteChannelHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteChannelHandler) - 824usize] ; ["Offset of field: TclStubs::tcl_DeleteCloseHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteCloseHandler) - 832usize] ; ["Offset of field: TclStubs::tcl_DeleteCommand"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteCommand) - 840usize] ; ["Offset of field: TclStubs::tcl_DeleteCommandFromToken"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteCommandFromToken) - 848usize] ; ["Offset of field: TclStubs::tcl_DeleteEvents"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteEvents) - 856usize] ; ["Offset of field: TclStubs::tcl_DeleteEventSource"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteEventSource) - 864usize] ; ["Offset of field: TclStubs::tcl_DeleteExitHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteExitHandler) - 872usize] ; ["Offset of field: TclStubs::tcl_DeleteHashEntry"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteHashEntry) - 880usize] ; ["Offset of field: TclStubs::tcl_DeleteHashTable"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteHashTable) - 888usize] ; ["Offset of field: TclStubs::tcl_DeleteInterp"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteInterp) - 896usize] ; ["Offset of field: TclStubs::tcl_DetachPids"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DetachPids) - 904usize] ; ["Offset of field: TclStubs::tcl_DeleteTimerHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteTimerHandler) - 912usize] ; ["Offset of field: TclStubs::tcl_DeleteTrace"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteTrace) - 920usize] ; ["Offset of field: TclStubs::tcl_DontCallWhenDeleted"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DontCallWhenDeleted) - 928usize] ; ["Offset of field: TclStubs::tcl_DoOneEvent"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DoOneEvent) - 936usize] ; ["Offset of field: TclStubs::tcl_DoWhenIdle"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DoWhenIdle) - 944usize] ; ["Offset of field: TclStubs::tcl_DStringAppend"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringAppend) - 952usize] ; ["Offset of field: TclStubs::tcl_DStringAppendElement"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringAppendElement) - 960usize] ; ["Offset of field: TclStubs::tcl_DStringEndSublist"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringEndSublist) - 968usize] ; ["Offset of field: TclStubs::tcl_DStringFree"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringFree) - 976usize] ; ["Offset of field: TclStubs::tcl_DStringGetResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringGetResult) - 984usize] ; ["Offset of field: TclStubs::tcl_DStringInit"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringInit) - 992usize] ; ["Offset of field: TclStubs::tcl_DStringResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringResult) - 1000usize] ; ["Offset of field: TclStubs::tcl_DStringSetLength"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringSetLength) - 1008usize] ; ["Offset of field: TclStubs::tcl_DStringStartSublist"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DStringStartSublist) - 1016usize] ; ["Offset of field: TclStubs::tcl_Eof"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Eof) - 1024usize] ; ["Offset of field: TclStubs::tcl_ErrnoId"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ErrnoId) - 1032usize] ; ["Offset of field: TclStubs::tcl_ErrnoMsg"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ErrnoMsg) - 1040usize] ; ["Offset of field: TclStubs::tcl_Eval"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Eval) - 1048usize] ; ["Offset of field: TclStubs::tcl_EvalFile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_EvalFile) - 1056usize] ; ["Offset of field: TclStubs::tcl_EvalObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_EvalObj) - 1064usize] ; ["Offset of field: TclStubs::tcl_EventuallyFree"] [:: std :: mem :: offset_of ! (TclStubs , tcl_EventuallyFree) - 1072usize] ; ["Offset of field: TclStubs::tcl_Exit"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Exit) - 1080usize] ; ["Offset of field: TclStubs::tcl_ExposeCommand"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExposeCommand) - 1088usize] ; ["Offset of field: TclStubs::tcl_ExprBoolean"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExprBoolean) - 1096usize] ; ["Offset of field: TclStubs::tcl_ExprBooleanObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExprBooleanObj) - 1104usize] ; ["Offset of field: TclStubs::tcl_ExprDouble"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExprDouble) - 1112usize] ; ["Offset of field: TclStubs::tcl_ExprDoubleObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExprDoubleObj) - 1120usize] ; ["Offset of field: TclStubs::tcl_ExprLong"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExprLong) - 1128usize] ; ["Offset of field: TclStubs::tcl_ExprLongObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExprLongObj) - 1136usize] ; ["Offset of field: TclStubs::tcl_ExprObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExprObj) - 1144usize] ; ["Offset of field: TclStubs::tcl_ExprString"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExprString) - 1152usize] ; ["Offset of field: TclStubs::tcl_Finalize"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Finalize) - 1160usize] ; ["Offset of field: TclStubs::tcl_FindExecutable"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FindExecutable) - 1168usize] ; ["Offset of field: TclStubs::tcl_FirstHashEntry"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FirstHashEntry) - 1176usize] ; ["Offset of field: TclStubs::tcl_Flush"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Flush) - 1184usize] ; ["Offset of field: TclStubs::tcl_FreeResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FreeResult) - 1192usize] ; ["Offset of field: TclStubs::tcl_GetAlias"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetAlias) - 1200usize] ; ["Offset of field: TclStubs::tcl_GetAliasObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetAliasObj) - 1208usize] ; ["Offset of field: TclStubs::tcl_GetAssocData"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetAssocData) - 1216usize] ; ["Offset of field: TclStubs::tcl_GetChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannel) - 1224usize] ; ["Offset of field: TclStubs::tcl_GetChannelBufferSize"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelBufferSize) - 1232usize] ; ["Offset of field: TclStubs::tcl_GetChannelHandle"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelHandle) - 1240usize] ; ["Offset of field: TclStubs::tcl_GetChannelInstanceData"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelInstanceData) - 1248usize] ; ["Offset of field: TclStubs::tcl_GetChannelMode"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelMode) - 1256usize] ; ["Offset of field: TclStubs::tcl_GetChannelName"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelName) - 1264usize] ; ["Offset of field: TclStubs::tcl_GetChannelOption"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelOption) - 1272usize] ; ["Offset of field: TclStubs::tcl_GetChannelType"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelType) - 1280usize] ; ["Offset of field: TclStubs::tcl_GetCommandInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetCommandInfo) - 1288usize] ; ["Offset of field: TclStubs::tcl_GetCommandName"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetCommandName) - 1296usize] ; ["Offset of field: TclStubs::tcl_GetErrno"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetErrno) - 1304usize] ; ["Offset of field: TclStubs::tcl_GetHostName"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetHostName) - 1312usize] ; ["Offset of field: TclStubs::tcl_GetInterpPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetInterpPath) - 1320usize] ; ["Offset of field: TclStubs::tcl_GetMaster"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetMaster) - 1328usize] ; ["Offset of field: TclStubs::tcl_GetNameOfExecutable"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetNameOfExecutable) - 1336usize] ; ["Offset of field: TclStubs::tcl_GetObjResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetObjResult) - 1344usize] ; ["Offset of field: TclStubs::tcl_GetOpenFile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetOpenFile) - 1352usize] ; ["Offset of field: TclStubs::tcl_GetPathType"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetPathType) - 1360usize] ; ["Offset of field: TclStubs::tcl_Gets"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Gets) - 1368usize] ; ["Offset of field: TclStubs::tcl_GetsObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetsObj) - 1376usize] ; ["Offset of field: TclStubs::tcl_GetServiceMode"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetServiceMode) - 1384usize] ; ["Offset of field: TclStubs::tcl_GetSlave"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetSlave) - 1392usize] ; ["Offset of field: TclStubs::tcl_GetStdChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetStdChannel) - 1400usize] ; ["Offset of field: TclStubs::tcl_GetStringResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetStringResult) - 1408usize] ; ["Offset of field: TclStubs::tcl_GetVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetVar) - 1416usize] ; ["Offset of field: TclStubs::tcl_GetVar2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetVar2) - 1424usize] ; ["Offset of field: TclStubs::tcl_GlobalEval"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GlobalEval) - 1432usize] ; ["Offset of field: TclStubs::tcl_GlobalEvalObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GlobalEvalObj) - 1440usize] ; ["Offset of field: TclStubs::tcl_HideCommand"] [:: std :: mem :: offset_of ! (TclStubs , tcl_HideCommand) - 1448usize] ; ["Offset of field: TclStubs::tcl_Init"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Init) - 1456usize] ; ["Offset of field: TclStubs::tcl_InitHashTable"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InitHashTable) - 1464usize] ; ["Offset of field: TclStubs::tcl_InputBlocked"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InputBlocked) - 1472usize] ; ["Offset of field: TclStubs::tcl_InputBuffered"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InputBuffered) - 1480usize] ; ["Offset of field: TclStubs::tcl_InterpDeleted"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InterpDeleted) - 1488usize] ; ["Offset of field: TclStubs::tcl_IsSafe"] [:: std :: mem :: offset_of ! (TclStubs , tcl_IsSafe) - 1496usize] ; ["Offset of field: TclStubs::tcl_JoinPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_JoinPath) - 1504usize] ; ["Offset of field: TclStubs::tcl_LinkVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_LinkVar) - 1512usize] ; ["Offset of field: TclStubs::reserved188"] [:: std :: mem :: offset_of ! (TclStubs , reserved188) - 1520usize] ; ["Offset of field: TclStubs::tcl_MakeFileChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_MakeFileChannel) - 1528usize] ; ["Offset of field: TclStubs::tcl_MakeSafe"] [:: std :: mem :: offset_of ! (TclStubs , tcl_MakeSafe) - 1536usize] ; ["Offset of field: TclStubs::tcl_MakeTcpClientChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_MakeTcpClientChannel) - 1544usize] ; ["Offset of field: TclStubs::tcl_Merge"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Merge) - 1552usize] ; ["Offset of field: TclStubs::tcl_NextHashEntry"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NextHashEntry) - 1560usize] ; ["Offset of field: TclStubs::tcl_NotifyChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NotifyChannel) - 1568usize] ; ["Offset of field: TclStubs::tcl_ObjGetVar2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ObjGetVar2) - 1576usize] ; ["Offset of field: TclStubs::tcl_ObjSetVar2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ObjSetVar2) - 1584usize] ; ["Offset of field: TclStubs::tcl_OpenCommandChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_OpenCommandChannel) - 1592usize] ; ["Offset of field: TclStubs::tcl_OpenFileChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_OpenFileChannel) - 1600usize] ; ["Offset of field: TclStubs::tcl_OpenTcpClient"] [:: std :: mem :: offset_of ! (TclStubs , tcl_OpenTcpClient) - 1608usize] ; ["Offset of field: TclStubs::tcl_OpenTcpServer"] [:: std :: mem :: offset_of ! (TclStubs , tcl_OpenTcpServer) - 1616usize] ; ["Offset of field: TclStubs::tcl_Preserve"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Preserve) - 1624usize] ; ["Offset of field: TclStubs::tcl_PrintDouble"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PrintDouble) - 1632usize] ; ["Offset of field: TclStubs::tcl_PutEnv"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PutEnv) - 1640usize] ; ["Offset of field: TclStubs::tcl_PosixError"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PosixError) - 1648usize] ; ["Offset of field: TclStubs::tcl_QueueEvent"] [:: std :: mem :: offset_of ! (TclStubs , tcl_QueueEvent) - 1656usize] ; ["Offset of field: TclStubs::tcl_Read"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Read) - 1664usize] ; ["Offset of field: TclStubs::tcl_ReapDetachedProcs"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ReapDetachedProcs) - 1672usize] ; ["Offset of field: TclStubs::tcl_RecordAndEval"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RecordAndEval) - 1680usize] ; ["Offset of field: TclStubs::tcl_RecordAndEvalObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RecordAndEvalObj) - 1688usize] ; ["Offset of field: TclStubs::tcl_RegisterChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegisterChannel) - 1696usize] ; ["Offset of field: TclStubs::tcl_RegisterObjType"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegisterObjType) - 1704usize] ; ["Offset of field: TclStubs::tcl_RegExpCompile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegExpCompile) - 1712usize] ; ["Offset of field: TclStubs::tcl_RegExpExec"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegExpExec) - 1720usize] ; ["Offset of field: TclStubs::tcl_RegExpMatch"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegExpMatch) - 1728usize] ; ["Offset of field: TclStubs::tcl_RegExpRange"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegExpRange) - 1736usize] ; ["Offset of field: TclStubs::tcl_Release"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Release) - 1744usize] ; ["Offset of field: TclStubs::tcl_ResetResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ResetResult) - 1752usize] ; ["Offset of field: TclStubs::tcl_ScanElement"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ScanElement) - 1760usize] ; ["Offset of field: TclStubs::tcl_ScanCountedElement"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ScanCountedElement) - 1768usize] ; ["Offset of field: TclStubs::tcl_SeekOld"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SeekOld) - 1776usize] ; ["Offset of field: TclStubs::tcl_ServiceAll"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ServiceAll) - 1784usize] ; ["Offset of field: TclStubs::tcl_ServiceEvent"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ServiceEvent) - 1792usize] ; ["Offset of field: TclStubs::tcl_SetAssocData"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetAssocData) - 1800usize] ; ["Offset of field: TclStubs::tcl_SetChannelBufferSize"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetChannelBufferSize) - 1808usize] ; ["Offset of field: TclStubs::tcl_SetChannelOption"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetChannelOption) - 1816usize] ; ["Offset of field: TclStubs::tcl_SetCommandInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetCommandInfo) - 1824usize] ; ["Offset of field: TclStubs::tcl_SetErrno"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetErrno) - 1832usize] ; ["Offset of field: TclStubs::tcl_SetErrorCode"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetErrorCode) - 1840usize] ; ["Offset of field: TclStubs::tcl_SetMaxBlockTime"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetMaxBlockTime) - 1848usize] ; ["Offset of field: TclStubs::tcl_SetPanicProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetPanicProc) - 1856usize] ; ["Offset of field: TclStubs::tcl_SetRecursionLimit"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetRecursionLimit) - 1864usize] ; ["Offset of field: TclStubs::tcl_SetResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetResult) - 1872usize] ; ["Offset of field: TclStubs::tcl_SetServiceMode"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetServiceMode) - 1880usize] ; ["Offset of field: TclStubs::tcl_SetObjErrorCode"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetObjErrorCode) - 1888usize] ; ["Offset of field: TclStubs::tcl_SetObjResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetObjResult) - 1896usize] ; ["Offset of field: TclStubs::tcl_SetStdChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetStdChannel) - 1904usize] ; ["Offset of field: TclStubs::tcl_SetVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetVar) - 1912usize] ; ["Offset of field: TclStubs::tcl_SetVar2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetVar2) - 1920usize] ; ["Offset of field: TclStubs::tcl_SignalId"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SignalId) - 1928usize] ; ["Offset of field: TclStubs::tcl_SignalMsg"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SignalMsg) - 1936usize] ; ["Offset of field: TclStubs::tcl_SourceRCFile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SourceRCFile) - 1944usize] ; ["Offset of field: TclStubs::tcl_SplitList"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SplitList) - 1952usize] ; ["Offset of field: TclStubs::tcl_SplitPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SplitPath) - 1960usize] ; ["Offset of field: TclStubs::tcl_StaticPackage"] [:: std :: mem :: offset_of ! (TclStubs , tcl_StaticPackage) - 1968usize] ; ["Offset of field: TclStubs::tcl_StringMatch"] [:: std :: mem :: offset_of ! (TclStubs , tcl_StringMatch) - 1976usize] ; ["Offset of field: TclStubs::tcl_TellOld"] [:: std :: mem :: offset_of ! (TclStubs , tcl_TellOld) - 1984usize] ; ["Offset of field: TclStubs::tcl_TraceVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_TraceVar) - 1992usize] ; ["Offset of field: TclStubs::tcl_TraceVar2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_TraceVar2) - 2000usize] ; ["Offset of field: TclStubs::tcl_TranslateFileName"] [:: std :: mem :: offset_of ! (TclStubs , tcl_TranslateFileName) - 2008usize] ; ["Offset of field: TclStubs::tcl_Ungets"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Ungets) - 2016usize] ; ["Offset of field: TclStubs::tcl_UnlinkVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UnlinkVar) - 2024usize] ; ["Offset of field: TclStubs::tcl_UnregisterChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UnregisterChannel) - 2032usize] ; ["Offset of field: TclStubs::tcl_UnsetVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UnsetVar) - 2040usize] ; ["Offset of field: TclStubs::tcl_UnsetVar2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UnsetVar2) - 2048usize] ; ["Offset of field: TclStubs::tcl_UntraceVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UntraceVar) - 2056usize] ; ["Offset of field: TclStubs::tcl_UntraceVar2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UntraceVar2) - 2064usize] ; ["Offset of field: TclStubs::tcl_UpdateLinkedVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UpdateLinkedVar) - 2072usize] ; ["Offset of field: TclStubs::tcl_UpVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UpVar) - 2080usize] ; ["Offset of field: TclStubs::tcl_UpVar2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UpVar2) - 2088usize] ; ["Offset of field: TclStubs::tcl_VarEval"] [:: std :: mem :: offset_of ! (TclStubs , tcl_VarEval) - 2096usize] ; ["Offset of field: TclStubs::tcl_VarTraceInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_VarTraceInfo) - 2104usize] ; ["Offset of field: TclStubs::tcl_VarTraceInfo2"] [:: std :: mem :: offset_of ! (TclStubs , tcl_VarTraceInfo2) - 2112usize] ; ["Offset of field: TclStubs::tcl_Write"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Write) - 2120usize] ; ["Offset of field: TclStubs::tcl_WrongNumArgs"] [:: std :: mem :: offset_of ! (TclStubs , tcl_WrongNumArgs) - 2128usize] ; ["Offset of field: TclStubs::tcl_DumpActiveMemory"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DumpActiveMemory) - 2136usize] ; ["Offset of field: TclStubs::tcl_ValidateAllMemory"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ValidateAllMemory) - 2144usize] ; ["Offset of field: TclStubs::tcl_AppendResultVA"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendResultVA) - 2152usize] ; ["Offset of field: TclStubs::tcl_AppendStringsToObjVA"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendStringsToObjVA) - 2160usize] ; ["Offset of field: TclStubs::tcl_HashStats"] [:: std :: mem :: offset_of ! (TclStubs , tcl_HashStats) - 2168usize] ; ["Offset of field: TclStubs::tcl_ParseVar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ParseVar) - 2176usize] ; ["Offset of field: TclStubs::tcl_PkgPresent"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PkgPresent) - 2184usize] ; ["Offset of field: TclStubs::tcl_PkgPresentEx"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PkgPresentEx) - 2192usize] ; ["Offset of field: TclStubs::tcl_PkgProvide"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PkgProvide) - 2200usize] ; ["Offset of field: TclStubs::tcl_PkgRequire"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PkgRequire) - 2208usize] ; ["Offset of field: TclStubs::tcl_SetErrorCodeVA"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetErrorCodeVA) - 2216usize] ; ["Offset of field: TclStubs::tcl_VarEvalVA"] [:: std :: mem :: offset_of ! (TclStubs , tcl_VarEvalVA) - 2224usize] ; ["Offset of field: TclStubs::tcl_WaitPid"] [:: std :: mem :: offset_of ! (TclStubs , tcl_WaitPid) - 2232usize] ; ["Offset of field: TclStubs::tcl_PanicVA"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PanicVA) - 2240usize] ; ["Offset of field: TclStubs::tcl_GetVersion"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetVersion) - 2248usize] ; ["Offset of field: TclStubs::tcl_InitMemory"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InitMemory) - 2256usize] ; ["Offset of field: TclStubs::tcl_StackChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_StackChannel) - 2264usize] ; ["Offset of field: TclStubs::tcl_UnstackChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UnstackChannel) - 2272usize] ; ["Offset of field: TclStubs::tcl_GetStackedChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetStackedChannel) - 2280usize] ; ["Offset of field: TclStubs::tcl_SetMainLoop"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetMainLoop) - 2288usize] ; ["Offset of field: TclStubs::reserved285"] [:: std :: mem :: offset_of ! (TclStubs , reserved285) - 2296usize] ; ["Offset of field: TclStubs::tcl_AppendObjToObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendObjToObj) - 2304usize] ; ["Offset of field: TclStubs::tcl_CreateEncoding"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateEncoding) - 2312usize] ; ["Offset of field: TclStubs::tcl_CreateThreadExitHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateThreadExitHandler) - 2320usize] ; ["Offset of field: TclStubs::tcl_DeleteThreadExitHandler"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DeleteThreadExitHandler) - 2328usize] ; ["Offset of field: TclStubs::tcl_DiscardResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DiscardResult) - 2336usize] ; ["Offset of field: TclStubs::tcl_EvalEx"] [:: std :: mem :: offset_of ! (TclStubs , tcl_EvalEx) - 2344usize] ; ["Offset of field: TclStubs::tcl_EvalObjv"] [:: std :: mem :: offset_of ! (TclStubs , tcl_EvalObjv) - 2352usize] ; ["Offset of field: TclStubs::tcl_EvalObjEx"] [:: std :: mem :: offset_of ! (TclStubs , tcl_EvalObjEx) - 2360usize] ; ["Offset of field: TclStubs::tcl_ExitThread"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExitThread) - 2368usize] ; ["Offset of field: TclStubs::tcl_ExternalToUtf"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExternalToUtf) - 2376usize] ; ["Offset of field: TclStubs::tcl_ExternalToUtfDString"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ExternalToUtfDString) - 2384usize] ; ["Offset of field: TclStubs::tcl_FinalizeThread"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FinalizeThread) - 2392usize] ; ["Offset of field: TclStubs::tcl_FinalizeNotifier"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FinalizeNotifier) - 2400usize] ; ["Offset of field: TclStubs::tcl_FreeEncoding"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FreeEncoding) - 2408usize] ; ["Offset of field: TclStubs::tcl_GetCurrentThread"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetCurrentThread) - 2416usize] ; ["Offset of field: TclStubs::tcl_GetEncoding"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetEncoding) - 2424usize] ; ["Offset of field: TclStubs::tcl_GetEncodingName"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetEncodingName) - 2432usize] ; ["Offset of field: TclStubs::tcl_GetEncodingNames"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetEncodingNames) - 2440usize] ; ["Offset of field: TclStubs::tcl_GetIndexFromObjStruct"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetIndexFromObjStruct) - 2448usize] ; ["Offset of field: TclStubs::tcl_GetThreadData"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetThreadData) - 2456usize] ; ["Offset of field: TclStubs::tcl_GetVar2Ex"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetVar2Ex) - 2464usize] ; ["Offset of field: TclStubs::tcl_InitNotifier"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InitNotifier) - 2472usize] ; ["Offset of field: TclStubs::tcl_MutexLock"] [:: std :: mem :: offset_of ! (TclStubs , tcl_MutexLock) - 2480usize] ; ["Offset of field: TclStubs::tcl_MutexUnlock"] [:: std :: mem :: offset_of ! (TclStubs , tcl_MutexUnlock) - 2488usize] ; ["Offset of field: TclStubs::tcl_ConditionNotify"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ConditionNotify) - 2496usize] ; ["Offset of field: TclStubs::tcl_ConditionWait"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ConditionWait) - 2504usize] ; ["Offset of field: TclStubs::tcl_NumUtfChars"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NumUtfChars) - 2512usize] ; ["Offset of field: TclStubs::tcl_ReadChars"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ReadChars) - 2520usize] ; ["Offset of field: TclStubs::tcl_RestoreResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RestoreResult) - 2528usize] ; ["Offset of field: TclStubs::tcl_SaveResult"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SaveResult) - 2536usize] ; ["Offset of field: TclStubs::tcl_SetSystemEncoding"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetSystemEncoding) - 2544usize] ; ["Offset of field: TclStubs::tcl_SetVar2Ex"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetVar2Ex) - 2552usize] ; ["Offset of field: TclStubs::tcl_ThreadAlert"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ThreadAlert) - 2560usize] ; ["Offset of field: TclStubs::tcl_ThreadQueueEvent"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ThreadQueueEvent) - 2568usize] ; ["Offset of field: TclStubs::tcl_UniCharAtIndex"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharAtIndex) - 2576usize] ; ["Offset of field: TclStubs::tcl_UniCharToLower"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharToLower) - 2584usize] ; ["Offset of field: TclStubs::tcl_UniCharToTitle"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharToTitle) - 2592usize] ; ["Offset of field: TclStubs::tcl_UniCharToUpper"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharToUpper) - 2600usize] ; ["Offset of field: TclStubs::tcl_UniCharToUtf"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharToUtf) - 2608usize] ; ["Offset of field: TclStubs::tcl_UtfAtIndex"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfAtIndex) - 2616usize] ; ["Offset of field: TclStubs::tcl_UtfCharComplete"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfCharComplete) - 2624usize] ; ["Offset of field: TclStubs::tcl_UtfBackslash"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfBackslash) - 2632usize] ; ["Offset of field: TclStubs::tcl_UtfFindFirst"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfFindFirst) - 2640usize] ; ["Offset of field: TclStubs::tcl_UtfFindLast"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfFindLast) - 2648usize] ; ["Offset of field: TclStubs::tcl_UtfNext"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfNext) - 2656usize] ; ["Offset of field: TclStubs::tcl_UtfPrev"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfPrev) - 2664usize] ; ["Offset of field: TclStubs::tcl_UtfToExternal"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfToExternal) - 2672usize] ; ["Offset of field: TclStubs::tcl_UtfToExternalDString"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfToExternalDString) - 2680usize] ; ["Offset of field: TclStubs::tcl_UtfToLower"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfToLower) - 2688usize] ; ["Offset of field: TclStubs::tcl_UtfToTitle"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfToTitle) - 2696usize] ; ["Offset of field: TclStubs::tcl_UtfToUniChar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfToUniChar) - 2704usize] ; ["Offset of field: TclStubs::tcl_UtfToUpper"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfToUpper) - 2712usize] ; ["Offset of field: TclStubs::tcl_WriteChars"] [:: std :: mem :: offset_of ! (TclStubs , tcl_WriteChars) - 2720usize] ; ["Offset of field: TclStubs::tcl_WriteObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_WriteObj) - 2728usize] ; ["Offset of field: TclStubs::tcl_GetString"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetString) - 2736usize] ; ["Offset of field: TclStubs::tcl_GetDefaultEncodingDir"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetDefaultEncodingDir) - 2744usize] ; ["Offset of field: TclStubs::tcl_SetDefaultEncodingDir"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetDefaultEncodingDir) - 2752usize] ; ["Offset of field: TclStubs::tcl_AlertNotifier"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AlertNotifier) - 2760usize] ; ["Offset of field: TclStubs::tcl_ServiceModeHook"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ServiceModeHook) - 2768usize] ; ["Offset of field: TclStubs::tcl_UniCharIsAlnum"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsAlnum) - 2776usize] ; ["Offset of field: TclStubs::tcl_UniCharIsAlpha"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsAlpha) - 2784usize] ; ["Offset of field: TclStubs::tcl_UniCharIsDigit"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsDigit) - 2792usize] ; ["Offset of field: TclStubs::tcl_UniCharIsLower"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsLower) - 2800usize] ; ["Offset of field: TclStubs::tcl_UniCharIsSpace"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsSpace) - 2808usize] ; ["Offset of field: TclStubs::tcl_UniCharIsUpper"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsUpper) - 2816usize] ; ["Offset of field: TclStubs::tcl_UniCharIsWordChar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsWordChar) - 2824usize] ; ["Offset of field: TclStubs::tcl_UniCharLen"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharLen) - 2832usize] ; ["Offset of field: TclStubs::tcl_UniCharNcmp"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharNcmp) - 2840usize] ; ["Offset of field: TclStubs::tcl_UniCharToUtfDString"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharToUtfDString) - 2848usize] ; ["Offset of field: TclStubs::tcl_UtfToUniCharDString"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfToUniCharDString) - 2856usize] ; ["Offset of field: TclStubs::tcl_GetRegExpFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetRegExpFromObj) - 2864usize] ; ["Offset of field: TclStubs::tcl_EvalTokens"] [:: std :: mem :: offset_of ! (TclStubs , tcl_EvalTokens) - 2872usize] ; ["Offset of field: TclStubs::tcl_FreeParse"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FreeParse) - 2880usize] ; ["Offset of field: TclStubs::tcl_LogCommandInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_LogCommandInfo) - 2888usize] ; ["Offset of field: TclStubs::tcl_ParseBraces"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ParseBraces) - 2896usize] ; ["Offset of field: TclStubs::tcl_ParseCommand"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ParseCommand) - 2904usize] ; ["Offset of field: TclStubs::tcl_ParseExpr"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ParseExpr) - 2912usize] ; ["Offset of field: TclStubs::tcl_ParseQuotedString"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ParseQuotedString) - 2920usize] ; ["Offset of field: TclStubs::tcl_ParseVarName"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ParseVarName) - 2928usize] ; ["Offset of field: TclStubs::tcl_GetCwd"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetCwd) - 2936usize] ; ["Offset of field: TclStubs::tcl_Chdir"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Chdir) - 2944usize] ; ["Offset of field: TclStubs::tcl_Access"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Access) - 2952usize] ; ["Offset of field: TclStubs::tcl_Stat"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Stat) - 2960usize] ; ["Offset of field: TclStubs::tcl_UtfNcmp"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfNcmp) - 2968usize] ; ["Offset of field: TclStubs::tcl_UtfNcasecmp"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UtfNcasecmp) - 2976usize] ; ["Offset of field: TclStubs::tcl_StringCaseMatch"] [:: std :: mem :: offset_of ! (TclStubs , tcl_StringCaseMatch) - 2984usize] ; ["Offset of field: TclStubs::tcl_UniCharIsControl"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsControl) - 2992usize] ; ["Offset of field: TclStubs::tcl_UniCharIsGraph"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsGraph) - 3000usize] ; ["Offset of field: TclStubs::tcl_UniCharIsPrint"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsPrint) - 3008usize] ; ["Offset of field: TclStubs::tcl_UniCharIsPunct"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharIsPunct) - 3016usize] ; ["Offset of field: TclStubs::tcl_RegExpExecObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegExpExecObj) - 3024usize] ; ["Offset of field: TclStubs::tcl_RegExpGetInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegExpGetInfo) - 3032usize] ; ["Offset of field: TclStubs::tcl_NewUnicodeObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewUnicodeObj) - 3040usize] ; ["Offset of field: TclStubs::tcl_SetUnicodeObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetUnicodeObj) - 3048usize] ; ["Offset of field: TclStubs::tcl_GetCharLength"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetCharLength) - 3056usize] ; ["Offset of field: TclStubs::tcl_GetUniChar"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetUniChar) - 3064usize] ; ["Offset of field: TclStubs::tcl_GetUnicode"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetUnicode) - 3072usize] ; ["Offset of field: TclStubs::tcl_GetRange"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetRange) - 3080usize] ; ["Offset of field: TclStubs::tcl_AppendUnicodeToObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AppendUnicodeToObj) - 3088usize] ; ["Offset of field: TclStubs::tcl_RegExpMatchObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_RegExpMatchObj) - 3096usize] ; ["Offset of field: TclStubs::tcl_SetNotifier"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetNotifier) - 3104usize] ; ["Offset of field: TclStubs::tcl_GetAllocMutex"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetAllocMutex) - 3112usize] ; ["Offset of field: TclStubs::tcl_GetChannelNames"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelNames) - 3120usize] ; ["Offset of field: TclStubs::tcl_GetChannelNamesEx"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelNamesEx) - 3128usize] ; ["Offset of field: TclStubs::tcl_ProcObjCmd"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ProcObjCmd) - 3136usize] ; ["Offset of field: TclStubs::tcl_ConditionFinalize"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ConditionFinalize) - 3144usize] ; ["Offset of field: TclStubs::tcl_MutexFinalize"] [:: std :: mem :: offset_of ! (TclStubs , tcl_MutexFinalize) - 3152usize] ; ["Offset of field: TclStubs::tcl_CreateThread"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateThread) - 3160usize] ; ["Offset of field: TclStubs::tcl_ReadRaw"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ReadRaw) - 3168usize] ; ["Offset of field: TclStubs::tcl_WriteRaw"] [:: std :: mem :: offset_of ! (TclStubs , tcl_WriteRaw) - 3176usize] ; ["Offset of field: TclStubs::tcl_GetTopChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetTopChannel) - 3184usize] ; ["Offset of field: TclStubs::tcl_ChannelBuffered"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelBuffered) - 3192usize] ; ["Offset of field: TclStubs::tcl_ChannelName"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelName) - 3200usize] ; ["Offset of field: TclStubs::tcl_ChannelVersion"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelVersion) - 3208usize] ; ["Offset of field: TclStubs::tcl_ChannelBlockModeProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelBlockModeProc) - 3216usize] ; ["Offset of field: TclStubs::tcl_ChannelCloseProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelCloseProc) - 3224usize] ; ["Offset of field: TclStubs::tcl_ChannelClose2Proc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelClose2Proc) - 3232usize] ; ["Offset of field: TclStubs::tcl_ChannelInputProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelInputProc) - 3240usize] ; ["Offset of field: TclStubs::tcl_ChannelOutputProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelOutputProc) - 3248usize] ; ["Offset of field: TclStubs::tcl_ChannelSeekProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelSeekProc) - 3256usize] ; ["Offset of field: TclStubs::tcl_ChannelSetOptionProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelSetOptionProc) - 3264usize] ; ["Offset of field: TclStubs::tcl_ChannelGetOptionProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelGetOptionProc) - 3272usize] ; ["Offset of field: TclStubs::tcl_ChannelWatchProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelWatchProc) - 3280usize] ; ["Offset of field: TclStubs::tcl_ChannelGetHandleProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelGetHandleProc) - 3288usize] ; ["Offset of field: TclStubs::tcl_ChannelFlushProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelFlushProc) - 3296usize] ; ["Offset of field: TclStubs::tcl_ChannelHandlerProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelHandlerProc) - 3304usize] ; ["Offset of field: TclStubs::tcl_JoinThread"] [:: std :: mem :: offset_of ! (TclStubs , tcl_JoinThread) - 3312usize] ; ["Offset of field: TclStubs::tcl_IsChannelShared"] [:: std :: mem :: offset_of ! (TclStubs , tcl_IsChannelShared) - 3320usize] ; ["Offset of field: TclStubs::tcl_IsChannelRegistered"] [:: std :: mem :: offset_of ! (TclStubs , tcl_IsChannelRegistered) - 3328usize] ; ["Offset of field: TclStubs::tcl_CutChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CutChannel) - 3336usize] ; ["Offset of field: TclStubs::tcl_SpliceChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SpliceChannel) - 3344usize] ; ["Offset of field: TclStubs::tcl_ClearChannelHandlers"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ClearChannelHandlers) - 3352usize] ; ["Offset of field: TclStubs::tcl_IsChannelExisting"] [:: std :: mem :: offset_of ! (TclStubs , tcl_IsChannelExisting) - 3360usize] ; ["Offset of field: TclStubs::tcl_UniCharNcasecmp"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharNcasecmp) - 3368usize] ; ["Offset of field: TclStubs::tcl_UniCharCaseMatch"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UniCharCaseMatch) - 3376usize] ; ["Offset of field: TclStubs::tcl_FindHashEntry"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FindHashEntry) - 3384usize] ; ["Offset of field: TclStubs::tcl_CreateHashEntry"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateHashEntry) - 3392usize] ; ["Offset of field: TclStubs::tcl_InitCustomHashTable"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InitCustomHashTable) - 3400usize] ; ["Offset of field: TclStubs::tcl_InitObjHashTable"] [:: std :: mem :: offset_of ! (TclStubs , tcl_InitObjHashTable) - 3408usize] ; ["Offset of field: TclStubs::tcl_CommandTraceInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CommandTraceInfo) - 3416usize] ; ["Offset of field: TclStubs::tcl_TraceCommand"] [:: std :: mem :: offset_of ! (TclStubs , tcl_TraceCommand) - 3424usize] ; ["Offset of field: TclStubs::tcl_UntraceCommand"] [:: std :: mem :: offset_of ! (TclStubs , tcl_UntraceCommand) - 3432usize] ; ["Offset of field: TclStubs::tcl_AttemptAlloc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AttemptAlloc) - 3440usize] ; ["Offset of field: TclStubs::tcl_AttemptDbCkalloc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AttemptDbCkalloc) - 3448usize] ; ["Offset of field: TclStubs::tcl_AttemptRealloc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AttemptRealloc) - 3456usize] ; ["Offset of field: TclStubs::tcl_AttemptDbCkrealloc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AttemptDbCkrealloc) - 3464usize] ; ["Offset of field: TclStubs::tcl_AttemptSetObjLength"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AttemptSetObjLength) - 3472usize] ; ["Offset of field: TclStubs::tcl_GetChannelThread"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetChannelThread) - 3480usize] ; ["Offset of field: TclStubs::tcl_GetUnicodeFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetUnicodeFromObj) - 3488usize] ; ["Offset of field: TclStubs::tcl_GetMathFuncInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetMathFuncInfo) - 3496usize] ; ["Offset of field: TclStubs::tcl_ListMathFuncs"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ListMathFuncs) - 3504usize] ; ["Offset of field: TclStubs::tcl_SubstObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SubstObj) - 3512usize] ; ["Offset of field: TclStubs::tcl_DetachChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DetachChannel) - 3520usize] ; ["Offset of field: TclStubs::tcl_IsStandardChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_IsStandardChannel) - 3528usize] ; ["Offset of field: TclStubs::tcl_FSCopyFile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSCopyFile) - 3536usize] ; ["Offset of field: TclStubs::tcl_FSCopyDirectory"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSCopyDirectory) - 3544usize] ; ["Offset of field: TclStubs::tcl_FSCreateDirectory"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSCreateDirectory) - 3552usize] ; ["Offset of field: TclStubs::tcl_FSDeleteFile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSDeleteFile) - 3560usize] ; ["Offset of field: TclStubs::tcl_FSLoadFile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSLoadFile) - 3568usize] ; ["Offset of field: TclStubs::tcl_FSMatchInDirectory"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSMatchInDirectory) - 3576usize] ; ["Offset of field: TclStubs::tcl_FSLink"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSLink) - 3584usize] ; ["Offset of field: TclStubs::tcl_FSRemoveDirectory"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSRemoveDirectory) - 3592usize] ; ["Offset of field: TclStubs::tcl_FSRenameFile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSRenameFile) - 3600usize] ; ["Offset of field: TclStubs::tcl_FSLstat"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSLstat) - 3608usize] ; ["Offset of field: TclStubs::tcl_FSUtime"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSUtime) - 3616usize] ; ["Offset of field: TclStubs::tcl_FSFileAttrsGet"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSFileAttrsGet) - 3624usize] ; ["Offset of field: TclStubs::tcl_FSFileAttrsSet"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSFileAttrsSet) - 3632usize] ; ["Offset of field: TclStubs::tcl_FSFileAttrStrings"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSFileAttrStrings) - 3640usize] ; ["Offset of field: TclStubs::tcl_FSStat"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSStat) - 3648usize] ; ["Offset of field: TclStubs::tcl_FSAccess"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSAccess) - 3656usize] ; ["Offset of field: TclStubs::tcl_FSOpenFileChannel"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSOpenFileChannel) - 3664usize] ; ["Offset of field: TclStubs::tcl_FSGetCwd"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSGetCwd) - 3672usize] ; ["Offset of field: TclStubs::tcl_FSChdir"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSChdir) - 3680usize] ; ["Offset of field: TclStubs::tcl_FSConvertToPathType"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSConvertToPathType) - 3688usize] ; ["Offset of field: TclStubs::tcl_FSJoinPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSJoinPath) - 3696usize] ; ["Offset of field: TclStubs::tcl_FSSplitPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSSplitPath) - 3704usize] ; ["Offset of field: TclStubs::tcl_FSEqualPaths"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSEqualPaths) - 3712usize] ; ["Offset of field: TclStubs::tcl_FSGetNormalizedPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSGetNormalizedPath) - 3720usize] ; ["Offset of field: TclStubs::tcl_FSJoinToPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSJoinToPath) - 3728usize] ; ["Offset of field: TclStubs::tcl_FSGetInternalRep"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSGetInternalRep) - 3736usize] ; ["Offset of field: TclStubs::tcl_FSGetTranslatedPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSGetTranslatedPath) - 3744usize] ; ["Offset of field: TclStubs::tcl_FSEvalFile"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSEvalFile) - 3752usize] ; ["Offset of field: TclStubs::tcl_FSNewNativePath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSNewNativePath) - 3760usize] ; ["Offset of field: TclStubs::tcl_FSGetNativePath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSGetNativePath) - 3768usize] ; ["Offset of field: TclStubs::tcl_FSFileSystemInfo"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSFileSystemInfo) - 3776usize] ; ["Offset of field: TclStubs::tcl_FSPathSeparator"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSPathSeparator) - 3784usize] ; ["Offset of field: TclStubs::tcl_FSListVolumes"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSListVolumes) - 3792usize] ; ["Offset of field: TclStubs::tcl_FSRegister"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSRegister) - 3800usize] ; ["Offset of field: TclStubs::tcl_FSUnregister"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSUnregister) - 3808usize] ; ["Offset of field: TclStubs::tcl_FSData"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSData) - 3816usize] ; ["Offset of field: TclStubs::tcl_FSGetTranslatedStringPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSGetTranslatedStringPath) - 3824usize] ; ["Offset of field: TclStubs::tcl_FSGetFileSystemForPath"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSGetFileSystemForPath) - 3832usize] ; ["Offset of field: TclStubs::tcl_FSGetPathType"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSGetPathType) - 3840usize] ; ["Offset of field: TclStubs::tcl_OutputBuffered"] [:: std :: mem :: offset_of ! (TclStubs , tcl_OutputBuffered) - 3848usize] ; ["Offset of field: TclStubs::tcl_FSMountsChanged"] [:: std :: mem :: offset_of ! (TclStubs , tcl_FSMountsChanged) - 3856usize] ; ["Offset of field: TclStubs::tcl_EvalTokensStandard"] [:: std :: mem :: offset_of ! (TclStubs , tcl_EvalTokensStandard) - 3864usize] ; ["Offset of field: TclStubs::tcl_GetTime"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetTime) - 3872usize] ; ["Offset of field: TclStubs::tcl_CreateObjTrace"] [:: std :: mem :: offset_of ! (TclStubs , tcl_CreateObjTrace) - 3880usize] ; ["Offset of field: TclStubs::tcl_GetCommandInfoFromToken"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetCommandInfoFromToken) - 3888usize] ; ["Offset of field: TclStubs::tcl_SetCommandInfoFromToken"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetCommandInfoFromToken) - 3896usize] ; ["Offset of field: TclStubs::tcl_DbNewWideIntObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_DbNewWideIntObj) - 3904usize] ; ["Offset of field: TclStubs::tcl_GetWideIntFromObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_GetWideIntFromObj) - 3912usize] ; ["Offset of field: TclStubs::tcl_NewWideIntObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_NewWideIntObj) - 3920usize] ; ["Offset of field: TclStubs::tcl_SetWideIntObj"] [:: std :: mem :: offset_of ! (TclStubs , tcl_SetWideIntObj) - 3928usize] ; ["Offset of field: TclStubs::tcl_AllocStatBuf"] [:: std :: mem :: offset_of ! (TclStubs , tcl_AllocStatBuf) - 3936usize] ; ["Offset of field: TclStubs::tcl_Seek"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Seek) - 3944usize] ; ["Offset of field: TclStubs::tcl_Tell"] [:: std :: mem :: offset_of ! (TclStubs , tcl_Tell) - 3952usize] ; ["Offset of field: TclStubs::tcl_ChannelWideSeekProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelWideSeekProc) - 3960usize] ; ["Offset of field: TclStubs::reserved494"] [:: std :: mem :: offset_of ! (TclStubs , reserved494) - 3968usize] ; ["Offset of field: TclStubs::reserved495"] [:: std :: mem :: offset_of ! (TclStubs , reserved495) - 3976usize] ; ["Offset of field: TclStubs::reserved496"] [:: std :: mem :: offset_of ! (TclStubs , reserved496) - 3984usize] ; ["Offset of field: TclStubs::reserved497"] [:: std :: mem :: offset_of ! (TclStubs , reserved497) - 3992usize] ; ["Offset of field: TclStubs::reserved498"] [:: std :: mem :: offset_of ! (TclStubs , reserved498) - 4000usize] ; ["Offset of field: TclStubs::reserved499"] [:: std :: mem :: offset_of ! (TclStubs , reserved499) - 4008usize] ; ["Offset of field: TclStubs::reserved500"] [:: std :: mem :: offset_of ! (TclStubs , reserved500) - 4016usize] ; ["Offset of field: TclStubs::reserved501"] [:: std :: mem :: offset_of ! (TclStubs , reserved501) - 4024usize] ; ["Offset of field: TclStubs::reserved502"] [:: std :: mem :: offset_of ! (TclStubs , reserved502) - 4032usize] ; ["Offset of field: TclStubs::reserved503"] [:: std :: mem :: offset_of ! (TclStubs , reserved503) - 4040usize] ; ["Offset of field: TclStubs::reserved504"] [:: std :: mem :: offset_of ! (TclStubs , reserved504) - 4048usize] ; ["Offset of field: TclStubs::reserved505"] [:: std :: mem :: offset_of ! (TclStubs , reserved505) - 4056usize] ; ["Offset of field: TclStubs::reserved506"] [:: std :: mem :: offset_of ! (TclStubs , reserved506) - 4064usize] ; ["Offset of field: TclStubs::reserved507"] [:: std :: mem :: offset_of ! (TclStubs , reserved507) - 4072usize] ; ["Offset of field: TclStubs::reserved508"] [:: std :: mem :: offset_of ! (TclStubs , reserved508) - 4080usize] ; ["Offset of field: TclStubs::reserved509"] [:: std :: mem :: offset_of ! (TclStubs , reserved509) - 4088usize] ; ["Offset of field: TclStubs::reserved510"] [:: std :: mem :: offset_of ! (TclStubs , reserved510) - 4096usize] ; ["Offset of field: TclStubs::reserved511"] [:: std :: mem :: offset_of ! (TclStubs , reserved511) - 4104usize] ; ["Offset of field: TclStubs::reserved512"] [:: std :: mem :: offset_of ! (TclStubs , reserved512) - 4112usize] ; ["Offset of field: TclStubs::reserved513"] [:: std :: mem :: offset_of ! (TclStubs , reserved513) - 4120usize] ; ["Offset of field: TclStubs::reserved514"] [:: std :: mem :: offset_of ! (TclStubs , reserved514) - 4128usize] ; ["Offset of field: TclStubs::reserved515"] [:: std :: mem :: offset_of ! (TclStubs , reserved515) - 4136usize] ; ["Offset of field: TclStubs::reserved516"] [:: std :: mem :: offset_of ! (TclStubs , reserved516) - 4144usize] ; ["Offset of field: TclStubs::reserved517"] [:: std :: mem :: offset_of ! (TclStubs , reserved517) - 4152usize] ; ["Offset of field: TclStubs::reserved518"] [:: std :: mem :: offset_of ! (TclStubs , reserved518) - 4160usize] ; ["Offset of field: TclStubs::reserved519"] [:: std :: mem :: offset_of ! (TclStubs , reserved519) - 4168usize] ; ["Offset of field: TclStubs::reserved520"] [:: std :: mem :: offset_of ! (TclStubs , reserved520) - 4176usize] ; ["Offset of field: TclStubs::reserved521"] [:: std :: mem :: offset_of ! (TclStubs , reserved521) - 4184usize] ; ["Offset of field: TclStubs::reserved522"] [:: std :: mem :: offset_of ! (TclStubs , reserved522) - 4192usize] ; ["Offset of field: TclStubs::reserved523"] [:: std :: mem :: offset_of ! (TclStubs , reserved523) - 4200usize] ; ["Offset of field: TclStubs::reserved524"] [:: std :: mem :: offset_of ! (TclStubs , reserved524) - 4208usize] ; ["Offset of field: TclStubs::reserved525"] [:: std :: mem :: offset_of ! (TclStubs , reserved525) - 4216usize] ; ["Offset of field: TclStubs::reserved526"] [:: std :: mem :: offset_of ! (TclStubs , reserved526) - 4224usize] ; ["Offset of field: TclStubs::reserved527"] [:: std :: mem :: offset_of ! (TclStubs , reserved527) - 4232usize] ; ["Offset of field: TclStubs::reserved528"] [:: std :: mem :: offset_of ! (TclStubs , reserved528) - 4240usize] ; ["Offset of field: TclStubs::reserved529"] [:: std :: mem :: offset_of ! (TclStubs , reserved529) - 4248usize] ; ["Offset of field: TclStubs::reserved530"] [:: std :: mem :: offset_of ! (TclStubs , reserved530) - 4256usize] ; ["Offset of field: TclStubs::reserved531"] [:: std :: mem :: offset_of ! (TclStubs , reserved531) - 4264usize] ; ["Offset of field: TclStubs::reserved532"] [:: std :: mem :: offset_of ! (TclStubs , reserved532) - 4272usize] ; ["Offset of field: TclStubs::reserved533"] [:: std :: mem :: offset_of ! (TclStubs , reserved533) - 4280usize] ; ["Offset of field: TclStubs::reserved534"] [:: std :: mem :: offset_of ! (TclStubs , reserved534) - 4288usize] ; ["Offset of field: TclStubs::reserved535"] [:: std :: mem :: offset_of ! (TclStubs , reserved535) - 4296usize] ; ["Offset of field: TclStubs::reserved536"] [:: std :: mem :: offset_of ! (TclStubs , reserved536) - 4304usize] ; ["Offset of field: TclStubs::reserved537"] [:: std :: mem :: offset_of ! (TclStubs , reserved537) - 4312usize] ; ["Offset of field: TclStubs::reserved538"] [:: std :: mem :: offset_of ! (TclStubs , reserved538) - 4320usize] ; ["Offset of field: TclStubs::reserved539"] [:: std :: mem :: offset_of ! (TclStubs , reserved539) - 4328usize] ; ["Offset of field: TclStubs::reserved540"] [:: std :: mem :: offset_of ! (TclStubs , reserved540) - 4336usize] ; ["Offset of field: TclStubs::reserved541"] [:: std :: mem :: offset_of ! (TclStubs , reserved541) - 4344usize] ; ["Offset of field: TclStubs::reserved542"] [:: std :: mem :: offset_of ! (TclStubs , reserved542) - 4352usize] ; ["Offset of field: TclStubs::reserved543"] [:: std :: mem :: offset_of ! (TclStubs , reserved543) - 4360usize] ; ["Offset of field: TclStubs::reserved544"] [:: std :: mem :: offset_of ! (TclStubs , reserved544) - 4368usize] ; ["Offset of field: TclStubs::reserved545"] [:: std :: mem :: offset_of ! (TclStubs , reserved545) - 4376usize] ; ["Offset of field: TclStubs::reserved546"] [:: std :: mem :: offset_of ! (TclStubs , reserved546) - 4384usize] ; ["Offset of field: TclStubs::reserved547"] [:: std :: mem :: offset_of ! (TclStubs , reserved547) - 4392usize] ; ["Offset of field: TclStubs::reserved548"] [:: std :: mem :: offset_of ! (TclStubs , reserved548) - 4400usize] ; ["Offset of field: TclStubs::reserved549"] [:: std :: mem :: offset_of ! (TclStubs , reserved549) - 4408usize] ; ["Offset of field: TclStubs::reserved550"] [:: std :: mem :: offset_of ! (TclStubs , reserved550) - 4416usize] ; ["Offset of field: TclStubs::reserved551"] [:: std :: mem :: offset_of ! (TclStubs , reserved551) - 4424usize] ; ["Offset of field: TclStubs::reserved552"] [:: std :: mem :: offset_of ! (TclStubs , reserved552) - 4432usize] ; ["Offset of field: TclStubs::reserved553"] [:: std :: mem :: offset_of ! (TclStubs , reserved553) - 4440usize] ; ["Offset of field: TclStubs::tcl_ChannelThreadActionProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_ChannelThreadActionProc) - 4448usize] ; ["Offset of field: TclStubs::reserved555"] [:: std :: mem :: offset_of ! (TclStubs , reserved555) - 4456usize] ; ["Offset of field: TclStubs::reserved556"] [:: std :: mem :: offset_of ! (TclStubs , reserved556) - 4464usize] ; ["Offset of field: TclStubs::reserved557"] [:: std :: mem :: offset_of ! (TclStubs , reserved557) - 4472usize] ; ["Offset of field: TclStubs::reserved558"] [:: std :: mem :: offset_of ! (TclStubs , reserved558) - 4480usize] ; ["Offset of field: TclStubs::reserved559"] [:: std :: mem :: offset_of ! (TclStubs , reserved559) - 4488usize] ; ["Offset of field: TclStubs::reserved560"] [:: std :: mem :: offset_of ! (TclStubs , reserved560) - 4496usize] ; ["Offset of field: TclStubs::reserved561"] [:: std :: mem :: offset_of ! (TclStubs , reserved561) - 4504usize] ; ["Offset of field: TclStubs::reserved562"] [:: std :: mem :: offset_of ! (TclStubs , reserved562) - 4512usize] ; ["Offset of field: TclStubs::reserved563"] [:: std :: mem :: offset_of ! (TclStubs , reserved563) - 4520usize] ; ["Offset of field: TclStubs::reserved564"] [:: std :: mem :: offset_of ! (TclStubs , reserved564) - 4528usize] ; ["Offset of field: TclStubs::reserved565"] [:: std :: mem :: offset_of ! (TclStubs , reserved565) - 4536usize] ; ["Offset of field: TclStubs::reserved566"] [:: std :: mem :: offset_of ! (TclStubs , reserved566) - 4544usize] ; ["Offset of field: TclStubs::reserved567"] [:: std :: mem :: offset_of ! (TclStubs , reserved567) - 4552usize] ; ["Offset of field: TclStubs::reserved568"] [:: std :: mem :: offset_of ! (TclStubs , reserved568) - 4560usize] ; ["Offset of field: TclStubs::reserved569"] [:: std :: mem :: offset_of ! (TclStubs , reserved569) - 4568usize] ; ["Offset of field: TclStubs::reserved570"] [:: std :: mem :: offset_of ! (TclStubs , reserved570) - 4576usize] ; ["Offset of field: TclStubs::reserved571"] [:: std :: mem :: offset_of ! (TclStubs , reserved571) - 4584usize] ; ["Offset of field: TclStubs::reserved572"] [:: std :: mem :: offset_of ! (TclStubs , reserved572) - 4592usize] ; ["Offset of field: TclStubs::tcl_PkgRequireProc"] [:: std :: mem :: offset_of ! (TclStubs , tcl_PkgRequireProc) - 4600usize] ; ["Offset of field: TclStubs::reserved574"] [:: std :: mem :: offset_of ! (TclStubs , reserved574) - 4608usize] ; ["Offset of field: TclStubs::reserved575"] [:: std :: mem :: offset_of ! (TclStubs , reserved575) - 4616usize] ; ["Offset of field: TclStubs::reserved576"] [:: std :: mem :: offset_of ! (TclStubs , reserved576) - 4624usize] ; ["Offset of field: TclStubs::reserved577"] [:: std :: mem :: offset_of ! (TclStubs , reserved577) - 4632usize] ; ["Offset of field: TclStubs::reserved578"] [:: std :: mem :: offset_of ! (TclStubs , reserved578) - 4640usize] ; ["Offset of field: TclStubs::reserved579"] [:: std :: mem :: offset_of ! (TclStubs , reserved579) - 4648usize] ; ["Offset of field: TclStubs::reserved580"] [:: std :: mem :: offset_of ! (TclStubs , reserved580) - 4656usize] ; ["Offset of field: TclStubs::reserved581"] [:: std :: mem :: offset_of ! (TclStubs , reserved581) - 4664usize] ; ["Offset of field: TclStubs::reserved582"] [:: std :: mem :: offset_of ! (TclStubs , reserved582) - 4672usize] ; ["Offset of field: TclStubs::reserved583"] [:: std :: mem :: offset_of ! (TclStubs , reserved583) - 4680usize] ; ["Offset of field: TclStubs::reserved584"] [:: std :: mem :: offset_of ! (TclStubs , reserved584) - 4688usize] ; ["Offset of field: TclStubs::reserved585"] [:: std :: mem :: offset_of ! (TclStubs , reserved585) - 4696usize] ; ["Offset of field: TclStubs::reserved586"] [:: std :: mem :: offset_of ! (TclStubs , reserved586) - 4704usize] ; ["Offset of field: TclStubs::reserved587"] [:: std :: mem :: offset_of ! (TclStubs , reserved587) - 4712usize] ; ["Offset of field: TclStubs::reserved588"] [:: std :: mem :: offset_of ! (TclStubs , reserved588) - 4720usize] ; ["Offset of field: TclStubs::reserved589"] [:: std :: mem :: offset_of ! (TclStubs , reserved589) - 4728usize] ; ["Offset of field: TclStubs::reserved590"] [:: std :: mem :: offset_of ! (TclStubs , reserved590) - 4736usize] ; ["Offset of field: TclStubs::reserved591"] [:: std :: mem :: offset_of ! (TclStubs , reserved591) - 4744usize] ; ["Offset of field: TclStubs::reserved592"] [:: std :: mem :: offset_of ! (TclStubs , reserved592) - 4752usize] ; ["Offset of field: TclStubs::reserved593"] [:: std :: mem :: offset_of ! (TclStubs , reserved593) - 4760usize] ; ["Offset of field: TclStubs::reserved594"] [:: std :: mem :: offset_of ! (TclStubs , reserved594) - 4768usize] ; ["Offset of field: TclStubs::reserved595"] [:: std :: mem :: offset_of ! (TclStubs , reserved595) - 4776usize] ; ["Offset of field: TclStubs::reserved596"] [:: std :: mem :: offset_of ! (TclStubs , reserved596) - 4784usize] ; ["Offset of field: TclStubs::reserved597"] [:: std :: mem :: offset_of ! (TclStubs , reserved597) - 4792usize] ; ["Offset of field: TclStubs::reserved598"] [:: std :: mem :: offset_of ! (TclStubs , reserved598) - 4800usize] ; ["Offset of field: TclStubs::reserved599"] [:: std :: mem :: offset_of ! (TclStubs , reserved599) - 4808usize] ; ["Offset of field: TclStubs::reserved600"] [:: std :: mem :: offset_of ! (TclStubs , reserved600) - 4816usize] ; ["Offset of field: TclStubs::reserved601"] [:: std :: mem :: offset_of ! (TclStubs , reserved601) - 4824usize] ; ["Offset of field: TclStubs::reserved602"] [:: std :: mem :: offset_of ! (TclStubs , reserved602) - 4832usize] ; ["Offset of field: TclStubs::reserved603"] [:: std :: mem :: offset_of ! (TclStubs , reserved603) - 4840usize] ; ["Offset of field: TclStubs::reserved604"] [:: std :: mem :: offset_of ! (TclStubs , reserved604) - 4848usize] ; ["Offset of field: TclStubs::reserved605"] [:: std :: mem :: offset_of ! (TclStubs , reserved605) - 4856usize] ; ["Offset of field: TclStubs::reserved606"] [:: std :: mem :: offset_of ! (TclStubs , reserved606) - 4864usize] ; ["Offset of field: TclStubs::reserved607"] [:: std :: mem :: offset_of ! (TclStubs , reserved607) - 4872usize] ; ["Offset of field: TclStubs::reserved608"] [:: std :: mem :: offset_of ! (TclStubs , reserved608) - 4880usize] ; ["Offset of field: TclStubs::reserved609"] [:: std :: mem :: offset_of ! (TclStubs , reserved609) - 4888usize] ; ["Offset of field: TclStubs::reserved610"] [:: std :: mem :: offset_of ! (TclStubs , reserved610) - 4896usize] ; ["Offset of field: TclStubs::reserved611"] [:: std :: mem :: offset_of ! (TclStubs , reserved611) - 4904usize] ; ["Offset of field: TclStubs::reserved612"] [:: std :: mem :: offset_of ! (TclStubs , reserved612) - 4912usize] ; ["Offset of field: TclStubs::reserved613"] [:: std :: mem :: offset_of ! (TclStubs , reserved613) - 4920usize] ; ["Offset of field: TclStubs::reserved614"] [:: std :: mem :: offset_of ! (TclStubs , reserved614) - 4928usize] ; ["Offset of field: TclStubs::reserved615"] [:: std :: mem :: offset_of ! (TclStubs , reserved615) - 4936usize] ; ["Offset of field: TclStubs::reserved616"] [:: std :: mem :: offset_of ! (TclStubs , reserved616) - 4944usize] ; ["Offset of field: TclStubs::reserved617"] [:: std :: mem :: offset_of ! (TclStubs , reserved617) - 4952usize] ; ["Offset of field: TclStubs::reserved618"] [:: std :: mem :: offset_of ! (TclStubs , reserved618) - 4960usize] ; ["Offset of field: TclStubs::reserved619"] [:: std :: mem :: offset_of ! (TclStubs , reserved619) - 4968usize] ; ["Offset of field: TclStubs::reserved620"] [:: std :: mem :: offset_of ! (TclStubs , reserved620) - 4976usize] ; ["Offset of field: TclStubs::reserved621"] [:: std :: mem :: offset_of ! (TclStubs , reserved621) - 4984usize] ; ["Offset of field: TclStubs::reserved622"] [:: std :: mem :: offset_of ! (TclStubs , reserved622) - 4992usize] ; ["Offset of field: TclStubs::reserved623"] [:: std :: mem :: offset_of ! (TclStubs , reserved623) - 5000usize] ; ["Offset of field: TclStubs::reserved624"] [:: std :: mem :: offset_of ! (TclStubs , reserved624) - 5008usize] ; ["Offset of field: TclStubs::reserved625"] [:: std :: mem :: offset_of ! (TclStubs , reserved625) - 5016usize] ; ["Offset of field: TclStubs::reserved626"] [:: std :: mem :: offset_of ! (TclStubs , reserved626) - 5024usize] ; ["Offset of field: TclStubs::reserved627"] [:: std :: mem :: offset_of ! (TclStubs , reserved627) - 5032usize] ; ["Offset of field: TclStubs::reserved628"] [:: std :: mem :: offset_of ! (TclStubs , reserved628) - 5040usize] ; ["Offset of field: TclStubs::reserved629"] [:: std :: mem :: offset_of ! (TclStubs , reserved629) - 5048usize] ; ["Offset of field: TclStubs::tclUnusedStubEntry"] [:: std :: mem :: offset_of ! (TclStubs , tclUnusedStubEntry) - 5056usize] ; } ; unsafe extern "C" { pub static mut tclStubsPtr : * mut TclStubs ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct TclPlatStubs { pub magic : :: std :: os :: raw :: c_int , pub hooks : * mut TclPlatStubHooks , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of TclPlatStubs"] [:: std :: mem :: size_of :: < TclPlatStubs > () - 16usize] ; ["Alignment of TclPlatStubs"] [:: std :: mem :: align_of :: < TclPlatStubs > () - 8usize] ; ["Offset of field: TclPlatStubs::magic"] [:: std :: mem :: offset_of ! (TclPlatStubs , magic) - 0usize] ; ["Offset of field: TclPlatStubs::hooks"] [:: std :: mem :: offset_of ! (TclPlatStubs , hooks) - 8usize] ; } ; unsafe extern "C" { pub static mut tclPlatStubsPtr : * mut TclPlatStubs ; } unsafe extern "C" { pub fn Tcl_Main (argc : :: std :: os :: raw :: c_int , argv : * mut * mut :: std :: os :: raw :: c_char , appInitProc : Tcl_AppInitProc) ; } unsafe extern "C" { pub fn Tcl_AppInit (interp : * mut Tcl_Interp) -> :: std :: os :: raw :: c_int ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct TclIntStubs { pub _address : u8 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct TclIntPlatStubs { pub _address : u8 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct TclPlatStubHooks { pub _address : u8 , }